diff --git a/V1.6.0 b/V1.6.0
index dd059948c3b79a3af31d68675b88a8d96ab955aa..c6a8edfa48d838eef5df12fbf34778440cb17d25 100644
--- a/V1.6.0
+++ b/V1.6.0
@@ -1,190 +1,251 @@
 // BizTracker.js v1.6.0 ‚Äî Roll20 API (ES5-safe)
 // ‚Ä¢ Keeps v1.5.0 structure & UI, adds: Seasons, Restaurant & Caf√© menus/recipes,
 //   Central Market (brands, age, quality, specials), Suppliers, Lots+Spoilage/Aging,
 //   Dynamic pricing, Staff skill throughput, Courier trust & insurance,
 //   Franchise bulk discounts, Strategy UI, Weekly report, Export.
 // ‚Ä¢ ES5-safe (no let/const/arrow), compact panels & buttons maintained.
 
+/* ======================
+   UNIFIED LOGGER
+   ====================== */
+
+var LOG_LEVELS = { debug:0, info:1, warn:2, error:3 };
+state.BIZ = state.BIZ || {};
+state.BIZ.log = state.BIZ.log || { enable:true, minLevel:'debug', history:[] };
+
+function _now(){ return new Date().toISOString(); }
+function _lvl(n){ return LOG_LEVELS[n] || 0; }
+function log(level, ctx, msg, data){
+  try{
+    if (!state.BIZ.log || !state.BIZ.log.enable) return;
+    if (_lvl(level) < _lvl(state.BIZ.log.minLevel)) return;
+    var rec = { t:_now(), level:level, ctx:ctx, msg:String(msg||''), data:(data||null) };
+    state.BIZ.log.history.push(rec);
+    if (state.BIZ.log.history.length>500) state.BIZ.log.history.shift();
+    var prefix = '['+level.toUpperCase()+']['+ctx+'] ';
+    if (level==='error') logError(prefix+msg, data);
+    else if (level==='warn') logWarn(prefix+msg, data);
+    else logInfo(prefix+msg, data);
+  }catch(e){ /* never throw */ }
+}
+function logInfo(m,d){ if (typeof sendChat==='function'){ sendChat('BizTracker', '/w gm '+_.escape(m)); } if (d) try{console.log(m,d);}catch(_){ } }
+function logWarn(m,d){ if (typeof sendChat==='function'){ sendChat('BizTracker', '/w gm \u26A0\uFE0F '+_.escape(m)); } if (d) try{console.warn(m,d);}catch(_){ } }
+function logError(m,d){ if (typeof sendChat==='function'){ sendChat('BizTracker', '/w gm \u274C '+_.escape(m)); } if (d) try{console.error(m,d);}catch(_){ } }
+
+// legacy wrappers
+function bizLog(message, data, ctx){ log('info', ctx||'LEGACY', message, data); }
+function bizWarn(message, data, ctx){ log('warn', ctx||'LEGACY', message, data); }
+function bizErr(message, data, ctx){ log('error', ctx||'LEGACY', message, data); }
+
 on('ready', function() {
+  bizLog('System ready, initializing state if needed');
   if (!state.BIZ) initializeState();
   state.BIZ.calendarEvents = state.BIZ.calendarEvents || [];
   state.BIZ.history        = state.BIZ.history || [];
   state.BIZ.market         = state.BIZ.market || buildInitialMarket();
   state.BIZ.market 		   = ensureMarketShape(state.BIZ.market);
   state.BIZ.version        = state.BIZ.version || '1.6.0';
-  log('üíº [BizTracker] Ready v'+state.BIZ.version);
+  bizLog('Ready', { version: state.BIZ.version });
 });
 
 /* =================
    STATE & UTIL
    ================= */
 function initializeState() {
+  bizLog('Initializing state');
   state.BIZ = {
     date:           { year:1358, month:'Hammer', day:1, festival:null, weekday:1 },
     businesses:     {},
     franchises:     {},
     calendarEvents: [],
     history:        [],
     market:         buildInitialMarket(), // central market
     version:        '1.6.0'
   };
+  bizLog('State initialized', state.BIZ);
 }
 function whisper(who, tmpl) {
   // Avoid dumping full HTML into the API log.
   // Flip state.BIZ._debug=true if you want minimal, plain-text logging.
   try {
     if (state.BIZ && state.BIZ._debug) {
       var txt = String(tmpl).replace(/<[^>]+>/g,' ').replace(/\s+/g,' ').slice(0,300);
-      log('‚û°Ô∏è '+who+': '+txt+(txt.length===300?'‚Ä¶':''));
+      bizLog('Whisper debug preview', { to: who, text: txt+(txt.length===300?'‚Ä¶':'') });
     }
   } catch(e) {}
-
+  bizLog('Whispering', { to: who });
   sendChat('BizTracker', '/w "'+who+'" ' + tmpl);
 }
 
 function stripQuotes(s){ return (s||'').replace(/^['"]?(.*?)['"]?$/, '$1'); }
-function encodeArg(s){ return encodeURIComponent(String((s===undefined||s===null)?'':s)); }
+function encodeArg(s){
+  bizLog('Encoding arg', { input: s });
+  return encodeURIComponent(String((s===undefined||s===null)?'':s));
+}
 function decodeArg(s){
+  bizLog('Decoding arg', { input: s });
   try { return decodeURIComponent(stripQuotes(s||'')); }
-  catch(e){ return stripQuotes(s||''); }
-}
-function currencyToCP(c){
-  return (c.pd||0)*100000 + (c.pp||0)*10000 + (c.gp||0)*1000 + (c.ep||0)*500 + (c.sp||0)*10 + (c.cp||0);
-}
-function cpToCurrency(total){
-  var cp = total|0;
-  var pd = Math.floor(cp/100000); cp%=100000;
-  var pp = Math.floor(cp/10000);  cp%=10000;
-  var gp = Math.floor(cp/1000);   cp%=1000;
-  var ep = Math.floor(cp/500);    cp%=500;
-  var sp = Math.floor(cp/10);     cp%=10;
-  return { pd:pd, pp:pp, gp:gp, ep:ep, sp:sp, cp:cp };
-}
-function currStr(c){ return c.pd+'pd '+c.pp+'pp '+c.gp+'gp '+c.ep+'ep '+c.sp+'sp '+c.cp+'cp'; }
-function gpStr(cp){ return (cp/1000).toFixed(2)+'gp'; }
+  catch(e){ bizWarn('Failed to decode arg', { input: s, error: e }); return stripQuotes(s||''); }
+}
+function gpToCP(gp){ return Math.round((gp||0) * 100); }
+function cpToGP(cp){ return Math.round((cp||0)) / 100; }
+function gpStr(cp){ return (cpToGP(cp)).toFixed(2)+'gp'; }
+function currencyToCP(c){ return gpToCP((c.pp||0)*10 + (c.gp||0) + (c.ep||0)*0.5 + (c.sp||0)*0.1 + (c.cp||0)*0.01); }
+function cpToCurrency(cp){
+  bizLog('Converting CP to currency', { total: cp });
+  var t = Math.round(cp||0);
+  var pp = Math.floor(t/1000); t%=1000;
+  var gp = Math.floor(t/100);  t%=100;
+  var ep = Math.floor(t/50);   t%=50;
+  var sp = Math.floor(t/10);   t%=10;
+  var out = { pp:pp, gp:gp, ep:ep, sp:sp, cp:t };
+  bizLog('Converted CP to currency', out);
+  return out;
+}
+function currStr(c){ return (c.pp||0)+'pp '+(c.gp||0)+'gp '+(c.ep||0)+'ep '+(c.sp||0)+'sp '+(c.cp||0)+'cp'; }
 function clamp(n,a,b){ return Math.max(a, Math.min(b, n)); }
 function rnd(min,max){ return Math.random()*(max-min)+min; }
 
 /* ================ */
 function badge(tone){
   if (tone==='pri') return 'üü©';
   if (tone==='sec') return 'üü¶';
   if (tone==='warn') return 'üü®';
   if (tone==='danger') return 'üü•';
   if (tone==='info') return 'üü™';
   if (tone==='muted') return '‚¨úÔ∏è';
   return '‚ñ™Ô∏è';
 }
 function btn(label, command, tone){
   // escape only the label; the command must remain raw for Roll20's button link
   return badge(tone)+' ['+_.escape(label)+']('+command+')';
 }
 
 function panel(title, lines){
+  bizLog('Building panel', { title: title, lines: lines });
   var list = (lines||[]).filter(function(x){ return x!==undefined && x!==null && x!==''; });
   var html = [];
   html.push('<div style="border:1px solid #444;background:#111;padding:8px;border-radius:6px;">');
   html.push('<div style="background:#2b6;color:#fff;padding:4px 8px;border-radius:4px;font-weight:bold;">'+_.escape(title)+'</div>');
   html.push('<div style="margin-top:6px;color:#ddd;line-height:1.45;">'+list.join('<br>')+'</div>');
   html.push('</div>');
-  return html.join('');
+  var out = html.join('');
+  bizLog('Built panel', { title: title });
+  return out;
 }
 
-function sayPanel(who, title, lines){ whisper(who, panel(title, lines)); }
+function sayPanel(who, title, lines){
+  bizLog('Sending panel', { to: who, title: title });
+  whisper(who, panel(title, lines));
+}
 
 /* =========================
    BUY FLOW (no SKUs)
    - Presents items linked to market for a chosen business
    - Lets user enter containers + extra base units
    - Shows cost preview with Yes/No -> executes purchase
    ========================= */
 
 function _gp(n){ return (Number(n)||0); }
 
 function gpFromCash(c){
+  bizLog('Calculating GP from cash', c);
   if (!c) return 0;
   // Conservative conversion (adjust if you use a different standard):
   // 1 pp=10gp, 1 ep=0.5gp, 1 sp=0.1gp, 1 cp=0.01gp, ignore pd if unknown
-  return _gp(c.gp)+_gp(c.pp)*10+_gp(c.ep)*0.5+_gp(c.sp)/10+_gp(c.cp)/100+_gp(c.pd||0)*10;
+  var gp = _gp(c.gp)+_gp(c.pp)*10+_gp(c.ep)*0.5+_gp(c.sp)/10+_gp(c.cp)/100+_gp(c.pd||0)*10;
+  bizLog('Calculated GP from cash', { gp: gp });
+  return gp;
 }
 function spendFromCash(c, costGP){
+  bizLog('Spending from cash', { cash: c, costGP: costGP });
   // Spend GP-first (simple). If you want proper coin-change, expand this.
   costGP = _gp(costGP);
   var have = gpFromCash(c);
   c.gp = _gp(c.gp) - costGP; // could go negative = debt
-  return have - costGP;
+  var remaining = have - costGP;
+  bizLog('Cash after spend', { remaining: remaining, updated: c });
+  return remaining;
 }
 
 function findCheapestMarketByTag(M, tag){
+  bizLog('Searching cheapest market item', { tag: tag });
   var best = null, id, sku, cur;
   for (id in M.skus){
     sku = M.skus[id]; cur = M.current[id];
     if (!cur || !cur.available) continue;
     var tags = sku.tags || [sku.type];
     if (tags && tags.indexOf(tag)!==-1){
       var price = _gp(cur.priceGP);
+      bizLog('Candidate market item', { id: id, price: price });
       if (!best || price < best.price){
         best = {
           skuId: id,
           name: sku.name,
           baseUnit: sku.baseUnit||'unit',
           price: price,
           offerPct: cur.offerPct||0
         };
+        bizLog('New best market item', best);
       }
     }
   }
+  bizLog('Cheapest market item result', best);
   return best;
 }
 
 // Returns market-buyable items for a business (by its STOCK defs)
 function getAvailableMarketItemsForBiz(biz){
+  bizLog('Getting available market items for biz', { biz: biz && biz.name, type: biz && biz.type });
   var t = TYPE_INCOME[biz.type];
-  if (!t) return [];
+  if (!t){ bizWarn('No income type for biz', { biz: biz }); return []; }
   var M = state.BIZ.market;
   var out = [];
   (t.stock||[]).forEach(function(s){
     if (!s.linkedToMarket || !s.marketTag) return;
     var best = findCheapestMarketByTag(M, s.marketTag);
     if (!best) return;
-    out.push({
+    var item = {
       stockKey: s.key,
       label: s.label,
       marketTag: s.marketTag,
       baseUnit: s.baseUnit || (best.baseUnit||'unit'),
       containerUnit: s.containerUnit || 'crate',
       unitsPerContainer: _gp(s.unitsPerContainer)||10,
       price: best.price, // per base unit
       offerPct: best.offerPct||0
-    });
+    };
+    bizLog('Available market item', item);
+    out.push(item);
   });
   // sort by tag then price
   out.sort(function(a,b){
     if (a.marketTag===b.marketTag) return a.price-b.price;
     return (a.marketTag<b.marketTag?-1:1);
   });
+  bizLog('Available market items result', out);
   return out;
 }
 
 function startBuyFlow(who, rawBizName){
   var name = stripQuotes(rawBizName);
   var biz  = state.BIZ.businesses[name];
   if (!biz) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(name)]));
   var avail = getAvailableMarketItemsForBiz(biz);
   if (!avail.length){
     return whisper(who, panel('Market', ['<em>No matching market items for '+_.escape(name)+'.</em>']));
   }
   var encBiz = encodeArg(name);
   var lines = ['üõí <b>Buy Stock ‚Äî '+_.escape(name)+'</b>', '<em>Select an item, then you‚Äôll enter quantities.</em>', '<hr>'];
   avail.forEach(function(it){
     var tag = it.marketTag, key = it.stockKey;
     var p = it.price.toFixed(3)+'gp/'+_.escape(it.baseUnit)+(it.offerPct?(' (offer '+it.offerPct+'%)'):'');
     lines.push('‚Ä¢ <b>'+_.escape(it.label)+'</b> ‚Äî '+p+
       ' '+btn('Select', "!biz --buyconfirm "+encBiz+" '"+key+"' '?{Containers of "+_.escape(it.containerUnit)+"|0}' '?{Extra "+_.escape(it.baseUnit)+"|0}'", 'pri'));
   });
   lines.push('<hr>'+btn('Back', "!biz --bizmenu "+encBiz, 'muted'));
   sayPanel(who, 'Market ‚Äî Pick Item', lines);
 }
 
 function startBuyFlowFromTag(who, rawTag){
   var tag = stripQuotes(rawTag);
diff --git a/V1.6.0 b/V1.6.0
index dd059948c3b79a3af31d68675b88a8d96ab955aa..c6a8edfa48d838eef5df12fbf34778440cb17d25 100644
--- a/V1.6.0
+++ b/V1.6.0
@@ -1459,53 +1520,70 @@ function marketOffersByTag(tag){
   return out;
 }
 function marketBestOffer(tag){
   var arr = marketOffersByTag(tag);
   return arr.length ? arr[0] : null;
 }
 
 /* =========================
    SUPPLIERS + FRANCHISE DISCOUNT
    ========================= */
 function franchiseDiscountFor(bizName){
   var name, fr, i;
   for (name in state.BIZ.franchises){
     fr = state.BIZ.franchises[name]||[];
     for (i=0;i<fr.length;i++){
       if (fr[i]===bizName){
         var members = fr.length;
         var tiers = Math.floor(members/3); // 3 members per 5% tier
         return clamp(tiers*0.05, 0, 0.15); // cap 15%
       }
     }
   }
   return 0;
 }
 function ensureSuppliers(biz){
-  biz.suppliers = biz.suppliers || {
-    'Common Consortium': { reliability:0.92, leadDays:2, discount:0 }
-  };
+  biz.suppliers = biz.suppliers || { 'Common Consortium': { reliability:0.92, baseLeadDays:2, discount:0, trust:50, variance:0.15, history:[] } };
+}
+function supplierEffectiveLead(sup){
+  var base = sup.baseLeadDays||sup.leadDays||2;
+  var jitter = (1 - (sup.trust||50)/100) * (sup.variance||0.15) * base;
+  var delta = (Math.random()*2-1) * jitter;
+  return Math.max(0, Math.round(base + delta));
+}
+function priceWithSupplier(sup, rawUnitPriceGP){
+  var penalty = Math.max(0, 60 - (sup.trust||50)) / 1000;
+  return rawUnitPriceGP * (1 - (sup.discount||0)) * (1 + penalty);
+}
+function updateSupplierTrust(sup, outcome){
+  var d = outcome==='on_time'? +2 : outcome==='late'? -1 : outcome==='partial'? -3 : -5;
+  sup.trust = clamp((sup.trust||50) + d, 0, 100);
+  sup.reliability = clamp( (sup.reliability||0.9)*0.9 + (outcome==='failed'?0:1)*0.1, 0, 0.999);
+  sup.history = sup.history || [];
+  sup.history.push({ t:_now(), outcome:outcome });
+  if (sup.history.length>100) sup.history.shift();
+  log('info','SUPPLIER','trust_update',{name:sup.name||'?', outcome:outcome, trust:sup.trust, reliability:sup.reliability});
 }
 
 /* =========================
    MENUS (recipes consume stock)
    ========================= */
 function seedMenuForBiz(biz){
   biz.menu = biz.menu || {};
   biz.menuSections = biz.menuSections || { drinks:{}, food:{}, services:{} };
 
   function addFood(key, label, priceGp, share, tags, recipe){
     biz.menu[key] = { label:label, priceGp:priceGp, share:share||0.2, tags:tags||[], recipe: recipe||[], pricingMode:'fixed', targetMargin:0.5, analytics:[] };
     biz.menuSections.food[key] = biz.menu[key];
   }
   function addDrink(key, label, priceGp, share, tags, recipe){
     biz.menu[key] = { label:label, priceGp:priceGp, share:share||0.2, tags:tags||[], recipe: recipe||[], pricingMode:'fixed', targetMargin:0.5, analytics:[] };
     biz.menuSections.drinks[key] = biz.menu[key];
   }
   function addService(key, label, priceGp, share, tags){
     biz.menu[key] = { label:label, priceGp:priceGp, share:share||0.2, tags:tags||[], recipe:[], pricingMode:'fixed', targetMargin:0.5, analytics:[] };
     biz.menuSections.services[key] = biz.menu[key];
   }
 
   // Food venues
   if (biz.type==='Tavern' || biz.type==='Restaurant' || biz.type==='Caf√©' || biz.type==='Inn'){
     addDrink('mead_pint','Pint of Mead', 0.06, 0.20, ['coldale'], [{key:'mead',units:1}]);
diff --git a/V1.6.0 b/V1.6.0
index dd059948c3b79a3af31d68675b88a8d96ab955aa..c6a8edfa48d838eef5df12fbf34778440cb17d25 100644
--- a/V1.6.0
+++ b/V1.6.0
@@ -1529,51 +1607,51 @@ function seedMenuForBiz(biz){
     addService('breast_adamant','Forge: Adamantine Breastplate', 800.00, 0.05, ['adamantine']);
     addService('blade_orich','Forge: Orichalcum Bastard Sword', 1200.00, 0.05, ['orichalcum']);
   }
   if (biz.type==='Courier Service'){
     addService('small_parcel','Small Parcel (wrapping)', 0.16, 0.6, [], []);
     addService('sealed_parcel','Sealed Parcel', 0.18, 0.4, [], []);
   }
 }
 
 /* ============ STOCK INIT + LOTS ============ */
 // Auto-initial restock: 1x standing order (or 1 container if no standing order)
 // Costs are deducted; cash may go negative (debt). Logged to ledger.
 function autoInitialRestock(bizName){
   var biz = state.BIZ.businesses[bizName];
   if (!biz || !biz.stock) return;
   var today = state.BIZ.date;
   Object.keys(biz.stock).forEach(function(k){
     var it = biz.stock[k];
     var units = it.baseStandingOrderUnits || it.standingOrderUnits || (it.unitsPerContainer||0) || 0;
     if (units<=0) return;
     var unitCost = it.purchaseCostPerUnit || 0.05, best;
     if (it.linkedToMarket && it.marketTag){
       best = marketBestOffer(it.marketTag);
       if (best) unitCost = best.priceGP;
     }
-    var costCP = Math.floor(units * unitCost * 1000);
+    var costCP = Math.round(units * unitCost * 100);
     biz.cash = cpToCurrency( currencyToCP(biz.cash) - costCP ); // allow debt
     addLot(it, units, today, best?best.id:null);
     appendLedger(bizName, '<p>‚Ä¢ Initial stock: '+units+' '+_.escape(it.baseUnit)+' of '+_.escape(it.label)+' ‚Äî ‚àí'+gpStr(costCP)+'</p>');
   });
 }
 
 function initStandingOrdersForBiz(biz){
   var tcfg = TYPE_INCOME[biz.type] || TYPE_INCOME['default'];
   var items = (tcfg.stock||[]);
   if (!biz.stock) biz.stock = {};
   for (var j=0;j<items.length;j++){
     var s = items[j];
     var cycle = perishDays(s.perishability);
     biz.stock[s.key] = {
       label:s.label, baseUnit:s.baseUnit, containerUnit:s.containerUnit, unitsPerContainer:s.unitsPerContainer,
       perishability:s.perishability, purchaseCostPerUnit:s.purchaseCostPerUnit, salePricePerUnit:s.salePricePerUnit||0,
       baseStandingOrderUnits: s.baseStandingOrderUnits||0, standingOrderUnits: s.baseStandingOrderUnits||0,
       marketTag: s.marketTag||null, linkedToMarket: !!s.linkedToMarket,
       qtyUnits: 0, lots: [], nextRestock: cycle ? addDaysHarptos(state.BIZ.date, cycle) : null,
       pricingMode:'fixed', targetMargin:0.5, tags:(s.tags||[]),
       ageBonusPct: (/whiskey|wine/.test(s.marketTag||'') ? 0.01 : 0) // +1%/month when aging
     };
   }
 }
 function addLot(it, qty, today, skuId){
diff --git a/V1.6.0 b/V1.6.0
index dd059948c3b79a3af31d68675b88a8d96ab955aa..c6a8edfa48d838eef5df12fbf34778440cb17d25 100644
--- a/V1.6.0
+++ b/V1.6.0
@@ -1677,50 +1755,74 @@ function pickDailyEvent(today){
   }
   return { tier:tier, desc: chosen.text, mult: mult*festMult, repDelta: (chosen.rep||0)+festRep, stockHit: chosen.stockHit||0 };
 }
 
 /* =========================
    HANDOUT LEDGER
    ========================= */
 function ensureLedgerHandout(bizName) {
   var wanted = 'Ledger ‚Äî ' + bizName;
   var ho = findObjs({ _type:'handout', name: wanted })[0];
   if (!ho) {
     ho = createObj('handout', { name: wanted, inplayerjournals: 'all', archived: false });
     var head = '<h1>'+_.escape(wanted)+'</h1><p><em>Automatic ledger. All values in gp unless noted.</em></p><hr>';
     ho.set('notes', head);
   }
   return ho;
 }
 function appendLedger(bizName, html) {
   var ho = ensureLedgerHandout(bizName);
   ho.get('notes', function(n){ ho.set('notes', (n||'') + html); });
 }
 function logOpenBusiness(name, type, sizeLabel, date, rooms){
   ensureLedgerHandout(name);
   appendLedger(name, '<h2>'+_.escape(dateStr(date))+'</h2><p><strong>Business:</strong> '+_.escape(name)+' ('+_.escape(type)+' ‚Äî '+_.escape(sizeLabel)+')'+(rooms?' ‚Äî Rooms: '+rooms:'')+'</p><hr>');
 }
+function quickAddBusiness(name, type, rooms){
+  log('info','QUICK','quickAddBusiness',{name:name,type:type,rooms:rooms});
+  state.BIZ.businesses[name] = {
+    type:type, size:'tiny', reputation:0, trust:(type==='Courier Service'?50:undefined),
+    policy:{ insurance:false },
+    cash:{pp:0,gp:0,ep:0,sp:0,cp:0},
+    expenses:[], staff:[], stock:{},
+    rooms: (TYPE_INCOME[type] && TYPE_INCOME[type].rooms) ? [] : undefined,
+    ledger:[]
+  };
+  initStandingOrdersForBiz(state.BIZ.businesses[name]);
+  ensureSuppliers(state.BIZ.businesses[name]);
+  ensureMenusForBusiness(state.BIZ.businesses[name]);
+  if (rooms>0 && state.BIZ.businesses[name].rooms){
+    for (var r=1;r<=rooms;r++) state.BIZ.businesses[name].rooms.push({ name:'Room #'+r, rateGp:0.50, upkeepGp:0.10, occupiedUntil:null });
+  }
+  autoInitialRestock(name);
+  logOpenBusiness(name, type, (SIZE['tiny'].label), state.BIZ.date, rooms||0);
+}
+function handleMarketBuyTagQuote(who, bn, key, tag, cont, units){
+  log('info','BUY','handleMarketBuyTagQuote',{bn:bn,key:key,tag:tag,cont:cont,units:units});
+  // TODO: implement full market quote and confirmation flow
+  return whisper(who, panel('Buy Drinks',['Not implemented.']));
+}
 function logDailyOutcome(name, today, paidList, baseCP, evt, incomeCP, netCP, closingCashStr, capacityNote, stockSpoilLines, consumptionNote){
   var lines = [];
   lines.push('<h3>'+_.escape(dateStr(today))+'</h3>');
   if (today.festival) lines.push('<p><strong>Festival:</strong> '+_.escape(today.festival)+'</p>');
   if (paidList.length){
     lines.push('<p><strong>Expenses & Purchases Today</strong></p><ul>');
     for (var i=0;i<paidList.length;i++){
       var p = paidList[i];
       lines.push('<li>'+_.escape(p.what)+' ('+_.escape(p.freq)+') ‚Äî ‚àí'+gpStr(p.cp)+'</li>');
     }
     lines.push('</ul>');
   } else {
     lines.push('<p><em>No expenses paid today.</em></p>');
   }
   if (stockSpoilLines && stockSpoilLines.length){
     lines.push('<p><strong>Spoilage/Breakage</strong></p><ul>');
     for (var s=0;s<stockSpoilLines.length;s++) lines.push('<li>'+_.escape(stockSpoilLines[s])+'</li>');
     lines.push('</ul>');
   }
   lines.push(
     '<p><strong>Base Income:</strong> +'+gpStr(baseCP)+'<br>'+
     '<strong>Event:</strong> '+_.escape(evt.tier)+' (√ó'+evt.mult.toFixed(2)+') ‚Äî '+_.escape(evt.desc)+'<br>'+
     '<strong>Income Applied:</strong> +'+gpStr(incomeCP)+(capacityNote?'<br><em>'+_.escape(capacityNote)+'</em>':'')+(consumptionNote?'<br><em>'+_.escape(consumptionNote)+'</em>':'')+'</p>'
   );
   var sign = netCP>=0?'+':'‚àí';
diff --git a/V1.6.0 b/V1.6.0
index dd059948c3b79a3af31d68675b88a8d96ab955aa..c6a8edfa48d838eef5df12fbf34778440cb17d25 100644
--- a/V1.6.0
+++ b/V1.6.0
@@ -1750,90 +1852,93 @@ function menuLines(biz){
   else for (i=0;i<K.length;i++){ it=S[K[i]]; out.push('‚Ä¢ <b>'+_.escape(it.label)+'</b> ‚Äî '+it.priceGp.toFixed(2)+'gp'); }
   return out;
 }
 
 
 /* ==============
    MENUS: consume
    ============== */
 function consumeIngredients(biz, recipe, units, paidToday){
   var i, r, needed, it, used, short, rushCP=0, buyCost, uval;
   recipe = recipe||[];
   for (i=0;i<recipe.length;i++){
     r = recipe[i];
     needed = r.units * units;
     it = biz.stock[r.key];
     if (!it){ return { ok:false, rushCP:0, note:'Missing stock key '+r.key }; }
     // have enough?
     used = takeFromLots(it, needed);
     if (used<needed){
       short = needed - used;
       // try rush buy via market if linked, else at purchaseCostPerUnit
       uval = it.purchaseCostPerUnit || 0.05;
       if (it.linkedToMarket && it.marketTag){
         var best = marketBestPrice(it.marketTag);
         if (best && best.priceGP>0){
-          buyCost = Math.floor(short * best.priceGP * 1000 * 1.10); // 10% rush premium
+          buyCost = Math.round(short * best.priceGP * 100 * 1.10); // 10% rush premium
           rushCP += buyCost;
           addLot(it, short, state.BIZ.date, best.id);
           // immediately consume
           takeFromLots(it, short);
         } else return { ok:false, rushCP:rushCP, note:'Market out: '+it.label };
       } else {
-        buyCost = Math.floor(short * uval * 1000 * 1.10);
+        buyCost = Math.round(short * uval * 100 * 1.10);
         rushCP += buyCost;
         addLot(it, short, state.BIZ.date, null);
         takeFromLots(it, short);
       }
       if (rushCP>0) paidToday.push({ what:'Emergency '+it.label, freq:'One-off', cp:rushCP });
     }
   }
   return { ok:true, rushCP:rushCP, note:'' };
 }
 
 /* ==============
    UI ‚Äî MENUS & MARKET
    ============== */
 function showMainMenu(who) {
   var d = state.BIZ.date;
   var biz = _.keys(state.BIZ.businesses);
   var fr  = _.keys(state.BIZ.franchises);
   var evts= state.BIZ.calendarEvents || [];
 // Build the list of types dynamically from TYPE_INCOME (skip 'default')
   var typeList = _.keys(TYPE_INCOME).filter(function(k){ return k!=='default'; }).join('|');
 
 
   var lines = [];
   lines.push('üìÖ <b>'+_.escape(dateStr(d))+'</b> ‚Äî Tenday '+d.weekday+'/10');
 
   lines.push(
     btn('Set Date', "!biz --setdate '?{Month|"+months.join('|')+"}' '?{Day (1-30 or 0 for festival)|1}' '?{Year|1358}' '?{Festival (leave blank or pick)|"+festivals.map(function(f){return f.name;}).join('|')+"}'", 'info')
   );
 
   lines.push(
     btn('Add Business', "!biz --addbusiness '?{Name}' '?{Type|"+typeList+"}' '?{Rooms (Inn only)|0}'", 'pri')
   );
+  lines.push(
+    btn('Add Business (Quick)', "!biz --quickadd '?{Name}' '?{Type|"+typeList+"}' '?{Rooms (Inn only)|0}'", 'pri')
+  );
 
   if (biz.length){
     lines.push(btn('Remove Business', "!biz --removebusiness '?{Name|"+biz.join('|')+"}'", 'danger'));
     lines.push('<hr><b>Businesses</b>');
     for (var i=0;i<biz.length;i++){
       lines.push(btn(biz[i], "!biz --bizmenu "+encodeArg(biz[i]), 'sec'));
     }
   } else {
     lines.push('<em>no businesses</em>');
   }
 
   lines.push('<hr>');
   lines.push(btn('Add Franchise', "!biz --addfranchise '?{Name}'", 'pri'));
   if (fr.length){
     lines.push(btn('Remove Franchise', "!biz --removefranchise '?{Name|"+fr.join('|')+"}'", 'danger'));
     lines.push('<hr><b>Franchises</b>');
     for (var j=0;j<fr.length;j++){
       lines.push(btn(fr[j], "!biz --franchmenu "+encodeArg(fr[j]), 'sec'));
     }
   } else {
     lines.push('<em>no franchises</em>');
   }
 
   lines.push('<hr>');
   lines.push(
diff --git a/V1.6.0 b/V1.6.0
index dd059948c3b79a3af31d68675b88a8d96ab955aa..c6a8edfa48d838eef5df12fbf34778440cb17d25 100644
--- a/V1.6.0
+++ b/V1.6.0
@@ -1865,58 +1970,60 @@ function showBusinessMenu(who, raw) {
   ensureSuppliers(biz);
   var header = 'üíº <b>'+_.escape(name)+'</b> ‚Äî '+_.escape(biz.type)+' ‚Äî '+(SIZE[biz.size]||SIZE.small).label;
   var status = 'Cash: '+currStr(biz.cash)+' ‚Äî Rep: '+(biz.reputation||0).toFixed(1)+(biz.type==='Courier Service'?' ‚Äî Trust: '+((biz.trust||50)|0):'');
 
   var lines = [header, status, '<hr><b>Operations</b>'];
   lines.push(
     btn('Add Income', "!biz --addincome "+enc+" '?{Source}' '?{Amount GP}'", 'pri')+' '+
     btn('Add Expense', "!biz --addexpense "+enc+" '?{What}' '?{Frequency|Daily|Weekly|Monthly|Yearly}' '?{Amount GP}'", 'sec')+' '+
     btn('View Ledger', "!biz --viewledger "+enc, 'info')+' '+
     btn('Weekly Report', "!biz --report "+enc, 'info')
   );
 
   lines.push('<hr><b>Staff</b>');
   lines.push(
     btn('Add Staff', "!biz --addstaff "+enc+" '?{Name}' '?{Role}' '?{Weekly Wage (gp)|1}'", 'pri')+' '+
     btn('Train Staff', "!biz --trainstaff "+enc+" '?{Name}' '?{Skill Œî (e.g. 0.1)|0.1}'", 'sec')+' '+
     btn('Remove Staff', "!biz --removestaff "+enc+" '?{Name}'", 'danger')+' '+
     btn('View Staff', "!biz --viewstaff "+enc, 'sec')
   );
 
   lines.push('<hr><b>Stock</b>');
   var prodKeys = Object.keys(biz.stock||{});
   lines.push(
     btn('View Stock', "!biz --viewstock "+enc, 'sec')+' '+
     (prodKeys.length ? btn('Buy Stock', "!biz --buystock "+enc+" '?{Product|"+prodKeys.join('|')+"}' '?{Units (base units)|0}' '?{Containers|0}'", 'pri') : '<em>no products yet</em>')+' '+
+    btn('Buy Drinks', "!biz --buydrinks "+enc+" '?{Tag|mead|ale|wine|whiskey|rum|cider}' '?{Containers|1}' '?{Extra units|0}'", 'pri')+' '+
     btn('Add Product', "!biz --addproduct "+enc+" '?{Key (no spaces)}' '?{Label}' '?{Base Unit|unit}' '?{Container Unit|crate}' '?{Units per Container|10}' '?{Perishability|weekly|monthly|yearly|indefinite}' '?{Purchase Cost per Base Unit (gp)|0.1}' '?{Sale Price per Base Unit (gp)|0.2}' '?{Standing Order Units per Cycle|50}' '?{Initial Units|50}'", 'pri')
   );
 
   if (biz.type==='Tavern' || biz.type==='Inn' || biz.type==='Restaurant' || biz.type==='Caf√©' || biz.type==='Courier Service'){
     lines.push('<hr><b>Menu</b>');
     lines.push(
       btn('View Menu', "!biz --viewmenu "+enc, 'sec')+' '+
       btn('Add Menu Item', "!biz --addmenu "+enc+" '?{Key}' '?{Label}' '?{Price gp}' '?{Share (0..1)|0.2}' '?{Recipe CSV stockKey:units|oats:0.2,milk:0.15}'", 'pri')+' '+
+      btn('Add Food Item (guided)', "!biz --addfood "+enc+" '?{Name}' '?{Price gp|0.5}' '?{Ingredient 1 (stockKey:units)|flour:0.2}' '?{Ingredient 2|}' '?{Ingredient 3|}' '?{Ingredient 4|}' '?{Ingredient 5|}' '?{Ingredient 6|}'", 'pri')+' '+
       btn('Set Pricing', "!biz --setpricing "+enc+" '?{menu or stock|menu|stock}' '?{Key}' '?{Mode|fixed|target|smart}' '?{Target Margin (0..1, if target)|0.5}'", 'info')
     );
   }
 
   var t = TYPE_INCOME[biz.type];
   if (t && t.rooms){
     var roomNames = (biz.rooms||[]).map(function(r){return r.name;}).join('|') || 'Room #1';
     lines.push('<hr><b>Rooms</b>');
     lines.push(
       btn('Set Rooms', "!biz --setrooms "+enc+" '?{Rooms|10}' '?{Rate gp/day|0.5}' '?{Upkeep gp/day|0.1}'", 'pri')+' '+
       btn('Book Room', "!biz --bookroom "+enc+" '?{Room|"+roomNames+"}' '?{Nights|1}'", 'sec')+' '+
       btn('View Rooms', "!biz --viewrooms "+enc, 'info')
     );
   }
 
   lines.push('<hr><b>Suppliers & Market</b>');
   lines.push(
     btn('View Market', "!biz --market", 'sec')+' '+
     btn('Buy SKU ‚Üí Stock', "!biz --buysku "+enc+" '?{Stock Key|"+(prodKeys.join('|')||'stockKey')+"}' '?{SKU Id}' '?{Units|1}'", 'pri')+' '+
     btn('Set Supplier', "!biz --setsupplier "+enc+" '?{Stock Key|"+(prodKeys.join('|')||'stockKey')+"}' '?{Name|Common Consortium}' '?{Reliability (0..1)|0.92}' '?{Lead Days|2}' '?{Discount (0..1)|0}'", 'info')
   );
 
   if (biz.type==='Courier Service'){
     lines.push('<hr><b>Courier Policy</b>');
     lines.push(
diff --git a/V1.6.0 b/V1.6.0
index dd059948c3b79a3af31d68675b88a8d96ab955aa..c6a8edfa48d838eef5df12fbf34778440cb17d25 100644
--- a/V1.6.0
+++ b/V1.6.0
@@ -1981,55 +2088,79 @@ function showMarket(who){
     lines.push('‚Ä¢ <b>'+_.escape(tag)+'</b> ‚Äî best '+best.priceGP.toFixed(3)+'gp/'+_.escape(best.unit)+' '+(best.offerPct?('(offer '+best.offerPct+'%)'):'')+
       ' '+btn('Buy', "!biz --marketbuytag " +
         '"?{Business|'+pickBiz+'}" '+
         '"?{Stock Key in that business (must match a linked marketTag)|'+tag+'}" '+
         '"'+tag+'" '+
         '"?{How many containers (0 for none)|0}" '+
         '"?{Extra base units (adds to containers)|0}"'
         ,'pri'));
   }
   sayPanel(who,'Market', lines);
 }
 
 function showMarketSpecials(who){
   var M=state.BIZ.market, id, cur, sku, lines=['üè∑Ô∏è <b>Market Specials</b>'];
   for (id in M.current){
     cur=M.current[id]; sku=M.skus[id];
     if (cur && cur.offerPct) lines.push('‚Ä¢ '+id+': '+sku.name+' ‚Äî '+cur.offerPct+'% this month');
   }
   if (lines.length===1) lines.push('<em>No current specials.</em>');
   sayPanel(who,'Market Specials',lines);
 }
 
 /* =================
    CHAT COMMANDS
    ================= */
+
+// Automatically wrap key functions with entry/exit logging for deeper insight
+var BIZ_FUNCTIONS_TO_LOG = ['startBuyFlow','startBuyFlowFromTag','confirmBuyFlow','execBuyFlow','monthlyMarketUpdate','showMainMenu'];
+(function(){
+  var root = (function(){ return this; }).call(null);
+  BIZ_FUNCTIONS_TO_LOG.forEach(function(name){
+    var fn = root[name];
+    if (typeof fn === 'function'){
+      root[name] = function(){
+        bizLog('Enter '+name, { args: Array.prototype.slice.call(arguments) });
+        var result;
+        try {
+          result = fn.apply(this, arguments);
+          return result;
+        } finally {
+          bizLog('Exit '+name, { result: result });
+        }
+      };
+    }
+  });
+})();
+
 on('chat:message', function(msg){
+  bizLog('Chat message received', { who: msg.who, content: msg.content, type: msg.type });
   if (msg.type !== 'api' || msg.content.indexOf('!biz')!==0) return;
   var who = msg.who.replace(/ \(GM\)$/, '');
   var parts = msg.content.match(/(?:[^\s"]+|"[^"]*")+/g) || [];
   var cmd   = parts[1];
+  bizLog('Processing command', { who: who, cmd: cmd, parts: parts });
 
   switch(cmd){
 
     case 'start':
     case '--start':
       return showMainMenu(who);
 	  
 	  case '--buyflow':
   return startBuyFlow(who, parts[2]);
 case '--buyflowtag':
   return startBuyFlowFromTag(who, parts[2]);
 case '--buyconfirm':
   return confirmBuyFlow(who, parts[2], parts[3], parts[4], parts[5]);
 case '--buyexec':
   return execBuyFlow(who, parts[2], parts[3], parts[4], parts[5]);
 
 
     case '--date': {
       var d = state.BIZ.date;
       return sayPanel(who, 'BizTracker ‚Äî Date', ['üìÖ '+_.escape(dateStr(d))+' ‚Äî Tenday '+d.weekday+'/10']);
     }
 
     case '--setdate': {
       var mon = stripQuotes(parts[2]);
       var day = parseInt(stripQuotes(parts[3])||'1',10);
diff --git a/V1.6.0 b/V1.6.0
index dd059948c3b79a3af31d68675b88a8d96ab955aa..c6a8edfa48d838eef5df12fbf34778440cb17d25 100644
--- a/V1.6.0
+++ b/V1.6.0
@@ -2088,97 +2219,108 @@ case '--buyexec':
 
       var earr = TYPE_AUTO_EXPENSES[type] || TYPE_AUTO_EXPENSES['default'];
       for (var j=0;j<earr.length;j++){
         var e = earr[j];
         state.BIZ.businesses[name].expenses.push({
           what:e.what, frequency:e.frequency, amount:{ gp: +(e.baseGp*0.9).toFixed(2) }, nextDue: cloneDate(state.BIZ.date)
         });
       }
       if (TYPE_INCOME[type] && TYPE_INCOME[type].rooms) {
         if (rooms>0){
           for (var r=1;r<=rooms;r++){
             state.BIZ.businesses[name].rooms.push({ name:'Room #'+r, rateGp:0.50, upkeepGp:0.10, occupiedUntil:null });
           }
         } else {
           whisper(who, panel('Inn Rooms',
             ['‚ÑπÔ∏è Inn "'+_.escape(name)+'" created without rooms.',
              btn('Create Rooms Now', "!biz --setrooms "+encodeArg(name)+" '?{Rooms|10}' '?{Rate gp/day|0.5}' '?{Upkeep gp/day|0.1}'", 'pri')
             ]));
         }
       }
       logOpenBusiness(name, type, (SIZE['tiny'].label), state.BIZ.date, rooms>0?rooms:null);
       whisper(who, panel('Business Added', ['‚úÖ "'+_.escape(name)+'" ('+_.escape(type)+') created.']));
       return showMainMenu(who);
     }
 
+    case '--quickadd': {
+      var nm = stripQuotes(parts[2]);
+      var tp = stripQuotes(parts[3]||'');
+      var rm = parseInt(stripQuotes(parts[4]||'0'),10)||0;
+      if (!nm || !tp) return whisper(who, panel('Quick Add',["Usage: "+btn('Add Business (Quick)', "!biz --quickadd '?{Name}' '?{Type|Tavern|Inn|Restaurant|Caf√©|Blacksmith|Apothecary|General Store|Alchemist\\'s Lab|Courier Service|Jeweller|Magic Shop|Scriptorium|Stables|Temple|Theatre}' '?{Rooms (Inn only)|0}'", 'pri')]));
+      if (state.BIZ.businesses[nm]) return whisper(who, panel('Error',['‚ùå Business exists.']));
+      quickAddBusiness(nm,tp,rm);
+      log('info','CMD','--quickadd done',{nm:nm,tp:tp,rm:rm});
+      return showBusinessMenu(who, nm);
+    }
+
     case '--removebusiness': {
       var name2 = stripQuotes(parts[2]);
       if (!state.BIZ.businesses[name2]) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(name2)]));
       delete state.BIZ.businesses[name2];
       whisper(who, panel('Removed', ['‚ùå Removed business "'+_.escape(name2)+'".']));
       return showMainMenu(who);
     }
 
     case '--bizmenu':
       return showBusinessMenu(who, decodeArg(parts[2]));
 
     /* EXPENSE / INCOME */
     case '--addexpense': {
       var bn   = decodeArg(parts[2]);
       var what = stripQuotes(parts[3]);
       var freq = stripQuotes(parts[4]);
       var amt  = parseFloat(stripQuotes(parts[5])||'0')||0;
       var biz  = state.BIZ.businesses[bn];
       if (!biz) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bn)]));
       biz.expenses.push({ what:what, frequency:freq, amount:{gp:amt}, nextDue: cloneDate(state.BIZ.date) });
       appendLedger(bn, '<p>‚Ä¢ Added expense: <strong>'+_.escape(what)+'</strong> ‚Äî '+amt.toFixed(2)+'gp ('+_.escape(freq)+')</p>');
       return showBusinessMenu(who, bn);
     }
 
     case '--addincome': {
       var bn2 = decodeArg(parts[2]);
       var src = stripQuotes(parts[3]);
       var amt = parseFloat(stripQuotes(parts[4])||'0')||0;
       var biz2= state.BIZ.businesses[bn2];
       if (!biz2) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bn2)]));
-      var cp  = Math.floor(amt*1000);
+      var cp  = Math.round(amt*100);
       var total = currencyToCP(biz2.cash) + cp;
       biz2.cash = cpToCurrency(total);
       biz2.ledger.push({ date: cloneDate(state.BIZ.date), source: src, delta: cp });
       appendLedger(bn2, '<p>‚Ä¢ '+_.escape(dateStr(state.BIZ.date))+': Income ‚Äî <strong>'+_.escape(src)+'</strong> +'+gpStr(cp)+'</p>');
       return showBusinessMenu(who, bn2);
     }
 
     case '--viewledger': {
       var bn3  = decodeArg(parts[2]);
       var biz3 = state.BIZ.businesses[bn3];
       if (!biz3) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bn3)]));
       var rows = ['üìî Ledger for <b>'+_.escape(bn3)+'</b> ‚Äî see journal: <em>Ledger ‚Äî '+_.escape(bn3)+'</em>'];
       for (var i=0;i<(biz3.ledger||[]).length;i++){
         var entry = biz3.ledger[i];
         var ds  = dateStr(entry.date);
-        var delta = (entry.delta/1000).toFixed(2)+'gp';
+        var delta = (entry.delta/100).toFixed(2)+'gp';
         var label = entry.tier || entry.source || 'entry';
         var note  = entry.desc ? ' ‚Äî '+entry.desc : '';
         rows.push(_.escape(ds)+' ‚Äî '+_.escape(label)+': '+(entry.delta>0?'+':'')+_.escape(delta)+_.escape(note));
       }
       rows.push('<hr>'+btn('Back', "!biz --bizmenu "+encodeArg(bn3), 'muted'));
       sayPanel(who, 'BizTracker ‚Äî Ledger', rows);
       return;
     }
 
     /* STAFF */
     case '--addstaff': {
       var bns = decodeArg(parts[2]);
       var nm  = stripQuotes(parts[3]);
       var role= stripQuotes(parts[4]);
       var wage= parseFloat(stripQuotes(parts[5])||'1')||1;
       var bz  = state.BIZ.businesses[bns];
       if (!bz) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bns)]));
       bz.staff.push({ name:nm, role:role, wageGp:wage, skill:1.0 });
       bz.expenses.push({ what:'Wages: '+nm+' ('+role+')', frequency:'Weekly', amount:{gp:wage}, nextDue: cloneDate(state.BIZ.date) });
       recomputeSize(bz);
       appendLedger(bns, '<p>‚Ä¢ Staff hired: <strong>'+_.escape(nm)+'</strong> ‚Äî '+_.escape(role)+' ('+wage.toFixed(2)+'gp/week)</p>');
       return showBusinessMenu(who, bns);
     }
 
     case '--trainstaff': {
diff --git a/V1.6.0 b/V1.6.0
index dd059948c3b79a3af31d68675b88a8d96ab955aa..c6a8edfa48d838eef5df12fbf34778440cb17d25 100644
--- a/V1.6.0
+++ b/V1.6.0
@@ -2203,232 +2345,282 @@ case '--buyexec':
       bz2.staff = (bz2.staff||[]).filter(function(s){ return s.name!==nm2; });
       bz2.expenses = (bz2.expenses||[]).filter(function(e){ return !( (e.what||'').indexOf('Wages: '+nm2+' ')===0 ); });
       recomputeSize(bz2);
       appendLedger(bnr, '<p>‚Ä¢ Staff departed: <strong>'+_.escape(nm2)+'</strong></p>');
       return showBusinessMenu(who, bnr);
     }
 
     case '--viewstaff': {
       var bnv = decodeArg(parts[2]);
       var bz3 = state.BIZ.businesses[bnv];
       if (!bz3) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bnv)]));
       var lines2 = ['üë• <b>Staff for '+_.escape(bnv)+'</b>'];
       if (!bz3.staff || !bz3.staff.length) lines2.push('<em>No staff.</em>');
       else for (var i=0;i<bz3.staff.length;i++){
         var s = bz3.staff[i];
         lines2.push('‚Ä¢ '+_.escape(s.name)+' ‚Äî '+_.escape(s.role)+' ‚Äî '+s.wageGp.toFixed(2)+'gp/week ‚Äî skill '+(s.skill||1).toFixed(2));
       }
       lines2.push('<hr>'+btn('Back', "!biz --bizmenu "+encodeArg(bnv), 'muted'));
       sayPanel(who, 'BizTracker ‚Äî Staff', lines2);
       return;
     }
 
     /* STOCK VIEW/BUY/ADD */
     case '--viewstock': {
       var bnx = decodeArg(parts[2]);
-      var bz4 = state.BIZ.businesses[bnx];
-      if (!bz4) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bnx)]));
-      var lines3 = ['üì¶ <b>Stock for '+_.escape(bnx)+'</b>'];
-      var keys = Object.keys(bz4.stock||{});
-      if (!keys.length) lines3.push('<em>No tracked stock for this business.</em>');
-      else for (var i=0;i<keys.length;i++){
-        var have = [];
-		for (var i=0;i<keys.length;i++){
-		var k = keys[i], s = bz4.stock[k];
-		if ((s.qtyUnits||0) > 0) have.push([k,s]);
-	}
-	if (!have.length) lines3.push('<em>No stock on hand.</em>');
-	for (var h=0; h<have.length; h++){
-		var s = have[h][1];
-		var containers = s.unitsPerContainer>0 ? Math.floor((s.qtyUnits||0)/s.unitsPerContainer) : 0;
-		var rem = s.unitsPerContainer>0 ? ((s.qtyUnits||0)%s.unitsPerContainer) : (s.qtyUnits||0);
-		lines3.push(
-			'‚Ä¢ <b>'+_.escape(s.label)+'</b>: '+(s.qtyUnits||0)+' '+_.escape(s.baseUnit)+' ('+containers+' '+_.escape(s.containerUnit)+' + '+rem+')'
-			+ ' ‚Äî sell@'+(s.salePricePerUnit||0).toFixed(2)+'gp'
-		);
-	}
-
-      lines3.push('<hr>'+btn('Back', "!biz --bizmenu "+encodeArg(bnx), 'muted'));
-      sayPanel(who, 'BizTracker ‚Äî Stock', lines3);
+      var biz = state.BIZ.businesses[bnx];
+      if (!biz) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bnx)]));
+      var lines = ['üì¶ <b>Stock for '+_.escape(bnx)+'</b>'];
+      var keys = Object.keys(biz.stock||{});
+      if (!keys.length){
+        lines.push('<em>No tracked stock for this business.</em>');
+      } else {
+        var shown = 0;
+        for (var i=0;i<keys.length;i++){
+          var s = biz.stock[keys[i]];
+          var qty = s.qtyUnits||0;
+          var unit = _.escape(s.baseUnit||'unit');
+          var cu = s.unitsPerContainer||0;
+          var cont = cu>0 ? Math.floor(qty/cu) : 0;
+          var rem  = cu>0 ? (qty%cu) : qty;
+          lines.push('‚Ä¢ <b>'+_.escape(s.label)+'</b>: '+qty+' '+unit+' ('+cont+' '+_.escape(s.containerUnit||'container')+' + '+rem+') ‚Äî sell@'+(s.salePricePerUnit||0).toFixed(2)+'gp');
+          shown++;
+        }
+        if (!shown) lines.push('<em>No stock on hand.</em>');
+      }
+      lines.push('<hr>'+btn('Back', "!biz --bizmenu "+encodeArg(bnx), 'muted'));
+      sayPanel(who, 'BizTracker ‚Äî Stock', lines);
+      log('info','UI','viewstock',{bnx:bnx, count: keys.length});
       return;
     }
 
+    case '--buydrinks': {
+      var bn = decodeArg(parts[2]);
+      var tag = stripQuotes(parts[3]);
+      var cont = Math.max(0, parseInt(stripQuotes(parts[4])||'1',10));
+      var units= Math.max(0, parseInt(stripQuotes(parts[5])||'0',10));
+      var biz = state.BIZ.businesses[bn]; if (!biz) return whisper(who, panel('Error',['‚ùå No such business.']));
+      var key = null, it=null;
+      Object.keys(biz.stock||{}).some(function(k){
+        var s=biz.stock[k];
+        if (s.linkedToMarket && (s.marketTag===tag)){ key=k; it=s; return true; }
+        return false;
+      });
+      if (!key) return whisper(who, panel('Error',['‚ùå No stock item linked to '+_.escape(tag)+' in this business.']));
+      var total = cont*(it.unitsPerContainer||0)+units;
+      if (total<=0) return whisper(who, panel('Error',['‚ùå Quantity must be > 0.']));
+      log('info','BUY','--buydrinks quote',{bn:bn, tag:tag, key:key, total:total});
+      return handleMarketBuyTagQuote(who, bn, key, tag, cont, units);
+    }
     case '--buystock': {
       var bnB = decodeArg(parts[2]);
       var prod = stripQuotes(parts[3]);
       var units = parseInt(stripQuotes(parts[4])||'0',10) || 0;
       var conts = parseInt(stripQuotes(parts[5])||'0',10) || 0;
       var bizB = state.BIZ.businesses[bnB];
       if (!bizB) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bnB)]));
       var s = bizB.stock && bizB.stock[prod];
       if (!s) return whisper(who, panel('Error', ['‚ùå No such product key: '+_.escape(prod)]));
       var totalUnits = units + conts * (s.unitsPerContainer||0);
       if (totalUnits<=0) return whisper(who, panel('Error', ['‚ùå Quantity must be > 0.']));
       // market link?
       var unitCost = s.purchaseCostPerUnit||0.1;
       if (s.linkedToMarket && s.marketTag){
         var best = marketBestPrice(s.marketTag);
         if (best) unitCost = best.priceGP;
       }
       // franchise discount
       var disc = franchiseDiscountFor(bnB);
       unitCost *= (1 - disc);
       var costGp = totalUnits * unitCost;
-      var costCP = Math.floor(costGp*1000);
+      var costCP = Math.round(costGp*100);
       var newTotal = currencyToCP(bizB.cash) - costCP;
       bizB.cash = cpToCurrency(newTotal);
       addLot(s, totalUnits, state.BIZ.date, (s.linkedToMarket? (best?best.id:null):null));
       appendLedger(bnB, '<p>‚Ä¢ Purchased '+totalUnits+' '+_.escape(s.baseUnit)+' of '+_.escape(s.label)+' ‚Äî ‚àí'+gpStr(costCP)+ (disc?(' (franchise ‚àí'+Math.round(disc*100)+'%)'):'') +'</p>');
       return showBusinessMenu(who, bnB);
     }
 
     case '--addproduct': {
       var bnP = decodeArg(parts[2]);
       var key = stripQuotes(parts[3]);
       var label= stripQuotes(parts[4]);
       var baseU= stripQuotes(parts[5]);
       var contU= stripQuotes(parts[6]);
       var upc  = parseInt(stripQuotes(parts[7])||'1',10) || 1;
       var per  = stripQuotes(parts[8]).toLowerCase();
       var buy  = parseFloat(stripQuotes(parts[9])||'0.1')||0.1;
       var sell = parseFloat(stripQuotes(parts[10])||'0.2')||0.2;
       var stand= parseInt(stripQuotes(parts[11])||'50',10)||50;
       var init = parseInt(stripQuotes(parts[12])||'50',10)||50;
       var bizP = state.BIZ.businesses[bnP];
       if (!bizP) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bnP)]));
       if (!bizP.stock) bizP.stock = {};
       bizP.stock[key] = {
         label:label, baseUnit:baseU, containerUnit:contU, unitsPerContainer:upc,
         perishability: per, purchaseCostPerUnit:buy, salePricePerUnit:sell,
         baseStandingOrderUnits: stand, standingOrderUnits: stand,
         marketTag:null, linkedToMarket:false,
         qtyUnits: 0, lots: [], nextRestock: perishDays(per) ? addDaysHarptos(state.BIZ.date, perishDays(per)) : null,
         pricingMode:'fixed', targetMargin:0.5, tags:[]
       };
       addLot(bizP.stock[key], init, state.BIZ.date, null);
       appendLedger(bnP, '<p>‚Ä¢ Product added: <strong>'+_.escape(label)+'</strong> ('+init+' '+_.escape(baseU)+') ‚Äî standing '+stand+'/'+per+'</p>');
       return showBusinessMenu(who, bnP);
     }
 
     case '--buysku': {
       var bnS = decodeArg(parts[2]);
       var stockKey = stripQuotes(parts[3]);
       var skuId = stripQuotes(parts[4]);
       var units = Math.max(1, parseInt(stripQuotes(parts[5])||'1',10));
       var bizS = state.BIZ.businesses[bnS];
       if (!bizS) return whisper(who, panel('Error', ['‚ùå No such business.']));
       var it = bizS.stock[stockKey];
       if (!it) return whisper(who, panel('Error', ['‚ùå No such stock key: '+_.escape(stockKey)]));
       var price = marketPriceBySKU(skuId);
       if (!price) return whisper(who, panel('Error', ['‚ùå Unknown or unavailable SKU.']));
       var disc = franchiseDiscountFor(bnS);
-      var costCP = Math.floor(units * price * (1-disc) * 1000);
+      var costCP = Math.round(units * price * (1-disc) * 100);
       bizS.cash = cpToCurrency(currencyToCP(bizS.cash) - costCP);
       addLot(it, units, state.BIZ.date, skuId);
       appendLedger(bnS, '<p>‚Ä¢ Market purchase: '+units+' '+_.escape(it.baseUnit)+' of '+_.escape(it.label)+' ‚Äî ‚àí'+gpStr(costCP)+ (disc?(' (franchise ‚àí'+Math.round(disc*100)+'%)'):'') +'</p>');
       return showBusinessMenu(who, bnS);
     }
 	    /* BUY BY TAG ‚Äî no SKU needed: quote -> confirm */
     case '--marketbuytag': {
       var bnT   = decodeArg(parts[2]);            // business name
       var sKey  = stripQuotes(parts[3]);          // stock key in that business
       var tag   = stripQuotes(parts[4]);          // market tag
       var nCont = Math.max(0, parseInt(stripQuotes(parts[5])||'0',10));
       var nUnit = Math.max(0, parseInt(stripQuotes(parts[6])||'0',10));
       var biz   = state.BIZ.businesses[bnT];
       if (!biz) return whisper(who, panel('Error',['‚ùå No such business.']));
       var it    = biz.stock[sKey];
       if (!it)  return whisper(who, panel('Error',['‚ùå No such stock key: '+_.escape(sKey)]));
       if (!it.linkedToMarket || !it.marketTag){
         return whisper(who, panel('Error',['‚ùå This stock item is not linked to the market. Set a marketTag on it.']));
       }
       // compute total base units from containers + extra units
       var totalUnits = (nCont*(it.unitsPerContainer||0)) + nUnit;
       if (totalUnits<=0) return whisper(who, panel('Error',['‚ùå Quantity must be > 0.']));
 
       var offer = marketBestOffer(tag);
       if (!offer) return whisper(who, panel('Market',['‚ùå No available offers for '+_.escape(tag)+' right now.']));
       // discounts
       var unitCost = offer.priceGP;
       var sup = (it.preferredSupplier && biz.suppliers && biz.suppliers[it.preferredSupplier]) ? biz.suppliers[it.preferredSupplier] : null;
       var supDisc = sup ? (sup.discount||0) : 0;
       var frDisc  = franchiseDiscountFor(bnT);
       unitCost *= (1 - supDisc) * (1 - frDisc);
 
-      var costCP = Math.floor(totalUnits * unitCost * 1000);
+      var costCP = Math.round(totalUnits * unitCost * 100);
       var willDebt = currencyToCP(biz.cash) < costCP;
 
       var confirmCmd = "!biz --marketconfirm "+encodeArg(bnT)+" "+encodeArg(sKey)+" "+encodeArg(tag)+" "+totalUnits+" "+offer.id+" "+offer.priceGP;
       var cancelCmd  = "!biz --bizmenu "+encodeArg(bnT);
 
       var lines = [
         'üßæ <b>Purchase Quote</b>',
         'Item: '+_.escape(it.label)+' ('+_.escape(tag)+')',
         'Qty: '+totalUnits+' '+_.escape(it.baseUnit)+' ('+nCont+' '+_.escape(it.containerUnit||'container')+' + '+nUnit+')',
         'Unit price (after discounts): '+(unitCost).toFixed(3)+'gp',
         'Total: <b>'+gpStr(costCP)+'</b>'+(willDebt?' ‚Äî ‚ö†Ô∏è will result in debt':''),
         btn('Confirm (Yes)', confirmCmd, 'pri')+' '+btn('Cancel (No)', cancelCmd, 'muted')
       ];
       sayPanel(who,'Confirm Purchase', lines);
       return;
     }
 
     case '--marketconfirm': {
       var bnC   = decodeArg(parts[2]);
       var sKeyC = decodeArg(parts[3]);
       var tagC  = decodeArg(parts[4]);
       var totalUnits = Math.max(1, parseInt(decodeArg(parts[5])||'1',10));
       var skuId = decodeArg(parts[6]); // best offer id (for trace)
       var rawUnit = parseFloat(decodeArg(parts[7])||'0')||0; // pre-discount; we‚Äôll re-eval for ledger clarity
 
       var bizC = state.BIZ.businesses[bnC];
       if (!bizC) return;
       var itC  = bizC.stock[sKeyC]; if (!itC) return;
 
       var offer2 = marketBestOffer(tagC);
       if (!offer2) return whisper(who, panel('Error',['‚ùå Offer no longer available. Try again.']));
       var unitCost = offer2.priceGP;
       var sup = (itC.preferredSupplier && bizC.suppliers && bizC.suppliers[itC.preferredSupplier]) ? bizC.suppliers[itC.preferredSupplier] : null;
       var supDisc = sup ? (sup.discount||0) : 0;
       var frDisc  = franchiseDiscountFor(bnC);
       unitCost *= (1 - supDisc) * (1 - frDisc);
 
-      var costCP = Math.floor(totalUnits * unitCost * 1000);
+      var costCP = Math.round(totalUnits * unitCost * 100);
       bizC.cash = cpToCurrency( currencyToCP(bizC.cash) - costCP );
       addLot(itC, totalUnits, state.BIZ.date, offer2.id);
       appendLedger(bnC, '<p>‚Ä¢ Market purchase: '+totalUnits+' '+_.escape(itC.baseUnit)+' of '+_.escape(itC.label)+' @ '+unitCost.toFixed(3)+'gp ‚Äî ‚àí'+gpStr(costCP)+'</p>');
       return showBusinessMenu(who, bnC);
     }
 
     /* MENU EDIT */
     case '--viewmenu': {
       var bnm = decodeArg(parts[2]);
       var bizm= state.BIZ.businesses[bnm];
       if (!bizm) return whisper(who, panel('Error', ['‚ùå No such business.']));
       sayPanel(who, 'Menu ‚Äî '+bnm, menuLines(bizm).concat(['<hr>'+btn('Back', "!biz --bizmenu "+encodeArg(bnm), 'muted')]));
       return;
     }
+    case '--addfood': {
+      var bn = decodeArg(parts[2]);
+      var biz = state.BIZ.businesses[bn]; if (!biz) return whisper(who, panel('Error',['‚ùå No such business.']));
+      var name = stripQuotes(parts[3]);
+      var price= parseFloat(stripQuotes(parts[4])||'0.5')||0.5;
+      var ing = [];
+      for (var i=5;i<11;i++){
+        var seg = stripQuotes(parts[i]||'').trim();
+        if (!seg) continue;
+        var p = seg.split(':');
+        ing.push({ key:p[0].trim(), units: parseFloat((p[1]||'1'))||1 });
+        if (ing.length>=6) break;
+      }
+      ing.forEach(function(r){
+        if (!biz.stock[r.key]){
+          biz.stock[r.key] = {
+            label:r.key, baseUnit:'unit', containerUnit:'crate', unitsPerContainer:10,
+            perishability:'monthly', purchaseCostPerUnit:0.05, salePricePerUnit:0,
+            baseStandingOrderUnits:10, standingOrderUnits:10, marketTag:null, linkedToMarket:false,
+            qtyUnits:0, lots:[], nextRestock: addDaysHarptos(state.BIZ.date, 30),
+            pricingMode:'fixed', targetMargin:0.5, tags:[]
+          };
+          log('info','MENU','auto-created stock for ingredient',{bn:bn, key:r.key});
+        }
+      });
+      biz.menu = biz.menu||{}; biz.menuSections=biz.menuSections||{drinks:{},food:{},services:{}};
+      var key = name.toLowerCase().replace(/\s+/g,'_').replace(/[^a-z0-9_]/g,'');
+      biz.menu[key] = { label:name, priceGp:price, share:0.2, tags:['food'], recipe:ing, pricingMode:'smart', targetMargin:0.6, analytics:[] };
+      biz.menuSections.food[key] = biz.menu[key];
+      appendLedger(bn, '<p>‚Ä¢ Menu item added: <strong>'+_.escape(name)+'</strong> @ '+price.toFixed(2)+'gp</p>');
+      log('info','MENU','addfood',{bn:bn, key:key, price:price, ing:ing});
+      return showBusinessMenu(who, bn);
+    }
     case '--addmenu': {
       var bnA = decodeArg(parts[2]);
       var key = stripQuotes(parts[3]);
       var label= stripQuotes(parts[4]);
       var price= parseFloat(stripQuotes(parts[5])||'0.2')||0.2;
       var share= parseFloat(stripQuotes(parts[6])||'0.2')||0.2;
       var csv  = stripQuotes(parts[7]||'');
       var bizA = state.BIZ.businesses[bnA];
       if (!bizA) return whisper(who, panel('Error', ['‚ùå No such business.']));
       bizA.menu = bizA.menu || {};
       var rec = csv.split(',').map(function(seg){ seg=seg.trim(); if (!seg) return null; var p=seg.split(':'); return { key:p[0].trim(), units: parseFloat((p[1]||'1'))||1 }; }).filter(function(x){return !!x;});
       bizA.menu[key] = { label:label, priceGp:price, share:share, recipe:rec, tags:[], pricingMode:'fixed', targetMargin:0.5, analytics:[] };
       appendLedger(bnA, '<p>‚Ä¢ Menu item added: <strong>'+_.escape(label)+'</strong> @ '+price.toFixed(2)+'gp</p>');
       return showBusinessMenu(who, bnA);
     }
     case '--setpricing': {
       var bnP2 = decodeArg(parts[2]);
       var scope= stripQuotes(parts[3]); // 'menu' or 'stock'
       var key  = stripQuotes(parts[4]);
       var mode = stripQuotes(parts[5]); // fixed|target|smart
       var targ = parseFloat(stripQuotes(parts[6])||'0.5')||0.5;
       var bizSP= state.BIZ.businesses[bnP2];
       if (!bizSP) return whisper(who, panel('Error',['‚ùå No such business.']));
       if (scope==='menu' && bizSP.menu && bizSP.menu[key]){
         bizSP.menu[key].pricingMode=mode; bizSP.menu[key].targetMargin=targ;
diff --git a/V1.6.0 b/V1.6.0
index dd059948c3b79a3af31d68675b88a8d96ab955aa..c6a8edfa48d838eef5df12fbf34778440cb17d25 100644
--- a/V1.6.0
+++ b/V1.6.0
@@ -2595,226 +2787,226 @@ case '--buyexec':
       whisper(who, panel('Export',['üì§ Wrote current state to handout: <b>BizTracker Export</b>']));
       return;
     }
 
     /* ADVANCE / REWIND */
     case '--advday': {
       var prevDate = cloneDate(state.BIZ.date);
       advanceHarptos();
       var today = state.BIZ.date;
       var evt = pickDailyEvent(today);
       var impacts = {};
 
       _.each(state.BIZ.businesses, function(biz, name){
         recomputeSize(biz);
         ensureSuppliers(biz);
         var sizeCfg = SIZE[biz.size] || SIZE.small;
         var typeCfg = TYPE_INCOME[biz.type] || TYPE_INCOME['default'];
 
         // 1) Expenses due today
         var paidToday = [];
         var expenseCP = 0;
         (biz.expenses||[]).forEach(function(e){
           var due = e.nextDue;
           var match = (due && due.year===today.year && due.month===today.month && due.day===today.day && ((due.festival||null)===(today.festival||null)));
           if (match){
-            var cp = Math.floor((e.amount.gp||0)*1000);
+            var cp = Math.round((e.amount.gp||0)*100);
             expenseCP += cp;
             paidToday.push({ what:e.what, freq:e.frequency, cp:cp });
             var step = e.frequency==='Daily' ? 1 : e.frequency==='Weekly' ? 10 : e.frequency==='Monthly' ? 30 : 365;
             e.nextDue = addDaysHarptos(due, step);
           }
         });
 
         // 2) Base income (variance + size + reputation + staff skill + courier trust)
         var varPct  = (typeCfg && typeof typeCfg.var==='number') ? typeCfg.var : 0.30;
         var variance= 1 + (Math.random()*2 - 1) * varPct;
         var rep     = clamp((biz.reputation||0), -50, 100);
         var repMult = 1 + (rep/100)*0.5;
         var baseGP  = Math.max(0, (typeCfg?typeCfg.gp:1.0) * variance * (sizeCfg.baseMult||1) * repMult * (avgSkill(biz)||1));
         if (biz.type==='Courier Service'){
           var trust = (typeof biz.trust==='number') ? biz.trust : 50;
           baseGP *= Math.max(0.15, 0.2 + trust/100);
         }
-        var baseCP  = Math.floor(baseGP * 1000);
+        var baseCP  = Math.round(baseGP * 100);
 
         // 3) Capacity gate (skill already blended in base); hard cap still applies
         var staffCount = (biz.staff||[]).length;
         var demand = Math.ceil(baseGP * 4);
         var capacity = (staffCount*2) + (sizeCfg.demandCap||16);
         var capacityNote = '';
         var incomeCPBeforeEvent = baseCP;
         if (demand > capacity){
           var capRatio = capacity / Math.max(1, demand);
           incomeCPBeforeEvent = Math.floor(incomeCPBeforeEvent * capRatio);
           capacityNote = 'Capacity limit: demand '+demand+', capacity '+capacity+' (scaled).';
           biz.reputation = (biz.reputation||0) - 0.2;
         }
 
         // 4) Event spoilage (lots)
         var spoilLines = [];
         if (evt.stockHit && biz.stock){
           Object.keys(biz.stock).forEach(function(k){
             var it = biz.stock[k];
             if (!it || !it.perishability || it.perishability==='indefinite') return;
             var lost = spoilLots(it, evt.stockHit);
             if (lost>0) spoilLines.push(it.label+': ‚àí'+lost+' '+it.baseUnit);
           });
         }
 
         // 5) SELL: allocate income between priced stock & menu items
         var priced = []; // objects {kind:'stock'|'menu', key, priceGp, share, tags, recipe?}
         if (biz.stock){
           Object.keys(biz.stock).forEach(function(k){
             var it = biz.stock[k];
             if (it && it.salePricePerUnit>0){ priced.push({ kind:'stock', key:k, priceGp:it.salePricePerUnit, share:0.2, tags:it.tags||[] }); }
           });
         }
         if (biz.menu){
           Object.keys(biz.menu).forEach(function(k){
             var m = biz.menu[k];
             priced.push({ kind:'menu', key:k, priceGp:m.priceGp, share: m.share||0.2, tags:m.tags||[], recipe:m.recipe||[] });
           });
         }
         if (!priced.length && biz.stock && Object.keys(biz.stock).length){
           // fallback to heuristic
           var keys = Object.keys(biz.stock);
-          var perKeyGP = (incomeCPBeforeEvent/1000) / keys.length;
+          var perKeyGP = (incomeCPBeforeEvent/100) / keys.length;
           keys.forEach(function(k){
             var it = biz.stock[k];
             var unitValue = Math.max((it.purchaseCostPerUnit||0)*1.5, 0.05);
             var unitsDemanded = Math.ceil(perKeyGP / unitValue);
             var used = takeFromLots(it, unitsDemanded);
             var shortfall = Math.max(0, unitsDemanded - used);
             if (shortfall>0){
-              var buyCost = Math.floor(shortfall * (it.purchaseCostPerUnit||unitValue*0.5) * 1.25 * 1000);
+              var buyCost = Math.round(shortfall * (it.purchaseCostPerUnit||unitValue*0.5) * 1.25 * 100);
               expenseCP += buyCost;
               paidToday.push({ what:'Emergency '+it.label, freq:'One-off', cp:buyCost });
               addLot(it, shortfall, today, null); takeFromLots(it, shortfall);
             }
           });
         } else {
           // normalize shares & apply seasons
           var totalShare=0, i;
           for (i=0;i<priced.length;i++){
             priced[i]._season = seasonalMult(today, priced[i].tags||[]);
             totalShare += (priced[i].share||0.2) * (priced[i]._season||1);
           }
-          var per = (incomeCPBeforeEvent/1000);
+          var per = (incomeCPBeforeEvent/100);
           for (i=0;i<priced.length;i++){
             var weight = (priced[i].share||0.2) * (priced[i]._season||1) / Math.max(0.0001,totalShare);
             var gpAlloc = per * weight;
             var unitsDemanded = Math.max(0, Math.ceil(gpAlloc / Math.max(0.01, priced[i].priceGp)));
             if (unitsDemanded<=0) continue;
 
             if (priced[i].kind==='stock'){
               var itS = biz.stock[priced[i].key];
               var usedS = takeFromLots(itS, unitsDemanded);
               var shortS = Math.max(0, unitsDemanded - usedS);
               if (shortS>0){
                 var unitVal = itS.purchaseCostPerUnit||0.05, best;
                 if (itS.linkedToMarket && itS.marketTag){
                   best = marketBestPrice(itS.marketTag);
                   if (best) unitVal = best.priceGP;
                 }
-                var rush = Math.floor(shortS * unitVal * 1.25 * 1000);
+                var rush = Math.round(shortS * unitVal * 1.25 * 100);
                 expenseCP += rush; paidToday.push({ what:'Emergency '+itS.label, freq:'One-off', cp:rush });
                 addLot(itS, shortS, today, (best?best.id:null)); takeFromLots(itS, shortS);
               }
               // dynamic pricing record
               itS.analytics = itS.analytics||[];
               itS.analytics.push({ d:cloneDate(today), demanded:unitsDemanded, sold:unitsDemanded, price:itS.salePricePerUnit });
               if (itS.analytics.length>20) itS.analytics.shift();
 
             } else if (priced[i].kind==='menu'){
               var mI = biz.menu[priced[i].key];
               var res = consumeIngredients(biz, mI.recipe||[], unitsDemanded, paidToday);
               if (!res.ok){ biz.reputation = (biz.reputation||0)-0.5; }
               mI.analytics = mI.analytics||[];
               mI.analytics.push({ d:cloneDate(today), demanded:unitsDemanded, sold:unitsDemanded, price:mI.priceGp });
               if (mI.analytics.length>20) mI.analytics.shift();
             }
           }
         }
 
         // 6) Event multiplier
         var incomeCP = Math.floor(incomeCPBeforeEvent * evt.mult);
 
         // 7) Rooms (inn)
         var roomsRevenueCP = 0, roomsUpkeepCP = 0;
         var tcfgRooms = TYPE_INCOME[biz.type] && TYPE_INCOME[biz.type].rooms;
         if (tcfgRooms){
           (biz.rooms||[]).forEach(function(r){
-            roomsUpkeepCP += Math.floor((r.upkeepGp||0)*1000);
+            roomsUpkeepCP += Math.round((r.upkeepGp||0)*100);
             if (r.occupiedUntil && dateLE(today, r.occupiedUntil)){
-              roomsRevenueCP += Math.floor((r.rateGp||0)*1000);
+              roomsRevenueCP += Math.round((r.rateGp||0)*100);
             }
           });
         }
 
         // 8) STANDING ORDERS (suppliers, market, franchise discount, reliability)
         if (biz.stock){
           Object.keys(biz.stock).forEach(function(k){
             var it = biz.stock[k];
             var cycle = perishDays(it.perishability);
             if (!cycle || !it.nextRestock) return;
             if (it.nextRestock.year===today.year && it.nextRestock.month===today.month && it.nextRestock.day===today.day && ((it.nextRestock.festival||null)===(today.festival||null))){
               var scale = standingScale(biz);
               var orderUnits = Math.max(0, Math.round((it.standingOrderUnits||0) * scale));
               if (orderUnits>0){
                 var unitCost = it.purchaseCostPerUnit||0.05, supplier = it.preferredSupplier && biz.suppliers[it.preferredSupplier] ? biz.suppliers[it.preferredSupplier] : null;
                 var reliable = supplier ? (Math.random()<supplier.reliability) : true;
                 if (it.linkedToMarket && it.marketTag){
                   var best = marketBestPrice(it.marketTag);
                   if (best) unitCost = best.priceGP;
                 }
                 // discounts
                 var supDisc = supplier ? supplier.discount||0 : 0;
                 var frDisc  = franchiseDiscountFor(name);
                 unitCost *= (1 - supDisc) * (1 - frDisc);
                 if (reliable){
-                  var orderCost = Math.floor(orderUnits * unitCost * 1000);
+                  var orderCost = Math.round(orderUnits * unitCost * 100);
                   var tot = currencyToCP(biz.cash) - orderCost;
                   biz.cash = cpToCurrency(tot);
                   addLot(it, orderUnits, today, null);
                   paidToday.push({ what:'Standing Order: '+it.label, freq:it.perishability, cp:orderCost });
                 } else {
                   paidToday.push({ what:'Standing Order Failed: '+it.label, freq:'Delay', cp:0 });
                 }
               }
               // next
               var lead = supplier ? supplier.leadDays||0 : 0;
               it.nextRestock = addDaysHarptos(today, cycle + lead);
             }
           });
         }
 
         // 9) Courier incidents (liability)
         if (biz.type==='Courier Service'){
           var risk = 0.04 * (1-(avgSkill(biz)-1)*0.5); // skill reduces
           if (Math.random()<risk){
-            var claimCP = Math.floor( rnd(0.5,1.5) * 1000 );
+            var claimCP = Math.round( rnd(0.5,1.5) * 100 );
             expenseCP += claimCP;
             paidToday.push({ what:'Lost Parcel Claims', freq:'One-off', cp:claimCP });
             biz.trust = clamp((biz.trust||50)-5, 0, 100);
             biz.reputation = (biz.reputation||0) - 1;
           }
           // insurance upsell adds 8% revenue
           if (biz.policy && biz.policy.insurance) incomeCP = Math.floor(incomeCP * 1.08);
         }
 
         // 10) Aging (monthly tick): add a tiny bonus to implied price
         if (today.day===1 && biz.stock){
           Object.keys(biz.stock).forEach(function(k){
             var it = biz.stock[k]; if (!it || !it.lots || !it.lots.length) return;
             for (var L=0;L<it.lots.length;L++){ it.lots[L].ageMonths = (it.lots[L].ageMonths||0)+1; }
             if (it.ageBonusPct){ it.salePricePerUnit = +( (it.salePricePerUnit||0) * (1+it.ageBonusPct) ).toFixed(3); }
           });
         }
 
         // 11) Dynamic pricing (simple sell-through nudges)
         function tunePrice(mode, target, price, series){
           if (mode==='fixed' || !series || !series.length) return price;
           var last = series.slice(-5);
           var dem=0, sold=0, i;
           for (i=0;i<last.length;i++){ dem+=last[i].demanded||0; sold+=last[i].sold||0; }
           var rate = dem? (sold/dem) : 1.0;
