<<<<<<< ours
=======
// BizTracker.js v1.6.0 ‚Äî Roll20 API (ES5-safe)
// ‚Ä¢ Keeps v1.5.0 structure & UI, adds: Seasons, Restaurant & Caf√© menus/recipes,
//   Central Market (brands, age, quality, specials), Suppliers, Lots+Spoilage/Aging,
//   Dynamic pricing, Staff skill throughput, Courier trust & insurance,
//   Franchise bulk discounts, Strategy UI, Weekly report, Export.
// ‚Ä¢ ES5-safe (no let/const/arrow), compact panels & buttons maintained.

/* ======================
   UNIFIED LOGGER
   ====================== */

var LOG_LEVELS = { debug:0, info:1, warn:2, error:3 };
state.BIZ = state.BIZ || {};
state.BIZ.log = state.BIZ.log || { enable:true, minLevel:'debug', history:[] };

function _now(){ return new Date().toISOString(); }
function _lvl(n){ return LOG_LEVELS[n] || 0; }
function log(level, ctx, msg, data){
  try{
    if (!state.BIZ.log || !state.BIZ.log.enable) return;
    if (_lvl(level) < _lvl(state.BIZ.log.minLevel)) return;
    var rec = { t:_now(), level:level, ctx:ctx, msg:String(msg||''), data:(data||null) };
    state.BIZ.log.history.push(rec);
    if (state.BIZ.log.history.length>500) state.BIZ.log.history.shift();
    var prefix = '['+level.toUpperCase()+']['+ctx+'] ';
    if (level==='error') logError(prefix+msg, data);
    else if (level==='warn') logWarn(prefix+msg, data);
    else logInfo(prefix+msg, data);
  }catch(e){ /* never throw */ }
}
function logInfo(m,d){ if (typeof sendChat==='function'){ sendChat('BizTracker', '/w gm '+_.escape(m)); } if (d) try{console.log(m,d);}catch(_){ } }
function logWarn(m,d){ if (typeof sendChat==='function'){ sendChat('BizTracker', '/w gm \u26A0\uFE0F '+_.escape(m)); } if (d) try{console.warn(m,d);}catch(_){ } }
function logError(m,d){ if (typeof sendChat==='function'){ sendChat('BizTracker', '/w gm \u274C '+_.escape(m)); } if (d) try{console.error(m,d);}catch(_){ } }

// legacy wrappers
function bizLog(message, data, ctx){ log('info', ctx||'LEGACY', message, data); }
function bizWarn(message, data, ctx){ log('warn', ctx||'LEGACY', message, data); }
function bizErr(message, data, ctx){ log('error', ctx||'LEGACY', message, data); }

on('ready', function() {
  bizLog('System ready, initializing state if needed');
  if (!state.BIZ) initializeState();
  state.BIZ.calendarEvents = state.BIZ.calendarEvents || [];
  state.BIZ.history        = state.BIZ.history || [];
  state.BIZ.market         = state.BIZ.market || buildInitialMarket();
  state.BIZ.market 		   = ensureMarketShape(state.BIZ.market);
  state.BIZ.version        = state.BIZ.version || '1.6.0';
  bizLog('Ready', { version: state.BIZ.version });
});

/* =================
   STATE & UTIL
   ================= */
function initializeState() {
  bizLog('Initializing state');
  state.BIZ = {
    date:           { year:1358, month:'Hammer', day:1, festival:null, weekday:1 },
    businesses:     {},
    franchises:     {},
    calendarEvents: [],
    history:        [],
    market:         buildInitialMarket(), // central market
    version:        '1.6.0'
  };
  bizLog('State initialized', state.BIZ);
}
function whisper(who, tmpl) {
  // Avoid dumping full HTML into the API log.
  // Flip state.BIZ._debug=true if you want minimal, plain-text logging.
  try {
    if (state.BIZ && state.BIZ._debug) {
      var txt = String(tmpl).replace(/<[^>]+>/g,' ').replace(/\s+/g,' ').slice(0,300);
      bizLog('Whisper debug preview', { to: who, text: txt+(txt.length===300?'‚Ä¶':'') });
    }
  } catch(e) {}
  bizLog('Whispering', { to: who });
  sendChat('BizTracker', '/w "'+who+'" ' + tmpl);
}

function stripQuotes(s){ return (s||'').replace(/^['"]?(.*?)['"]?$/, '$1'); }
function encodeArg(s){
  bizLog('Encoding arg', { input: s });
  return encodeURIComponent(String((s===undefined||s===null)?'':s));
}
function decodeArg(s){
  bizLog('Decoding arg', { input: s });
  try { return decodeURIComponent(stripQuotes(s||'')); }
  catch(e){ bizWarn('Failed to decode arg', { input: s, error: e }); return stripQuotes(s||''); }
}
function gpToCP(gp){ return Math.round((gp||0) * 100); }
function cpToGP(cp){ return Math.round((cp||0)) / 100; }
function gpStr(cp){ return (cpToGP(cp)).toFixed(2)+'gp'; }
function currencyToCP(c){ return gpToCP((c.pp||0)*10 + (c.gp||0) + (c.ep||0)*0.5 + (c.sp||0)*0.1 + (c.cp||0)*0.01); }
function cpToCurrency(cp){
  bizLog('Converting CP to currency', { total: cp });
  var t = Math.round(cp||0);
  var pp = Math.floor(t/1000); t%=1000;
  var gp = Math.floor(t/100);  t%=100;
  var ep = Math.floor(t/50);   t%=50;
  var sp = Math.floor(t/10);   t%=10;
  var out = { pp:pp, gp:gp, ep:ep, sp:sp, cp:t };
  bizLog('Converted CP to currency', out);
  return out;
}
function currStr(c){ return (c.pp||0)+'pp '+(c.gp||0)+'gp '+(c.ep||0)+'ep '+(c.sp||0)+'sp '+(c.cp||0)+'cp'; }
function clamp(n,a,b){ return Math.max(a, Math.min(b, n)); }
function rnd(min,max){ return Math.random()*(max-min)+min; }

/* ================ */
function badge(tone){
  if (tone==='pri') return 'üü©';
  if (tone==='sec') return 'üü¶';
  if (tone==='warn') return 'üü®';
  if (tone==='danger') return 'üü•';
  if (tone==='info') return 'üü™';
  if (tone==='muted') return '‚¨úÔ∏è';
  return '‚ñ™Ô∏è';
}
function btn(label, command, tone){
  // escape only the label; the command must remain raw for Roll20's button link
  return badge(tone)+' ['+_.escape(label)+']('+command+')';
}

function panel(title, lines){
  bizLog('Building panel', { title: title, lines: lines });
  var list = (lines||[]).filter(function(x){ return x!==undefined && x!==null && x!==''; });
  var html = [];
  html.push('<div style="border:1px solid #444;background:#111;padding:8px;border-radius:6px;">');
  html.push('<div style="background:#2b6;color:#fff;padding:4px 8px;border-radius:4px;font-weight:bold;">'+_.escape(title)+'</div>');
  html.push('<div style="margin-top:6px;color:#ddd;line-height:1.45;">'+list.join('<br>')+'</div>');
  html.push('</div>');
  var out = html.join('');
  bizLog('Built panel', { title: title });
  return out;
}

function sayPanel(who, title, lines){
  bizLog('Sending panel', { to: who, title: title });
  whisper(who, panel(title, lines));
}

/* =========================
   BUY FLOW (no SKUs)
   - Presents items linked to market for a chosen business
   - Lets user enter containers + extra base units
   - Shows cost preview with Yes/No -> executes purchase
   ========================= */

function _gp(n){ return (Number(n)||0); }

function gpFromCash(c){
  bizLog('Calculating GP from cash', c);
  if (!c) return 0;
  // Conservative conversion (adjust if you use a different standard):
  // 1 pp=10gp, 1 ep=0.5gp, 1 sp=0.1gp, 1 cp=0.01gp, ignore pd if unknown
  var gp = _gp(c.gp)+_gp(c.pp)*10+_gp(c.ep)*0.5+_gp(c.sp)/10+_gp(c.cp)/100+_gp(c.pd||0)*10;
  bizLog('Calculated GP from cash', { gp: gp });
  return gp;
}
function spendFromCash(c, costGP){
  bizLog('Spending from cash', { cash: c, costGP: costGP });
  // Spend GP-first (simple). If you want proper coin-change, expand this.
  costGP = _gp(costGP);
  var have = gpFromCash(c);
  c.gp = _gp(c.gp) - costGP; // could go negative = debt
  var remaining = have - costGP;
  bizLog('Cash after spend', { remaining: remaining, updated: c });
  return remaining;
}

function findCheapestMarketByTag(M, tag){
  bizLog('Searching cheapest market item', { tag: tag });
  var best = null, id, sku, cur;
  for (id in M.skus){
    sku = M.skus[id]; cur = M.current[id];
    if (!cur || !cur.available) continue;
    var tags = sku.tags || [sku.type];
    if (tags && tags.indexOf(tag)!==-1){
      var price = _gp(cur.priceGP);
      bizLog('Candidate market item', { id: id, price: price });
      if (!best || price < best.price){
        best = {
          skuId: id,
          name: sku.name,
          baseUnit: sku.baseUnit||'unit',
          price: price,
          offerPct: cur.offerPct||0
        };
        bizLog('New best market item', best);
      }
    }
  }
  bizLog('Cheapest market item result', best);
  return best;
}

// Returns market-buyable items for a business (by its STOCK defs)
function getAvailableMarketItemsForBiz(biz){
  bizLog('Getting available market items for biz', { biz: biz && biz.name, type: biz && biz.type });
  var t = TYPE_INCOME[biz.type];
  if (!t){ bizWarn('No income type for biz', { biz: biz }); return []; }
  var M = state.BIZ.market;
  var out = [];
  (t.stock||[]).forEach(function(s){
    if (!s.linkedToMarket || !s.marketTag) return;
    var best = findCheapestMarketByTag(M, s.marketTag);
    if (!best) return;
    var item = {
      stockKey: s.key,
      label: s.label,
      marketTag: s.marketTag,
      baseUnit: s.baseUnit || (best.baseUnit||'unit'),
      containerUnit: s.containerUnit || 'crate',
      unitsPerContainer: _gp(s.unitsPerContainer)||10,
      price: best.price, // per base unit
      offerPct: best.offerPct||0
    };
    bizLog('Available market item', item);
    out.push(item);
  });
  // sort by tag then price
  out.sort(function(a,b){
    if (a.marketTag===b.marketTag) return a.price-b.price;
    return (a.marketTag<b.marketTag?-1:1);
  });
  bizLog('Available market items result', out);
  return out;
}

function startBuyFlow(who, rawBizName){
  var name = stripQuotes(rawBizName);
  var biz  = state.BIZ.businesses[name];
  if (!biz) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(name)]));
  var avail = getAvailableMarketItemsForBiz(biz);
  if (!avail.length){
    return whisper(who, panel('Market', ['<em>No matching market items for '+_.escape(name)+'.</em>']));
  }
  var encBiz = encodeArg(name);
  var lines = ['üõí <b>Buy Stock ‚Äî '+_.escape(name)+'</b>', '<em>Select an item, then you‚Äôll enter quantities.</em>', '<hr>'];
  avail.forEach(function(it){
    var tag = it.marketTag, key = it.stockKey;
    var p = it.price.toFixed(3)+'gp/'+_.escape(it.baseUnit)+(it.offerPct?(' (offer '+it.offerPct+'%)'):'');
    lines.push('‚Ä¢ <b>'+_.escape(it.label)+'</b> ‚Äî '+p+
      ' '+btn('Select', "!biz --buyconfirm "+encBiz+" '"+key+"' '?{Containers of "+_.escape(it.containerUnit)+"|0}' '?{Extra "+_.escape(it.baseUnit)+"|0}'", 'pri'));
  });
  lines.push('<hr>'+btn('Back', "!biz --bizmenu "+encBiz, 'muted'));
  sayPanel(who, 'Market ‚Äî Pick Item', lines);
}

function startBuyFlowFromTag(who, rawTag){
  var tag = stripQuotes(rawTag);
  var bizNames = _.keys(state.BIZ.businesses);
  if (!bizNames.length) return whisper(who, 'No businesses.');
  // pick a business first, then reuse confirm
  var pickBiz = bizNames.join('|');
  sendChat('BizTracker', "/w "+who+
    " ?{Business|"+pickBiz+"} "+
    "?{Containers|0} "+
    "?{Extra Units|0}", function(msgs){
      // Grab the three answers (Roll20 will return them in the content, but keeping this minimal)
      // Fall back to a simple instruction:
      whisper(who,"Use the Market screen from the business to complete the purchase.");
    });
}

function confirmBuyFlow(who, rawBizName, rawStockKey, rawContainers, rawExtras){
  var name = stripQuotes(rawBizName);
  var biz  = state.BIZ.businesses[name];
  if (!biz) return whisper(who, 'No such business.');
  var t = TYPE_INCOME[biz.type]||{};
  var s = (t.stock||[]).find(function(x){ return x.key===stripQuotes(rawStockKey); });
  if (!s) return whisper(who, 'Unknown stock key for this business.');

  var containers = Math.max(0, _gp(stripQuotes(rawContainers)));
  var extraUnits = Math.max(0, _gp(stripQuotes(rawExtras)));
  var unitsPerC  = _gp(s.unitsPerContainer)||10;

  // market lookup
  var best = null;
  if (s.linkedToMarket && s.marketTag){
    best = findCheapestMarketByTag(state.BIZ.market, s.marketTag);
  }
  if (!best) return whisper(who, 'Item not currently available in market.');

  var baseUnits = containers*unitsPerC + extraUnits;
  var unitPrice = best.price;
  var totalCost = baseUnits * unitPrice;

  var encBiz = encodeArg(name);
  var encKey = encodeArg(s.key);

  var warn = '';
  var have = gpFromCash(biz.cash);
  if (totalCost > have){
    warn = ' ‚ö†Ô∏è <b>Warning:</b> Cost exceeds available cash; purchase will put this business into debt.';
  }

  var lines = [
    'üßæ <b>Confirm Purchase</b>',
    'Business: <b>'+_.escape(name)+'</b>',
    'Item: <b>'+_.escape(s.label)+'</b> ('+_.escape(s.baseUnit||'unit')+')',
    'Qty: '+containers+' √ó '+(s.containerUnit||'crate')+' ('+unitsPerC+' '+(s.baseUnit||'unit')+' each) + '+extraUnits+' = <b>'+baseUnits+'</b> '+(s.baseUnit||'unit'),
    'Price: '+unitPrice.toFixed(3)+'gp/'+(s.baseUnit||'unit'),
    'Total: <b>'+totalCost.toFixed(2)+' gp</b>'+warn,
    '<hr>'+
    btn('Yes, Buy', "!biz --buyexec "+encBiz+" "+encKey+" "+containers+" "+extraUnits, 'pri')+' '+
    btn('No', "!biz --bizmenu "+encBiz, 'muted')
  ];
  sayPanel(who,'Purchase Preview',lines);
}

function execBuyFlow(who, rawBizName, rawStockKey, rawContainers, rawExtras){
  var name = stripQuotes(rawBizName);
  var biz  = state.BIZ.businesses[name];
  if (!biz) return whisper(who, 'No such business.');
  var t = TYPE_INCOME[biz.type]||{};
  var s = (t.stock||[]).find(function(x){ return x.key===stripQuotes(rawStockKey); });
  if (!s) return whisper(who, 'Unknown stock key.');

  var containers = Math.max(0, _gp(stripQuotes(rawContainers)));
  var extraUnits = Math.max(0, _gp(stripQuotes(rawExtras)));
  var unitsPerC  = _gp(s.unitsPerContainer)||10;

  // Price from market
  var best = (s.linkedToMarket && s.marketTag) ? findCheapestMarketByTag(state.BIZ.market, s.marketTag) : null;
  if (!best) return whisper(who, 'Item not currently available in market.');
  var baseUnits = containers*unitsPerC + extraUnits;
  var totalCost = baseUnits * best.price;

  // Spend & add stock
  spendFromCash(biz.cash, totalCost);
  addStockToBiz(biz, s.key, baseUnits, {
    containerAdds: containers,
    note: 'Market purchase at '+best.price.toFixed(3)+'gp/'+(s.baseUnit||'unit')
  });

  // log history
  state.BIZ.history = state.BIZ.history || [];
  state.BIZ.history.push({
    when: _.clone(state.BIZ.date),
    who: name,
    what: 'BUY',
    details: {key:s.key, units:baseUnits, containers:containers, price:best.price, total:totalCost}
  });

  whisper(who, '‚úÖ Bought '+baseUnits+' '+(s.baseUnit||'unit')+' of '+_.escape(s.label)+' for '+totalCost.toFixed(2)+' gp.');
}

function addStockToBiz(biz, stockKey, baseUnits, meta){
  biz.stock = biz.stock || {};
  var cur = biz.stock[stockKey] || { units:0, spoil:null, containers:0 };
  cur.units += _gp(baseUnits);
  if (meta && meta.containerAdds) cur.containers = _gp(cur.containers||0)+_gp(meta.containerAdds);
  biz.stock[stockKey] = cur;
}


/* ======================
   HARPTOS CALENDAR
   ====================== */
var months = ['Hammer','Alturiak','Ches','Tarsakh','Mirtul','Kythorn','Flamerule','Eleasis','Eleint','Marpenoth','Uktar','Nightal'];
var festivals = [
  { name:'Midwinter',         after:'Hammer',    leapOnly:false, incomeMult:1.3, repDelta:+1 },
  { name:'Greengrass',        after:'Ches',      leapOnly:false, incomeMult:1.2, repDelta:+1 },
  { name:'Midsummer',         after:'Flamerule', leapOnly:false, incomeMult:1.4, repDelta:+2 },
  { name:'Shieldmeet',        after:'Flamerule', leapOnly:true,  incomeMult:1.3, repDelta:+1 },
  { name:'Highharvestide',    after:'Eleint',    leapOnly:false, incomeMult:1.25,repDelta:+1 },
  { name:'Feast of the Moon', after:'Uktar',     leapOnly:false, incomeMult:1.2, repDelta:+1 }
];
function cloneDate(d){ return { year:d.year, month:d.month, day:d.day, festival:d.festival||null, weekday:d.weekday||1 }; }
function dateStr(d){ return d.festival ? (d.festival+', Year '+d.year) : (d.month+' '+d.day+', Year '+d.year); }
function isLeap(y){ return (y%4===0); }
function findFestival(afterMonth, year){
  for (var i=0;i<festivals.length;i++){
    var f = festivals[i];
    if (f.after===afterMonth && (!f.leapOnly || isLeap(year))) return f;
  }
  return null;
}
function advanceHarptos(){
  var d = state.BIZ.date;
  // month-begin ‚Üí market update
  var beforeDay = d.day, beforeFest = d.festival;
  if (d.festival){
    var idx = (months.indexOf(d.month)+1)%12;
    if (idx===0) d.year++;
    d.month = months[idx]; d.day = 1; d.festival=null; d.weekday=((d.weekday%10)+1);
  } else {
    d.day++; d.weekday=((d.weekday%10)+1);
    if (d.day===30){
      var fest = findFestival(d.month, d.year);
      if (fest){ d.festival=fest.name; return; }
    }
    if (d.day>30){
      var i2 = (months.indexOf(d.month)+1)%12;
      d.month = months[i2]; d.day=1; if (i2===0) d.year++;
    }
  }
  if ((beforeDay!==1 || beforeFest) && d.day===1 && !d.festival){ monthlyMarketUpdate(); }
}
function addDaysHarptos(d, n){
  var cur = cloneDate(d);
  for (var i=0;i<n;i++){
    if (cur.festival){
      var idx = (months.indexOf(cur.month)+1)%12;
      if (idx===0) cur.year++;
      cur.month=months[idx]; cur.day=1; cur.festival=null; cur.weekday=((cur.weekday%10)+1);
      continue;
    }
    cur.day++; cur.weekday=((cur.weekday%10)+1);
    if (cur.day===30){
      var fest = findFestival(cur.month, cur.year);
      if (fest){ cur.festival=fest.name; continue; }
    }
    if (cur.day>30){
      var i2 = (months.indexOf(cur.month)+1)%12;
      cur.month=months[i2]; cur.day=1; if (i2===0) cur.year++;
    }
  }
  return cur;
}
function dateLE(a,b){
  if (a.year!==b.year) return a.year<b.year;
  var am = months.indexOf(a.month), bm = months.indexOf(b.month);
  if (am!==bm) return am<bm;
  var ad = a.festival ? 30.5 : a.day, bd = b.festival ? 30.5 : b.day;
  return ad<=bd;
}

/* =========================
   SIZES / THROUGHPUT
   ========================= */
var SIZE = {
  tiny:    { label:'Tiny',    baseMult:0.6,  demandCap:  8 },
  small:   { label:'Small',   baseMult:0.9,  demandCap: 16 },
  medium:  { label:'Medium',  baseMult:1.0,  demandCap: 32 },
  large:   { label:'Large',   baseMult:1.3,  demandCap: 64 },
  huge:    { label:'Huge',    baseMult:1.6,  demandCap:128 },
  massive: { label:'Massive', baseMult:2.0,  demandCap:256 }
};
function sizeForStaff(n){
  if (n<=0) return 'tiny';
  if (n<=2) return 'small';
  if (n<=10) return 'medium';
  if (n<=20) return 'large';
  if (n<=50) return 'huge';
  return 'massive';
}
function recomputeSize(biz){
  var n = (biz.staff||[]).length;
  biz.size = sizeForStaff(n);
}
function avgSkill(biz){
  var s = 0, n = (biz.staff||[]).length;
  if (!n) return 1.0;
  for (var i=0;i<n;i++) s += (biz.staff[i].skill||1.0);
  return s/n;
}

/* =========================
   SEASONS (per-item tags)
   ========================= */
var SEASON = {
  Winter: { months: {'Hammer':1,'Alturiak':1,'Nightal':1}, tags:{ stew:1.25, hotdrink:1.15, salad:0.80, coldale:0.90 } },
  Summer: { months: {'Flamerule':1,'Eleasis':1,'Eleint':1}, tags:{ salad:1.25, coldale:1.20, hotdrink:0.90, stew:0.85 } },
  Harvest:{ months: {'Marpenoth':1,'Uktar':1,'Eleint':1},  tags:{ veg:1.10, wine:1.10 } }
};
function seasonalMult(today, tags){
  if (!tags || !tags.length) return 1.0;
  var m = today.month, k, t, out = 1.0;
  for (k in SEASON){
    if (SEASON[k].months[m]){
      for (var i=0;i<tags.length;i++){
        t = tags[i];
        if (SEASON[k].tags[t]) out *= SEASON[k].tags[t];
      }
    }
  }
  return out;
}

/* =========================
   TYPE BASELINES + STOCK (tidy, grouped, ES5-safe)
   ========================= */

// ---- tiny helpers (ES5-safe) ----
function _c(o){ var k, n={}; for(k in o){ if(o.hasOwnProperty(k)) n[k]=o[k]; } return n; }
function _expand(groups, extras){
  var i,j,out=[],seen={},arr,it;
  for(i=0;i<groups.length;i++){
    arr = STOCK_GROUPS[groups[i]] || [];
    for(j=0;j<arr.length;j++){
      it = arr[j];
      if(!seen[it.key]){ seen[it.key]=1; out.push(_c(it)); }
    }
  }
  if (extras && extras.length){
    for (i=0;i<extras.length;i++){ it=extras[i]; if(!seen[it.key]){ seen[it.key]=1; out.push(_c(it)); } }
  }
  return out;
}

// ---- shared stock groups (ingredients & supplies) ----
// NOTE: salePricePerUnit is 0 for ingredients ‚Äî menus/services set prices.

var STOCK_GROUPS = {
  drinks_basic: [
    {key:'mead',    label:'Mead (pints)',    baseUnit:'pint',  containerUnit:'keg',   unitsPerContainer:88, perishability:'weekly', marketTag:'mead',    linkedToMarket:true, purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:60, tags:['coldale']},
    {key:'ale',     label:'Ale (pints)',     baseUnit:'pint',  containerUnit:'barrel',unitsPerContainer:88, perishability:'weekly', marketTag:'mead',    linkedToMarket:true, purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:60, tags:['coldale']},
    {key:'cider',   label:'Cider (pints)',   baseUnit:'pint',  containerUnit:'keg',   unitsPerContainer:88, perishability:'weekly', marketTag:'cider',   linkedToMarket:true, purchaseCostPerUnit:0.04, salePricePerUnit:0, baseStandingOrderUnits:30, tags:[]},
    {key:'whiskey', label:'Whiskey (shots)',  baseUnit:'shot',  containerUnit:'crate', unitsPerContainer:100,perishability:'yearly', marketTag:'whiskey', linkedToMarket:true, purchaseCostPerUnit:0.08, salePricePerUnit:0, baseStandingOrderUnits:80, tags:['spirits']},
    {key:'rum',     label:'Rum (shots)',      baseUnit:'shot',  containerUnit:'crate', unitsPerContainer:100,perishability:'yearly', marketTag:'rum',     linkedToMarket:true, purchaseCostPerUnit:0.05, salePricePerUnit:0, baseStandingOrderUnits:80, tags:['spirits']},
    {key:'wine',    label:'Wine (glasses)',   baseUnit:'glass', containerUnit:'crate', unitsPerContainer:60, perishability:'monthly',marketTag:'wine',    linkedToMarket:true, purchaseCostPerUnit:0.06, salePricePerUnit:0, baseStandingOrderUnits:40, tags:['wine']}
  ],
  bakery_basics: [
    {key:'bread',   label:'Bread Loaf',       baseUnit:'loaf',  containerUnit:'hamper',unitsPerContainer:20, perishability:'weekly', marketTag:'bread',   linkedToMarket:true, purchaseCostPerUnit:0.03, salePricePerUnit:0, baseStandingOrderUnits:40, tags:[]},
    {key:'flour',   label:'Wheat Flour (kg)', baseUnit:'kg',    containerUnit:'sack',  unitsPerContainer:50, perishability:'monthly',marketTag:'flour',   linkedToMarket:true, purchaseCostPerUnit:0.03, salePricePerUnit:0, baseStandingOrderUnits:30, tags:[]},
    {key:'sugar',   label:'Sugar (spoons)',   baseUnit:'spoon', containerUnit:'sack',  unitsPerContainer:200,perishability:'yearly', marketTag:'sugar',   linkedToMarket:true, purchaseCostPerUnit:0.01, salePricePerUnit:0, baseStandingOrderUnits:150,tags:[]},
    {key:'butter',  label:'Butter (pat)',     baseUnit:'pat',   containerUnit:'box',   unitsPerContainer:40, perishability:'weekly', marketTag:'butter',  linkedToMarket:true, purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:30, tags:[]},
    {key:'eggs',    label:'Eggs (unit)',      baseUnit:'egg',   containerUnit:'dozen', unitsPerContainer:12, perishability:'weekly', marketTag:'eggs',    linkedToMarket:true, purchaseCostPerUnit:0.01, salePricePerUnit:0, baseStandingOrderUnits:36, tags:[]},
    {key:'milk',    label:'Milk (jug)',       baseUnit:'litre', containerUnit:'crate', unitsPerContainer:12, perishability:'weekly', marketTag:'milk',    linkedToMarket:true, purchaseCostPerUnit:0.03, salePricePerUnit:0, baseStandingOrderUnits:24, tags:['hotdrink']},
    {key:'cheese',  label:'Cheese (wedge)',   baseUnit:'wedge', containerUnit:'box',   unitsPerContainer:20, perishability:'monthly',marketTag:'cheese',  linkedToMarket:true, purchaseCostPerUnit:0.10, salePricePerUnit:0, baseStandingOrderUnits:20, tags:[]}
  ],
  veg_basics: [
    {key:'veg',     label:'Vegetables (mixed)',baseUnit:'portion',containerUnit:'crate',unitsPerContainer:30, perishability:'weekly', marketTag:'veg',     linkedToMarket:true, purchaseCostPerUnit:0.03, salePricePerUnit:0, baseStandingOrderUnits:30, tags:['veg','salad']},
    {key:'lettuce', label:'Lettuce Head',       baseUnit:'head',   containerUnit:'crate',unitsPerContainer:20, perishability:'weekly', marketTag:'lettuce', linkedToMarket:true, purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:20, tags:['salad']},
    {key:'cucumber',label:'Cucumber',           baseUnit:'unit',   containerUnit:'crate',unitsPerContainer:24, perishability:'weekly', marketTag:'cucumber',linkedToMarket:true, purchaseCostPerUnit:0.01, salePricePerUnit:0, baseStandingOrderUnits:24, tags:['salad']},
    {key:'tomato',  label:'Tomatoes (lb)',      baseUnit:'lb',     containerUnit:'crate',unitsPerContainer:20, perishability:'weekly', marketTag:'tomato', linkedToMarket:true, purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:20, tags:['salad']},
    {key:'onion',   label:'Onions (lb)',        baseUnit:'lb',     containerUnit:'crate',unitsPerContainer:20, perishability:'monthly',marketTag:'onion',  linkedToMarket:true, purchaseCostPerUnit:0.01, salePricePerUnit:0, baseStandingOrderUnits:20, tags:[]},
    {key:'carrot',  label:'Carrots (lb)',       baseUnit:'lb',     containerUnit:'crate',unitsPerContainer:20, perishability:'monthly',marketTag:'carrot', linkedToMarket:true, purchaseCostPerUnit:0.01, salePricePerUnit:0, baseStandingOrderUnits:20, tags:[]}
  ],
  meats_split: [
    {key:'beef',    label:'Beef (lb)',     baseUnit:'lb', containerUnit:'crate',unitsPerContainer:20, perishability:'weekly', marketTag:'beef',    linkedToMarket:true, purchaseCostPerUnit:0.08, salePricePerUnit:0, baseStandingOrderUnits:20, tags:['meat']},
    {key:'pork',    label:'Pork (lb)',     baseUnit:'lb', containerUnit:'crate',unitsPerContainer:20, perishability:'weekly', marketTag:'pork',    linkedToMarket:true, purchaseCostPerUnit:0.06, salePricePerUnit:0, baseStandingOrderUnits:20, tags:['meat']},
    {key:'mutton',  label:'Mutton (lb)',   baseUnit:'lb', containerUnit:'crate',unitsPerContainer:20, perishability:'weekly', marketTag:'mutton',  linkedToMarket:true, purchaseCostPerUnit:0.07, salePricePerUnit:0, baseStandingOrderUnits:16, tags:['meat']},
    {key:'chicken', label:'Chicken (lb)',  baseUnit:'lb', containerUnit:'crate',unitsPerContainer:20, perishability:'weekly', marketTag:'chicken', linkedToMarket:true, purchaseCostPerUnit:0.05, salePricePerUnit:0, baseStandingOrderUnits:16, tags:['meat']},
    {key:'rabbit',  label:'Rabbit (lb)',   baseUnit:'lb', containerUnit:'crate',unitsPerContainer:16, perishability:'weekly', marketTag:'rabbit',  linkedToMarket:true, purchaseCostPerUnit:0.05, salePricePerUnit:0, baseStandingOrderUnits:12, tags:['meat']}
  ],
  fish_split: [
    {key:'cod',     label:'Cod (lb)',      baseUnit:'lb', containerUnit:'crate',unitsPerContainer:20, perishability:'weekly', marketTag:'fish', linkedToMarket:true, purchaseCostPerUnit:0.07, salePricePerUnit:0, baseStandingOrderUnits:16, tags:[]},
    {key:'salmon',  label:'Salmon (lb)',   baseUnit:'lb', containerUnit:'crate',unitsPerContainer:18, perishability:'weekly', marketTag:'fish', linkedToMarket:true, purchaseCostPerUnit:0.09, salePricePerUnit:0, baseStandingOrderUnits:14, tags:[]},
    {key:'eel',     label:'Eel (lb)',      baseUnit:'lb', containerUnit:'crate',unitsPerContainer:16, perishability:'weekly', marketTag:'fish', linkedToMarket:true, purchaseCostPerUnit:0.08, salePricePerUnit:0, baseStandingOrderUnits:12, tags:[]}
  ],
  cafe_basics: [
    {key:'coffee',  label:'Coffee Beans (cups)',baseUnit:'cup', containerUnit:'sack',unitsPerContainer:80, perishability:'monthly',marketTag:'coffee', linkedToMarket:true, purchaseCostPerUnit:0.06, salePricePerUnit:0, baseStandingOrderUnits:80, tags:['hotdrink']},
    {key:'tea',     label:'Tea Leaves (cups)',  baseUnit:'cup', containerUnit:'sack',unitsPerContainer:80, perishability:'monthly',marketTag:'tea',    linkedToMarket:true, purchaseCostPerUnit:0.04, salePricePerUnit:0, baseStandingOrderUnits:80, tags:['hotdrink']},
    {key:'cocoa',   label:'Cocoa (cups)',       baseUnit:'cup', containerUnit:'sack',unitsPerContainer:60, perishability:'monthly',purchaseCostPerUnit:0.05, salePricePerUnit:0, baseStandingOrderUnits:40, tags:['hotdrink']}
  ],
  smith_core: [
    {key:'iron',    label:'Iron Stock',     baseUnit:'ingot', containerUnit:'crate', unitsPerContainer:10, perishability:'monthly', purchaseCostPerUnit:0.40, salePricePerUnit:0.80, baseStandingOrderUnits:10, tags:[]},
    {key:'steel',   label:'Steel Stock',    baseUnit:'billet',containerUnit:'crate', unitsPerContainer:10, perishability:'monthly', purchaseCostPerUnit:0.60, salePricePerUnit:1.10, baseStandingOrderUnits:10, tags:[]},
    {key:'coal',    label:'Coal',           baseUnit:'sack',  containerUnit:'pallet',unitsPerContainer:10, perishability:'monthly', purchaseCostPerUnit:0.15, salePricePerUnit:0.30, baseStandingOrderUnits:10, tags:[]},
    {key:'charcoal',label:'Charcoal',       baseUnit:'sack',  containerUnit:'pallet',unitsPerContainer:10, perishability:'monthly', purchaseCostPerUnit:0.12, salePricePerUnit:0.24, baseStandingOrderUnits:10, tags:[]},
    {key:'flux',    label:'Flux',           baseUnit:'bag',   containerUnit:'crate', unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.10, salePricePerUnit:0.20, baseStandingOrderUnits:10, tags:[]}
  ],
  apoth_core: [
    {key:'herbs',   label:'Medicinal Herbs',baseUnit:'bundle',containerUnit:'chest',unitsPerContainer:20, perishability:'monthly', purchaseCostPerUnit:0.20, salePricePerUnit:0.40, baseStandingOrderUnits:20, tags:[]},
    {key:'salve',   label:'Healing Salve',  baseUnit:'jar',   containerUnit:'crate',unitsPerContainer:12, perishability:'yearly',  purchaseCostPerUnit:0.12, salePricePerUnit:0.24, baseStandingOrderUnits:12, tags:[]},
    {key:'tonic',   label:'Tonic (phial)',  baseUnit:'phial', containerUnit:'case', unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.10, salePricePerUnit:0.22, baseStandingOrderUnits:10, tags:[]}
  ],
  scriptorium_core: [
    {key:'ink',     label:'Ink',            baseUnit:'bottle',containerUnit:'case', unitsPerContainer:12, perishability:'yearly',  purchaseCostPerUnit:0.10, salePricePerUnit:0.20, baseStandingOrderUnits:12, tags:[]},
    {key:'parch',   label:'Parchment',      baseUnit:'quire', containerUnit:'bale', unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.10, salePricePerUnit:0.20, baseStandingOrderUnits:10, tags:[]},
    {key:'quills',  label:'Quills',         baseUnit:'dozen', containerUnit:'box',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10, tags:[]}
  ],
  stables_core: [
    {key:'feed',    label:'Animal Feed',    baseUnit:'sack',  containerUnit:'pallet',unitsPerContainer:10, perishability:'weekly', purchaseCostPerUnit:0.10, salePricePerUnit:0.20, baseStandingOrderUnits:10, tags:[]},
    {key:'straw',   label:'Straw',          baseUnit:'bale',  containerUnit:'pallet',unitsPerContainer:10, perishability:'weekly', purchaseCostPerUnit:0.05, salePricePerUnit:0.10, baseStandingOrderUnits:10, tags:[]},
    {key:'shoes',   label:'Horseshoes',     baseUnit:'set',   containerUnit:'box',   unitsPerContainer:6,  perishability:'yearly', purchaseCostPerUnit:0.20, salePricePerUnit:0.45, baseStandingOrderUnits:6,  tags:[]}
  ],
  temple_core: [
    {key:'incense', label:'Incense',        baseUnit:'bundle',containerUnit:'chest',unitsPerContainer:20, perishability:'monthly', purchaseCostPerUnit:0.05, salePricePerUnit:0.10, baseStandingOrderUnits:20, tags:[]},
    {key:'candles', label:'Candles',        baseUnit:'dozen', containerUnit:'box',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10, tags:[]},
    {key:'wine',    label:'Sacramental Wine',baseUnit:'glass',containerUnit:'crate',unitsPerContainer:60, perishability:'monthly', purchaseCostPerUnit:0.06, salePricePerUnit:0,   baseStandingOrderUnits:30, tags:['wine']}
  ],
  theatre_core: [
    {key:'props',   label:'Props & Costumes',baseUnit:'set',  containerUnit:'trunk', unitsPerContainer:5,  perishability:'yearly', purchaseCostPerUnit:0.80, salePricePerUnit:1.60, baseStandingOrderUnits:2, tags:[]},
    {key:'paint',   label:'Paint (pot)',     baseUnit:'pot',  containerUnit:'crate', unitsPerContainer:12, perishability:'yearly', purchaseCostPerUnit:0.05, salePricePerUnit:0.12, baseStandingOrderUnits:6, tags:[]},
    {key:'canvas',  label:'Canvas (yd)',     baseUnit:'yard', containerUnit:'bolt',  unitsPerContainer:20, perishability:'yearly', purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10,tags:[]}
  ],
  courier_core: [
    {key:'paper',   label:'Wrapping Paper',  baseUnit:'parcel',containerUnit:'roll', unitsPerContainer:20, perishability:'yearly', marketTag:'paper', linkedToMarket:true, purchaseCostPerUnit:0.005, salePricePerUnit:0, baseStandingOrderUnits:60, tags:[]},
    {key:'string',  label:'String/Twine',    baseUnit:'parcel',containerUnit:'ball', unitsPerContainer:30, perishability:'yearly', marketTag:'string',linkedToMarket:true, purchaseCostPerUnit:0.003, salePricePerUnit:0, baseStandingOrderUnits:60, tags:[]},
    {key:'seal',    label:'Wax Seals',       baseUnit:'seal',  containerUnit:'pack', unitsPerContainer:20, perishability:'yearly', marketTag:'seal',  linkedToMarket:true, purchaseCostPerUnit:0.01,  salePricePerUnit:0, baseStandingOrderUnits:20, tags:[]}
  ],
  general_goods: [
    {key:'rope',    label:'Rope (50ft)',     baseUnit:'coil', containerUnit:'bundle',unitsPerContainer:5,  perishability:'yearly', purchaseCostPerUnit:0.25, salePricePerUnit:0.50, baseStandingOrderUnits:5,  tags:[]},
    {key:'oil',     label:'Lamp Oil (flask)',baseUnit:'flask',containerUnit:'crate', unitsPerContainer:12, perishability:'yearly', purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:12, tags:[]},
    {key:'torch',   label:'Torch',           baseUnit:'unit', containerUnit:'bundle',unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.02, salePricePerUnit:0.05, baseStandingOrderUnits:20, tags:[]}
  ]
};

// ---- Business baselines (each stock list composed from groups) ----
var TYPE_INCOME = {
  "Tavern": {
    gp: 3.0, var: 0.35,
    stock: _expand(['drinks_basic','bakery_basics','veg_basics','meats_split'])
  },

  "Inn": {
    gp: 3.0, var: 0.30, rooms:true,
    stock: _expand(['drinks_basic','bakery_basics','veg_basics','meats_split'])
  },

  "Restaurant": {
    gp: 3.2, var: 0.30,
    stock: _expand(['drinks_basic','bakery_basics','veg_basics','meats_split','fish_split'])
  },

  "Caf√©": {
    gp: 1.4, var: 0.25,
    stock: _expand(['cafe_basics','bakery_basics'])
  },

  "Blacksmith": {
    gp: 4.0, var: 0.20,
    stock: _expand(['smith_core'], [
      {key:'nails',label:'Nails (hundred)',baseUnit:'hundred',containerUnit:'box',unitsPerContainer:10, perishability:'yearly',purchaseCostPerUnit:0.05,salePricePerUnit:0.12,baseStandingOrderUnits:10,tags:[]},
      {key:'whetstone',label:'Whetstone',baseUnit:'stone',containerUnit:'box',unitsPerContainer:10, perishability:'yearly',purchaseCostPerUnit:0.08,salePricePerUnit:0.16,baseStandingOrderUnits:10,tags:[]}
    ])
  },

  "Apothecary": {
    gp: 3.5, var: 0.25,
    stock: _expand(['apoth_core'], [
      {key:'bandage',label:'Bandages',baseUnit:'roll',containerUnit:'box',unitsPerContainer:10, perishability:'yearly',purchaseCostPerUnit:0.04,salePricePerUnit:0.10,baseStandingOrderUnits:20,tags:[]}
    ])
  },

  "General Store": {
    gp: 2.5, var: 0.25,
    stock: _expand(['general_goods','bakery_basics','veg_basics'])
  },

  "Alchemist's Lab": {
    gp: 5.0, var: 0.25,
    stock: [
      {key:'reagents',label:'Alchemical Reagents',baseUnit:'kit',containerUnit:'crate',unitsPerContainer:10,perishability:'monthly',purchaseCostPerUnit:0.50,salePricePerUnit:1.00,baseStandingOrderUnits:10,tags:[]}
    ]
  },

  "Courier Service": { gp: 1.5, var: 0.35, stock: _expand(['courier_core']) },

  "Jeweller": {
    gp: 5.0, var: 0.25,
    stock: [
      {key:'findings',label:'Findings & Wire',baseUnit:'pack',containerUnit:'box',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.50,salePricePerUnit:1.00,baseStandingOrderUnits:10,tags:[]}
    ]
  },

  "Magic Shop": {
    gp: 6.0, var: 0.30,
    stock: [
      {key:'essences',label:'Arcane Essences',baseUnit:'phial',containerUnit:'case',unitsPerContainer:10,perishability:'monthly',purchaseCostPerUnit:1.00,salePricePerUnit:2.00,baseStandingOrderUnits:10,tags:[]}
    ]
  },

  "Scriptorium": { gp: 1.5, var: 0.25, stock: _expand(['scriptorium_core']) },

  "Stables": { gp: 1.5, var: 0.25, stock: _expand(['stables_core']) },

  "Temple":  { gp: 1.0, var: 0.50, stock: _expand(['temple_core']) },

  "Theatre": { gp: 2.0, var: 0.60, stock: _expand(['theatre_core']) },

  // ---- Extra shop types you asked for ----
  "Adventurers Guild": { gp: 3.0, var: 0.35, stock: _expand(['general_goods','scriptorium_core','courier_core']) },
  "Haberdashery":      { gp: 2.4, var: 0.30, stock: [
      {key:'thread',label:'Thread',baseUnit:'spool',containerUnit:'box',unitsPerContainer:20,perishability:'yearly',purchaseCostPerUnit:0.03,salePricePerUnit:0.09,baseStandingOrderUnits:20,tags:[]},
      {key:'buttons',label:'Buttons',baseUnit:'dozen',containerUnit:'box',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.05,salePricePerUnit:0.15,baseStandingOrderUnits:10,tags:[]},
      {key:'needles',label:'Needles',baseUnit:'dozen',containerUnit:'box',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.02,salePricePerUnit:0.05,baseStandingOrderUnits:10,tags:[]},
      {key:'ribbon',label:'Ribbon (yd)',baseUnit:'yard',containerUnit:'bolt',unitsPerContainer:20,perishability:'yearly',purchaseCostPerUnit:0.03,salePricePerUnit:0.08,baseStandingOrderUnits:20,tags:[]},
      {key:'lace',label:'Lace (yd)',baseUnit:'yard',containerUnit:'bolt',unitsPerContainer:20,perishability:'yearly',purchaseCostPerUnit:0.04,salePricePerUnit:0.10,baseStandingOrderUnits:20,tags:[]}
    ]},
  "Weaponsmith":       { gp: 4.8, var: 0.25, stock: _expand(['smith_core'], [
      {key:'leather_wrap',label:'Leather Wraps',baseUnit:'hide',containerUnit:'bale',unitsPerContainer:6,perishability:'monthly',purchaseCostPerUnit:0.40,salePricePerUnit:0.90,baseStandingOrderUnits:6,tags:[]},
      {key:'whetstone',label:'Whetstones',baseUnit:'stone',containerUnit:'box',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.08,salePricePerUnit:0.16,baseStandingOrderUnits:10,tags:[]}
    ])},
  "Armorer":           { gp: 4.5, var: 0.25, stock: _expand(['smith_core'], [
      {key:'mail',label:'Mail Links (lb)',baseUnit:'lb',containerUnit:'crate',unitsPerContainer:20,perishability:'yearly',purchaseCostPerUnit:0.50,salePricePerUnit:1.00,baseStandingOrderUnits:10,tags:[]},
      {key:'leather',label:'Cured Leather',baseUnit:'hide',containerUnit:'bale',unitsPerContainer:6,perishability:'monthly',purchaseCostPerUnit:0.40,salePricePerUnit:0.90,baseStandingOrderUnits:6,tags:[]}
    ])},
  "Cobbler":           { gp: 2.1, var: 0.25, stock: [
      {key:'leather',label:'Leather (hide)',baseUnit:'hide',containerUnit:'bale',unitsPerContainer:6,perishability:'monthly',purchaseCostPerUnit:0.40,salePricePerUnit:0.90,baseStandingOrderUnits:6,tags:[]},
      {key:'thread_wax',label:'Waxed Thread',baseUnit:'spool',containerUnit:'box',unitsPerContainer:20,perishability:'yearly',purchaseCostPerUnit:0.03,salePricePerUnit:0.09,baseStandingOrderUnits:20,tags:[]},
      {key:'soles',label:'Soles',baseUnit:'pair',containerUnit:'box',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.10,salePricePerUnit:0.22,baseStandingOrderUnits:10,tags:[]}
    ]},
  "Cooper":            { gp: 2.4, var: 0.25, stock: [
      {key:'staves',label:'Barrel Staves (set)',baseUnit:'set',containerUnit:'bundle',unitsPerContainer:8,perishability:'yearly',purchaseCostPerUnit:0.50,salePricePerUnit:1.05,baseStandingOrderUnits:8,tags:[]},
      {key:'hoops',label:'Iron Hoops (set)',baseUnit:'set',containerUnit:'bundle',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.30,salePricePerUnit:0.70,baseStandingOrderUnits:10,tags:[]},
      {key:'pitch',label:'Pitch',baseUnit:'block',containerUnit:'box',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.04,salePricePerUnit:0.10,baseStandingOrderUnits:10,tags:[]}
    ]},
  "Brewery":           { gp: 3.2, var: 0.30, stock: _expand(['drinks_basic','bakery_basics']) },
  "Bakery":            { gp: 2.8, var: 0.30, stock: _expand(['bakery_basics']) },
  "Butcher":           { gp: 2.6, var: 0.30, stock: _expand(['meats_split']) },
  "Fishmonger":        { gp: 2.6, var: 0.35, stock: _expand(['fish_split']) },
  "Carpenter":         { gp: 3.0, var: 0.25, stock: _expand(['general_goods'], [
      {key:'plank',label:'Timber Planks',baseUnit:'plank',containerUnit:'stack',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.10,salePricePerUnit:0.24,baseStandingOrderUnits:10,tags:[]},
      {key:'nails',label:'Nails (hundred)',baseUnit:'hundred',containerUnit:'box',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.05,salePricePerUnit:0.12,baseStandingOrderUnits:10,tags:[]}
    ])},
  "Tailor":            { gp: 2.5, var: 0.30, stock: [
      {key:'cloth',label:'Cloth (yd)',baseUnit:'yard',containerUnit:'bolt',unitsPerContainer:20,perishability:'yearly',purchaseCostPerUnit:0.03,salePricePerUnit:0.08,baseStandingOrderUnits:20,tags:[]},
      {key:'thread',label:'Thread',baseUnit:'spool',containerUnit:'box',unitsPerContainer:20,perishability:'yearly',purchaseCostPerUnit:0.03,salePricePerUnit:0.09,baseStandingOrderUnits:20,tags:[]},
      {key:'dyes',label:'Dyes (jar)',baseUnit:'jar',containerUnit:'crate',unitsPerContainer:12,perishability:'yearly',purchaseCostPerUnit:0.03,salePricePerUnit:0.07,baseStandingOrderUnits:6,tags:[]}
    ]},
  "Chandlery":         { gp: 2.2, var: 0.25, stock: [
      {key:'tallow',label:'Tallow (lb)',baseUnit:'lb',containerUnit:'sack',unitsPerContainer:20,perishability:'monthly',purchaseCostPerUnit:0.02,salePricePerUnit:0.06,baseStandingOrderUnits:20,tags:[]},
      {key:'wick',label:'Wick (coil)',baseUnit:'coil',containerUnit:'bundle',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.03,salePricePerUnit:0.07,baseStandingOrderUnits:10,tags:[]},
      {key:'candles',label:'Candles (dozen)',baseUnit:'dozen',containerUnit:'box',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.04,salePricePerUnit:0.10,baseStandingOrderUnits:10,tags:[]}
    ]},
  "Glassblower":       { gp: 3.0, var: 0.30, stock: [
      {key:'sand',label:'Silica Sand (sack)',baseUnit:'sack',containerUnit:'pallet',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.03,salePricePerUnit:0.07,baseStandingOrderUnits:10,tags:[]},
      {key:'soda',label:'Soda Ash (bag)',baseUnit:'bag',containerUnit:'crate',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.04,salePricePerUnit:0.10,baseStandingOrderUnits:10,tags:[]},
      {key:'lime',label:'Lime (bag)',baseUnit:'bag',containerUnit:'crate',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.03,salePricePerUnit:0.08,baseStandingOrderUnits:10,tags:[]}
    ]},
  "Potter":            { gp: 2.4, var: 0.30, stock: [
      {key:'clay',label:'Clay (block)',baseUnit:'block',containerUnit:'box',unitsPerContainer:10,perishability:'monthly',purchaseCostPerUnit:0.02,salePricePerUnit:0.06,baseStandingOrderUnits:10,tags:[]},
      {key:'glaze',label:'Glaze (jar)',baseUnit:'jar',containerUnit:'crate',unitsPerContainer:12,perishability:'yearly',purchaseCostPerUnit:0.03,salePricePerUnit:0.07,baseStandingOrderUnits:6,tags:[]},
      {key:'kilnwood',label:'Kiln Wood',baseUnit:'bundle',containerUnit:'stack',unitsPerContainer:10,perishability:'weekly',purchaseCostPerUnit:0.03,salePricePerUnit:0.07,baseStandingOrderUnits:10,tags:[]}
    ]},
  "Bookseller":        { gp: 2.3, var: 0.25, stock: _expand(['scriptorium_core'], [
      {key:'bindings',label:'Bindings',baseUnit:'set',containerUnit:'box',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.10,salePricePerUnit:0.22,baseStandingOrderUnits:10,tags:[]}
    ])},
  "Perfumer":          { gp: 3.0, var: 0.35, stock: [
      {key:'alcohol',label:'Perfumer‚Äôs Alcohol',baseUnit:'bottle',containerUnit:'case',unitsPerContainer:12,perishability:'yearly',purchaseCostPerUnit:0.10,salePricePerUnit:0.22,baseStandingOrderUnits:12,tags:[]},
      {key:'oils',label:'Essential Oils',baseUnit:'phial',containerUnit:'case',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.20,salePricePerUnit:0.45,baseStandingOrderUnits:10,tags:[]},
      {key:'bottles',label:'Glass Bottles',baseUnit:'dozen',containerUnit:'box',unitsPerContainer:10,perishability:'yearly',purchaseCostPerUnit:0.06,salePricePerUnit:0.14,baseStandingOrderUnits:10,tags:[]}
    ]},

  "default": { gp: 1.0, var: 0.30, stock: [] }
};

// ---- auto-expenses (left simple & tidy) ----
var TYPE_AUTO_EXPENSES = {
  "Tavern":      [ { what:'Cleaning & Linen',      frequency:'Weekly',  baseGp:1.0 } ],
  "Inn":         [ { what:'Laundry',               frequency:'Weekly',  baseGp:1.5 },
                   { what:'Repairs Fund',          frequency:'Monthly', baseGp:4.0 } ],
  "Restaurant":  [ { what:'Kitchen Fuel',          frequency:'Weekly',  baseGp:1.2 } ],
  "Caf√©":        [ { what:'Pastry Paper & Cups',   frequency:'Weekly',  baseGp:0.6 } ],
  "Blacksmith":  [ { what:'Tools Upkeep',          frequency:'Monthly', baseGp:2.0 } ],
  "Bakery":      [ { what:'Oven Fuel',             frequency:'Weekly',  baseGp:0.8 } ],
  "Brewery":     [ { what:'Mash Fuel & Cleaning',  frequency:'Weekly',  baseGp:1.0 } ],
  "Butcher":     [ { what:'Ice/Cold Storage',      frequency:'Weekly',  baseGp:0.9 } ],
  "Fishmonger":  [ { what:'Ice/Cold Storage',      frequency:'Weekly',  baseGp:0.9 } ],
  "Stables":     [ { what:'Stable Bedding',        frequency:'Weekly',  baseGp:0.6 } ],
  "Theatre":     [ { what:'Lighting & Wardrobe',   frequency:'Weekly',  baseGp:0.8 } ],
  "default":     []
};

/* =========================
   MENU / SERVICES TEMPLATES
   - Food/Drink menus (use stock keys)
   - Services for craft shops
   ========================= */

var MENU_TEMPLATES = {
  "Tavern": {
    drinks: [
      {key:'draught_mead', label:'House Mead (pint)', price:0.4, share:0.35, recipe:[['mead',1]]},
      {key:'amber_ale',    label:'Amber Ale (pint)',  price:0.45,share:0.25, recipe:[['mead',1]]},
      {key:'whiskey_shot', label:'Whiskey (shot)',    price:0.8, share:0.15, recipe:[['whiskey',1]]},
      {key:'red_wine',     label:'Red Wine (glass)',  price:0.6, share:0.10, recipe:[['wine',1]]}
    ],
    food: [
      {key:'stew_beef', label:'Beef Stew', price:0.8, share:0.2, recipe:[['beef',1],['veg',1],['bread',0.5]]},
      {key:'cheese_pl', label:'Cheese Plate', price:0.6, share:0.15, recipe:[['cheese',1],['bread',0.5]]}
    ]
  },
  "Inn": {
    drinks: [
      {key:'ale',  label:'Ale (pint)', price:0.4, share:0.25, recipe:[['ale',1]]},
      {key:'wine', label:'Table Wine',  price:0.5, share:0.15, recipe:[['wine',1]]}
    ],
    food: [
      {key:'meal', label:'Hearty Meal', price:0.8, share:0.35, recipe:[['food',1]]}
    ]
  },
  "Restaurant": {
    drinks: [
      {key:'wine_gls', label:'Wine (glass)', price:0.8, share:0.15, recipe:[['wine',1]]},
      {key:'mead_gls', label:'Mead (pint)',  price:0.5, share:0.10, recipe:[['mead',1]]}
    ],
    food: [
      {key:'roast_beef', label:'Roast Beef & Veg', price:1.6, share:0.25, recipe:[['beef',2],['veg',1]]},
      {key:'salad',      label:'Garden Salad',     price:0.7, share:0.15, recipe:[['lettuce',1],['tomato',0.5],['cucumber',0.5]]},
      {key:'fish_sup',   label:'Fisherman‚Äôs Supper', price:1.4, share:0.2, recipe:[['fish',2],['veg',1]]}
    ]
  },
  "Caf√©": {
    drinks: [
      {key:'coffee_cup', label:'Coffee', price:0.4, share:0.35, recipe:[['coffee',1],['sugar',0.2]]},
      {key:'tea_cup',    label:'Tea',    price:0.35,share:0.25, recipe:[['tea',1],['sugar',0.2]]},
      {key:'hot_cocoa',  label:'Hot Cocoa', price:0.45, share:0.15, recipe:[['cocoa',1],['milk',0.5],['sugar',0.2]]}
    ],
    food: [
      {key:'butter_bread', label:'Butter Bread', price:0.3, share:0.2, recipe:[['bread',1],['butter',0.5]]},
      {key:'pastry',       label:'Morning Pastry', price:0.4, share:0.2, recipe:[['pastry',1]]}
    ]
  },

  // Services (craft shops). "consumes" is optional if you later simulate materials.
  "Blacksmith": {
    services: [
      {key:'shoe_horse', label:'Shoe a Horse', price:1.0, share:0.35, consumes:[['horseshoe',1],['coal',1]]},
      {key:'repair_tool',label:'Repair Tool',  price:0.6, share:0.30, consumes:[['coal',0.5]]}
    ]
  },
  "Weaponsmith": {
    services: [
      {key:'iron_axe',  label:'Iron Axe',      price:6,   share:0.35, consumes:[['iron',2],['coal',1]]},
      {key:'steel_swd', label:'Steel Longsword',price:15, share:0.35, consumes:[['steel',2],['coal',1]]},
      {key:'mith_swd',  label:'Mithril Shortsword', price:90, share:0.35, consumes:[['steel',1]]}, // add mithril later if you stock it
      {key:'adam_bast', label:'Adamantine Bastard Sword', price:250, share:0.35, consumes:[['steel',2]]}
    ]
  },
  "Armorer": {
    services: [
      {key:'leather_jerkin',label:'Leather Jerkin', price:10, share:0.35, consumes:[['leather',1],['rivets',0.2]]},
      {key:'chain_shirt',   label:'Chain Shirt',    price:50, share:0.35, consumes:[['mail',5],['rivets',0.5]]},
      {key:'steel_breast',  label:'Steel Breastplate', price:200, share:0.35, consumes:[['steel_plate',4],['rivets',0.5]]}
    ]
  },
  "Cobbler": {
    services: [
      {key:'boots',    label:'Sturdy Boots', price:2, share:0.35, consumes:[['leather',0.5],['soles',1]]},
      {key:'repair',   label:'Repair Shoes', price:0.5, share:0.35, consumes:[['thread',0.1],['tacks',0.1]]}
    ]
  },
  "Scriptorium": {
    services: [
      {key:'copy_pg',   label:'Copy Page', price:0.5, share:0.35, consumes:[['ink',0.1],['parch',0.2]]},
      {key:'illuminate',label:'Illumination', price:2, share:0.35, consumes:[['ink',0.2],['goldleaf',0.05]]}
    ]
  },
  "Temple": {
    services: [
      {key:'bless',  label:'Blessing',       price:1, share:0.5, consumes:[['incense',1]]},
      {key:'cure',   label:'Cure Wounds',    price:5, share:0.5, consumes:[['holywater',1]]}
    ]
  },
  "Stables": {
    services: [
      {key:'board', label:'Boarding (per day)', price:0.4, share:0.5, consumes:[['oats',1],['straw',1]]},
      {key:'groom', label:'Grooming',           price:0.2, share:0.5, consumes:[['brush',0.05]]}
    ]
  },
  "Theatre": {
    services: [
      {key:'admit', label:'Admission (seat)', price:0.2, share:0.8},
      {key:'private',label:'Private Performance', price:10, share:0.8}
    ]
  },
  "General Store": {
    services: [
      {key:'kit', label:'Adventurer‚Äôs Kit', price:5, share:0.5}
    ]
  }
};

function seedMenuForBiz(biz){
  if (biz.menu) return;
  var tpl = MENU_TEMPLATES[biz.type];
  if (!tpl){ biz.menu = {drinks:[],food:[],services:[]}; return; }
  // deep-ish copy
  biz.menu = {
    drinks: (tpl.drinks||[]).map(function(x){ return _.clone(x); }),
    food:   (tpl.food||[]).map(function(x){ return _.clone(x); }),
    services:(tpl.services||[]).map(function(x){ return _.clone(x); })
  };
}
function ensureMenusForBusiness(biz){
  biz.menu = biz.menu || {};
  biz.menu.drinks = biz.menu.drinks || [];
  biz.menu.food   = biz.menu.food   || [];
  biz.menu.services = biz.menu.services || [];
}


/* =========================
   DEFAULT MENUS / SERVICES
   ========================= */
// For food/drink businesses: menus are SELLING items (prices here).
// Keys reference stock keys in TYPE_INCOME. If a stock item‚Äôs salePricePerUnit is 0,
// the menu price below is used for selling to customers.

var DEFAULT_MENUS = {
  "Tavern": {
    drinks: [
      {key:'mead',    label:'House Mead (pint)',      price:0.10},
      {key:'ale',     label:'Ale (pint)',             price:0.10},
      {key:'cider',   label:'Cider (pint)',           price:0.12},
      {key:'whiskey', label:'Whiskey (shot)',         price:0.50},
      {key:'rum',     label:'Rum (shot)',             price:0.35},
      {key:'wine',    label:'Wine (glass)',           price:0.30}
    ],
    food: [
      {key:'bread',   label:'Bread & Butter',         price:0.08,   uses:[['bread',1],['butter',1]]},
      {key:'veg',     label:'Vegetable Stew',         price:0.20,   uses:[['veg',1]]},
      {key:'beef',    label:'Beef Pie',               price:0.35,   uses:[['beef',1],['flour',1],['butter',1]]},
      {key:'fish',    label:'Fisherman‚Äôs Plate',      price:0.32,   uses:[['cod',1]]}
    ]
  },

  "Inn": {
    drinks: [ {key:'ale',label:'Ale (pint)',price:0.10},{key:'wine',label:'Wine (glass)',price:0.30} ],
    food:   [ {key:'food',label:'Hearty Meal',price:0.25} ]
  },

  "Restaurant": {
    drinks: [ {key:'wine',label:'Wine (glass)',price:0.35},{key:'mead',label:'Mead (pint)',price:0.12} ],
    food:   [
      {key:'beef',label:'Roast Beef Plate',price:0.45,uses:[['beef',1],['veg',1]]},
      {key:'fish',label:'Seared Salmon',   price:0.48,uses:[['salmon',1],['veg',1]]},
      {key:'veg', label:'Garden Salad',    price:0.22,uses:[['lettuce',1],['tomato',1],['cucumber',1]]}
    ]
  },

  "Caf√©": {
    drinks: [ {key:'coffee',label:'Coffee',price:0.18},{key:'tea',label:'Tea',price:0.14},{key:'cocoa',label:'Hot Cocoa',price:0.20} ],
    food:   [ {key:'pastry',label:'Daily Pastry',price:0.16,uses:[['flour',1],['butter',1],['eggs',1]]} ]
  },

  // Service-style businesses (sell finished goods/services, not pints/units):
  "Weaponsmith": {
    services: [
      {code:'axe_iron',   label:'Iron Axe',           price:8.0,  mats:[['iron',2],['coal',1]]},
      {code:'sword_steel',label:'Steel Longsword',    price:15.0, mats:[['steel',2],['coal',1]]},
      {code:'bow',        label:'Bow & String',       price:7.0,  mats:[['bowstave',1],['string',1]]}
    ]
  },
  "Armorer": {
    services: [
      {code:'leather_jerkin',label:'Leather Jerkin',  price:8.0,  mats:[['leather',1],['dye',1]]},
      {code:'chain_shirt',   label:'Chain Shirt',     price:40.0, mats:[['mail',4],['rivets',1]]}
    ]
  },
  "Blacksmith": {
    services: [
      {code:'shoeing',   label:'Horse Shoeing (set)', price:1.0,  mats:[['horseshoe',1],['coal',1]]},
      {code:'nails_box', label:'Box of Nails',        price:0.8,  mats:[['nails',1]]}
    ]
  }
};

// When creating a business, we attach a live menu copy here:
function ensureMenusForBusiness(biz){
  if (!biz.menu) biz.menu = {};
  var t = biz.type;
  var def = DEFAULT_MENUS[t];
  if (def){
    if (def.drinks && !biz.menu.drinks) biz.menu.drinks = def.drinks.slice(0);
    if (def.food   && !biz.menu.food)   biz.menu.food   = def.food.slice(0);
    if (def.services && !biz.menu.services) biz.menu.services = def.services.slice(0);
  }
}


/* ============================================================
   STOCK LIBRARY + TYPE EXTENSIONS (ES5-safe)
   - Adds 20+ extra business types
   - Expands existing types so every business has ‚â•10 stock items
   - Splits meats (rabbit/orc/griffon/etc.) for food businesses
   ============================================================ */

// Lightweight clone
function _clone(o){ var k, n={}; for(k in o){ if(o.hasOwnProperty(k)) n[k]=o[k]; } return n; }

// Master stock parts (ingredients & supplies)
// NOTE: salePricePerUnit is 0 for ingredients (menus set prices).
var STOCK_LIB = {
  meats: [
    {key:'beef',     label:'Beef (lb)',     baseUnit:'lb',   containerUnit:'crate', unitsPerContainer:20, perishability:'weekly',  purchaseCostPerUnit:0.08, salePricePerUnit:0, baseStandingOrderUnits:20, tags:['stew']},
    {key:'pork',     label:'Pork (lb)',     baseUnit:'lb',   containerUnit:'crate', unitsPerContainer:20, perishability:'weekly',  purchaseCostPerUnit:0.06, salePricePerUnit:0, baseStandingOrderUnits:20, tags:[]},
    {key:'mutton',   label:'Mutton (lb)',   baseUnit:'lb',   containerUnit:'crate', unitsPerContainer:20, perishability:'weekly',  purchaseCostPerUnit:0.07, salePricePerUnit:0, baseStandingOrderUnits:16, tags:['stew']},
    {key:'rabbit',   label:'Rabbit (lb)',   baseUnit:'lb',   containerUnit:'crate', unitsPerContainer:16, perishability:'weekly',  purchaseCostPerUnit:0.05, salePricePerUnit:0, baseStandingOrderUnits:16, tags:[]},
    {key:'chicken',  label:'Chicken (lb)',  baseUnit:'lb',   containerUnit:'crate', unitsPerContainer:20, perishability:'weekly',  purchaseCostPerUnit:0.05, salePricePerUnit:0, baseStandingOrderUnits:20, tags:[]},
    {key:'boar',     label:'Boar (lb)',     baseUnit:'lb',   containerUnit:'crate', unitsPerContainer:18, perishability:'weekly',  purchaseCostPerUnit:0.07, salePricePerUnit:0, baseStandingOrderUnits:12, tags:[]},
    {key:'venison',  label:'Venison (lb)',  baseUnit:'lb',   containerUnit:'crate', unitsPerContainer:18, perishability:'weekly',  purchaseCostPerUnit:0.09, salePricePerUnit:0, baseStandingOrderUnits:12, tags:[]},
    {key:'goat',     label:'Goat (lb)',     baseUnit:'lb',   containerUnit:'crate', unitsPerContainer:18, perishability:'weekly',  purchaseCostPerUnit:0.06, salePricePerUnit:0, baseStandingOrderUnits:12, tags:[]},
    {key:'orc',      label:'Orc (lb)',      baseUnit:'lb',   containerUnit:'crate', unitsPerContainer:16, perishability:'weekly',  purchaseCostPerUnit:0.12, salePricePerUnit:0, baseStandingOrderUnits: 8, tags:['exotic']},
    {key:'griffon',  label:'Griffon (lb)',  baseUnit:'lb',   containerUnit:'crate', unitsPerContainer:12, perishability:'weekly',  purchaseCostPerUnit:0.20, salePricePerUnit:0, baseStandingOrderUnits: 6, tags:['exotic']}
  ],
  fish: [
    {key:'cod',      label:'Cod (lb)',      baseUnit:'lb', containerUnit:'crate', unitsPerContainer:20, perishability:'weekly', purchaseCostPerUnit:0.07, salePricePerUnit:0, baseStandingOrderUnits:16, tags:[]},
    {key:'salmon',   label:'Salmon (lb)',   baseUnit:'lb', containerUnit:'crate', unitsPerContainer:18, perishability:'weekly', purchaseCostPerUnit:0.09, salePricePerUnit:0, baseStandingOrderUnits:14, tags:[]},
    {key:'eel',      label:'Eel (lb)',      baseUnit:'lb', containerUnit:'crate', unitsPerContainer:16, perishability:'weekly', purchaseCostPerUnit:0.08, salePricePerUnit:0, baseStandingOrderUnits:12, tags:[]},
    {key:'herring',  label:'Herring (lb)',  baseUnit:'lb', containerUnit:'crate', unitsPerContainer:20, perishability:'weekly', purchaseCostPerUnit:0.05, salePricePerUnit:0, baseStandingOrderUnits:16, tags:[]},
    {key:'trout',    label:'Trout (lb)',    baseUnit:'lb', containerUnit:'crate', unitsPerContainer:18, perishability:'weekly', purchaseCostPerUnit:0.08, salePricePerUnit:0, baseStandingOrderUnits:14, tags:[]}
  ],
  bakery: [
    {key:'bread',    label:'Bread Loaf',    baseUnit:'loaf', containerUnit:'hamper', unitsPerContainer:20, perishability:'weekly', purchaseCostPerUnit:0.03, salePricePerUnit:0, baseStandingOrderUnits:40, tags:[]},
    {key:'flour',    label:'Wheat Flour (kg)',baseUnit:'kg', containerUnit:'sack',  unitsPerContainer:50, perishability:'monthly', purchaseCostPerUnit:0.03, salePricePerUnit:0, baseStandingOrderUnits:30, tags:[]},
    {key:'yeast',    label:'Yeast (pack)',  baseUnit:'pack', containerUnit:'box',   unitsPerContainer:20, perishability:'monthly', purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:20, tags:[]},
    {key:'sugar',    label:'Sugar (spoon)', baseUnit:'spoon',containerUnit:'sack',  unitsPerContainer:200,perishability:'yearly',  purchaseCostPerUnit:0.01, salePricePerUnit:0, baseStandingOrderUnits:150,tags:[]},
    {key:'butter',   label:'Butter (pat)',  baseUnit:'pat',  containerUnit:'box',   unitsPerContainer:40, perishability:'weekly',  purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:30, tags:[]},
    {key:'eggs',     label:'Eggs (unit)',   baseUnit:'egg',  containerUnit:'dozen', unitsPerContainer:12, perishability:'weekly',  purchaseCostPerUnit:0.01, salePricePerUnit:0, baseStandingOrderUnits:36, tags:[]},
    {key:'milk',     label:'Milk (jug)',    baseUnit:'litre',containerUnit:'crate', unitsPerContainer:12, perishability:'weekly',  purchaseCostPerUnit:0.03, salePricePerUnit:0, baseStandingOrderUnits:24, tags:['hotdrink']},
    {key:'honey',    label:'Honey (spoon)', baseUnit:'spoon',containerUnit:'jar',   unitsPerContainer:50, perishability:'monthly', purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:40, tags:[]},
    {key:'spice',    label:'Baking Spice',  baseUnit:'pinch',containerUnit:'tin',   unitsPerContainer:100,perishability:'yearly',  purchaseCostPerUnit:0.01, salePricePerUnit:0, baseStandingOrderUnits:80, tags:[]},
    {key:'cocoa',    label:'Cocoa (cup)',   baseUnit:'cup',  containerUnit:'sack',  unitsPerContainer:60, perishability:'monthly', purchaseCostPerUnit:0.05, salePricePerUnit:0, baseStandingOrderUnits:40, tags:['hotdrink']}
  ],
  cafe: [
    {key:'coffee',   label:'Coffee Beans (cup)',baseUnit:'cup',containerUnit:'sack', unitsPerContainer:80, perishability:'monthly', purchaseCostPerUnit:0.06, salePricePerUnit:0, baseStandingOrderUnits:80, tags:['hotdrink']},
    {key:'tea',      label:'Tea Leaves (cup)', baseUnit:'cup', containerUnit:'sack', unitsPerContainer:80, perishability:'monthly', purchaseCostPerUnit:0.04, salePricePerUnit:0, baseStandingOrderUnits:80, tags:['hotdrink']},
    {key:'cocoa',    label:'Cocoa (cup)',       baseUnit:'cup', containerUnit:'sack', unitsPerContainer:60, perishability:'monthly', purchaseCostPerUnit:0.05, salePricePerUnit:0, baseStandingOrderUnits:40, tags:['hotdrink']},
    {key:'syrup',    label:'Syrup (shot)',      baseUnit:'shot',containerUnit:'crate',unitsPerContainer:40, perishability:'monthly', purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:40, tags:[]},
    {key:'jam',      label:'Jam (spoon)',       baseUnit:'spoon',containerUnit:'jar',unitsPerContainer:50, perishability:'monthly', purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:30, tags:[]},
    {key:'pastry',   label:'Pastry (unit)',     baseUnit:'unit',containerUnit:'box', unitsPerContainer:20, perishability:'weekly',  purchaseCostPerUnit:0.06, salePricePerUnit:0, baseStandingOrderUnits:40, tags:[]},
    {key:'cream',    label:'Cream (spoon)',     baseUnit:'spoon',containerUnit:'jar',unitsPerContainer:60, perishability:'weekly',  purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:40, tags:[]},
    {key:'butter',   label:'Butter (pat)',      baseUnit:'pat', containerUnit:'box', unitsPerContainer:40, perishability:'weekly',  purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:30, tags:[]},
    {key:'flour',    label:'Wheat Flour (kg)',  baseUnit:'kg',  containerUnit:'sack',unitsPerContainer:50, perishability:'monthly', purchaseCostPerUnit:0.03, salePricePerUnit:0, baseStandingOrderUnits:30, tags:[]},
    {key:'eggs',     label:'Eggs (unit)',       baseUnit:'egg', containerUnit:'dozen',unitsPerContainer:12,perishability:'weekly',  purchaseCostPerUnit:0.01, salePricePerUnit:0, baseStandingOrderUnits:36, tags:[]}
  ],
  drinks: [
    {key:'mead',     label:'Mead (pints)',   baseUnit:'pint', containerUnit:'keg',    unitsPerContainer:88, perishability:'weekly', purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:60, tags:['coldale']},
    {key:'ale',      label:'Ale (pints)',    baseUnit:'pint', containerUnit:'barrel', unitsPerContainer:88, perishability:'weekly', purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:60, tags:['coldale']},
    {key:'whiskey',  label:'Whiskey (shots)',baseUnit:'shot', containerUnit:'crate',  unitsPerContainer:100,perishability:'yearly', purchaseCostPerUnit:0.08, salePricePerUnit:0, baseStandingOrderUnits:80, tags:['spirits']},
    {key:'rum',      label:'Rum (shots)',    baseUnit:'shot', containerUnit:'crate',  unitsPerContainer:100,perishability:'yearly', purchaseCostPerUnit:0.05, salePricePerUnit:0, baseStandingOrderUnits:80, tags:['spirits']},
    {key:'wine',     label:'Wine (glasses)', baseUnit:'glass',containerUnit:'crate',  unitsPerContainer:60, perishability:'monthly',purchaseCostPerUnit:0.06, salePricePerUnit:0, baseStandingOrderUnits:40, tags:['wine']},
    {key:'cider',    label:'Cider (pints)',  baseUnit:'pint', containerUnit:'keg',    unitsPerContainer:88, perishability:'weekly', purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:40, tags:[]}
  ],
  vegsalad: [
    {key:'veg',      label:'Vegetables (mixed)', baseUnit:'portion', containerUnit:'crate', unitsPerContainer:30, perishability:'weekly', purchaseCostPerUnit:0.03, salePricePerUnit:0, baseStandingOrderUnits:30, tags:['veg','salad']},
    {key:'lettuce',  label:'Lettuce Head',       baseUnit:'head',    containerUnit:'crate', unitsPerContainer:20, perishability:'weekly', purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:20, tags:['salad']},
    {key:'cucumber', label:'Cucumber',            baseUnit:'unit',    containerUnit:'crate', unitsPerContainer:24, perishability:'weekly', purchaseCostPerUnit:0.01, salePricePerUnit:0, baseStandingOrderUnits:24, tags:['salad']},
    {key:'tomato',   label:'Tomatoes (lb)',       baseUnit:'lb',      containerUnit:'crate', unitsPerContainer:20, perishability:'weekly', purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:20, tags:['salad']},
    {key:'onion',    label:'Onions (lb)',         baseUnit:'lb',      containerUnit:'crate', unitsPerContainer:20, perishability:'monthly',purchaseCostPerUnit:0.01, salePricePerUnit:0, baseStandingOrderUnits:20, tags:[]},
    {key:'carrot',   label:'Carrots (lb)',        baseUnit:'lb',      containerUnit:'crate', unitsPerContainer:20, perishability:'monthly',purchaseCostPerUnit:0.01, salePricePerUnit:0, baseStandingOrderUnits:20, tags:[]}
  ],
  blacksmithing: [
    {key:'iron',     label:'Iron Stock',       baseUnit:'ingot', containerUnit:'crate', unitsPerContainer:10, perishability:'monthly', purchaseCostPerUnit:0.40, salePricePerUnit:0.80, baseStandingOrderUnits:10, tags:[]},
    {key:'steel',    label:'Steel Stock',      baseUnit:'billet',containerUnit:'crate', unitsPerContainer:10, perishability:'monthly', purchaseCostPerUnit:0.60, salePricePerUnit:1.10, baseStandingOrderUnits:10, tags:[]},
    {key:'coal',     label:'Coal',             baseUnit:'sack',  containerUnit:'pallet',unitsPerContainer:10, perishability:'monthly', purchaseCostPerUnit:0.15, salePricePerUnit:0.30, baseStandingOrderUnits:10, tags:[]},
    {key:'charcoal', label:'Charcoal',         baseUnit:'sack',  containerUnit:'pallet',unitsPerContainer:10, perishability:'monthly', purchaseCostPerUnit:0.12, salePricePerUnit:0.24, baseStandingOrderUnits:10, tags:[]},
    {key:'flux',     label:'Flux',             baseUnit:'bag',   containerUnit:'crate', unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.10, salePricePerUnit:0.20, baseStandingOrderUnits:10, tags:[]},
    {key:'nails',    label:'Nails (hundred)',  baseUnit:'hundred',containerUnit:'box', unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.05, salePricePerUnit:0.12, baseStandingOrderUnits:10, tags:[]},
    {key:'horseshoe',label:'Horseshoes (set)', baseUnit:'set',   containerUnit:'box',  unitsPerContainer:6,  perishability:'yearly',  purchaseCostPerUnit:0.20, salePricePerUnit:0.45, baseStandingOrderUnits:6,  tags:[]},
    {key:'oil',      label:'Quench Oil',       baseUnit:'jar',   containerUnit:'crate', unitsPerContainer:12, perishability:'yearly',  purchaseCostPerUnit:0.06, salePricePerUnit:0.12, baseStandingOrderUnits:12, tags:[]},
    {key:'tongs',    label:'Tongs (pair)',     baseUnit:'pair',  containerUnit:'crate', unitsPerContainer:6,  perishability:'yearly',  purchaseCostPerUnit:0.30, salePricePerUnit:0.70, baseStandingOrderUnits:4,  tags:[]},
    {key:'whetstone',label:'Whetstone',        baseUnit:'stone', containerUnit:'box',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.08, salePricePerUnit:0.16, baseStandingOrderUnits:10, tags:[]}
  ],
  apothecary: [
    {key:'herb_basil',   label:'Basil (bundle)',    baseUnit:'bundle', containerUnit:'chest', unitsPerContainer:20, perishability:'monthly', purchaseCostPerUnit:0.02, salePricePerUnit:0.04, baseStandingOrderUnits:20, tags:[]},
    {key:'herb_mint',    label:'Mint (bundle)',     baseUnit:'bundle', containerUnit:'chest', unitsPerContainer:20, perishability:'monthly', purchaseCostPerUnit:0.02, salePricePerUnit:0.04, baseStandingOrderUnits:20, tags:[]},
    {key:'herb_sage',    label:'Sage (bundle)',     baseUnit:'bundle', containerUnit:'chest', unitsPerContainer:20, perishability:'monthly', purchaseCostPerUnit:0.02, salePricePerUnit:0.04, baseStandingOrderUnits:20, tags:[]},
    {key:'herb_lav',     label:'Lavender (bundle)', baseUnit:'bundle', containerUnit:'chest', unitsPerContainer:20, perishability:'monthly', purchaseCostPerUnit:0.03, salePricePerUnit:0.06, baseStandingOrderUnits:16, tags:[]},
    {key:'herb_aloes',   label:'Aloes (bundle)',    baseUnit:'bundle', containerUnit:'chest', unitsPerContainer:20, perishability:'monthly', purchaseCostPerUnit:0.03, salePricePerUnit:0.06, baseStandingOrderUnits:16, tags:[]},
    {key:'herb_yarrow',  label:'Yarrow (bundle)',   baseUnit:'bundle', containerUnit:'chest', unitsPerContainer:20, perishability:'monthly', purchaseCostPerUnit:0.03, salePricePerUnit:0.06, baseStandingOrderUnits:16, tags:[]},
    {key:'salve',        label:'Healing Salve',     baseUnit:'jar',    containerUnit:'crate', unitsPerContainer:12, perishability:'yearly',  purchaseCostPerUnit:0.12, salePricePerUnit:0.24, baseStandingOrderUnits:12, tags:[]},
    {key:'bandage',      label:'Bandages',          baseUnit:'roll',   containerUnit:'box',   unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:20, tags:[]},
    {key:'tonic',        label:'Tonic (phial)',     baseUnit:'phial',  containerUnit:'case',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.10, salePricePerUnit:0.22, baseStandingOrderUnits:10, tags:[]},
    {key:'poultice',     label:'Poultice',          baseUnit:'pack',   containerUnit:'box',   unitsPerContainer:10, perishability:'monthly', purchaseCostPerUnit:0.08, salePricePerUnit:0.18, baseStandingOrderUnits:10, tags:[]}
  ],
  general: [
    {key:'rope',     label:'Rope (50ft)',   baseUnit:'coil', containerUnit:'bundle', unitsPerContainer:5,  perishability:'yearly',  purchaseCostPerUnit:0.25, salePricePerUnit:0.50, baseStandingOrderUnits:5,  tags:[]},
    {key:'oil_lamp', label:'Lamp Oil (flask)',baseUnit:'flask',containerUnit:'crate',unitsPerContainer:12, perishability:'yearly',  purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:12, tags:[]},
    {key:'torch',    label:'Torch',          baseUnit:'unit',containerUnit:'bundle',unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.02, salePricePerUnit:0.05, baseStandingOrderUnits:20, tags:[]},
    {key:'soap',     label:'Soap',           baseUnit:'bar', containerUnit:'crate', unitsPerContainer:20, perishability:'yearly',  purchaseCostPerUnit:0.01, salePricePerUnit:0.03, baseStandingOrderUnits:20, tags:[]},
    {key:'bucket',   label:'Bucket',         baseUnit:'unit',containerUnit:'stack', unitsPerContainer:8,  perishability:'yearly',  purchaseCostPerUnit:0.06, salePricePerUnit:0.12, baseStandingOrderUnits:8,  tags:[]},
    {key:'pot',      label:'Iron Pot',       baseUnit:'unit',containerUnit:'stack', unitsPerContainer:6,  perishability:'yearly',  purchaseCostPerUnit:0.25, salePricePerUnit:0.55, baseStandingOrderUnits:4,  tags:[]},
    {key:'cloth',    label:'Cloth (yd)',     baseUnit:'yard',containerUnit:'bolt',  unitsPerContainer:20, perishability:'yearly',  purchaseCostPerUnit:0.03, salePricePerUnit:0.08, baseStandingOrderUnits:20, tags:[]},
    {key:'needle',   label:'Needles',        baseUnit:'dozen',containerUnit:'box',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.02, salePricePerUnit:0.05, baseStandingOrderUnits:10, tags:[]},
    {key:'salt',     label:'Salt (lb)',      baseUnit:'lb',  containerUnit:'sack',  unitsPerContainer:20, perishability:'yearly',  purchaseCostPerUnit:0.01, salePricePerUnit:0.03, baseStandingOrderUnits:20, tags:[]},
    {key:'bucket_lid',label:'Bucket Lids',   baseUnit:'pair',containerUnit:'box',   unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.01, salePricePerUnit:0.03, baseStandingOrderUnits:10, tags:[]}
  ],
  scriptorium: [
    {key:'ink_black', label:'Ink (black)',  baseUnit:'bottle', containerUnit:'case', unitsPerContainer:12, perishability:'yearly', purchaseCostPerUnit:0.10, salePricePerUnit:0.20, baseStandingOrderUnits:12, tags:[]},
    {key:'ink_red',   label:'Ink (red)',    baseUnit:'bottle', containerUnit:'case', unitsPerContainer:12, perishability:'yearly', purchaseCostPerUnit:0.12, salePricePerUnit:0.24, baseStandingOrderUnits:12, tags:[]},
    {key:'quills',    label:'Quills',       baseUnit:'dozen', containerUnit:'box',  unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10, tags:[]},
    {key:'parch',     label:'Parchment',    baseUnit:'quire', containerUnit:'bale', unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.10, salePricePerUnit:0.20, baseStandingOrderUnits:10, tags:[]},
    {key:'vellum',    label:'Vellum',       baseUnit:'sheet', containerUnit:'bale', unitsPerContainer:20, perishability:'yearly', purchaseCostPerUnit:0.08, salePricePerUnit:0.18, baseStandingOrderUnits:20, tags:[]},
    {key:'wax',       label:'Sealing Wax',  baseUnit:'stick', containerUnit:'box',  unitsPerContainer:20, perishability:'yearly', purchaseCostPerUnit:0.02, salePricePerUnit:0.05, baseStandingOrderUnits:20, tags:[]},
    {key:'sand',      label:'Blotting Sand',baseUnit:'jar',   containerUnit:'crate',unitsPerContainer:12, perishability:'yearly', purchaseCostPerUnit:0.02, salePricePerUnit:0.05, baseStandingOrderUnits:12, tags:[]},
    {key:'twine',     label:'Binding Twine',baseUnit:'roll',  containerUnit:'box',  unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.02, salePricePerUnit:0.05, baseStandingOrderUnits:10, tags:[]},
    {key:'leather',   label:'Cover Leather',baseUnit:'sheet', containerUnit:'stack',unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.12, salePricePerUnit:0.24, baseStandingOrderUnits:6,  tags:[]},
    {key:'goldleaf',  label:'Gold Leaf',    baseUnit:'sheet', containerUnit:'book', unitsPerContainer:20, perishability:'yearly', purchaseCostPerUnit:0.20, salePricePerUnit:0.40, baseStandingOrderUnits:4,  tags:[]}
  ],
  stables: [
    {key:'oats',      label:'Oats (sack)',   baseUnit:'kg',  containerUnit:'sack',   unitsPerContainer:50, perishability:'monthly', purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:50, tags:[]},
    {key:'hay',       label:'Hay',           baseUnit:'bale',containerUnit:'stack',  unitsPerContainer:10, perishability:'weekly',  purchaseCostPerUnit:0.03, salePricePerUnit:0, baseStandingOrderUnits:20, tags:[]},
    {key:'straw',     label:'Straw',         baseUnit:'bale',containerUnit:'stack',  unitsPerContainer:10, perishability:'weekly',  purchaseCostPerUnit:0.02, salePricePerUnit:0, baseStandingOrderUnits:20, tags:[]},
    {key:'tack',      label:'Tack & Tackles',baseUnit:'set', containerUnit:'box',    unitsPerContainer:6,  perishability:'yearly',  purchaseCostPerUnit:0.40, salePricePerUnit:0.90, baseStandingOrderUnits:4, tags:[]},
    {key:'shoes',     label:'Horseshoes',    baseUnit:'set', containerUnit:'box',    unitsPerContainer:6,  perishability:'yearly',  purchaseCostPerUnit:0.20, salePricePerUnit:0.45, baseStandingOrderUnits:4, tags:[]},
    {key:'liniment',  label:'Liniment',      baseUnit:'bottle',containerUnit:'case', unitsPerContainer:12, perishability:'yearly',  purchaseCostPerUnit:0.06, salePricePerUnit:0.14, baseStandingOrderUnits:6, tags:[]},
    {key:'brush',     label:'Grooming Brush',baseUnit:'unit', containerUnit:'box',   unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.05, salePricePerUnit:0.12, baseStandingOrderUnits:6, tags:[]},
    {key:'bucket',    label:'Stable Bucket', baseUnit:'unit', containerUnit:'stack', unitsPerContainer:8,  perishability:'yearly',  purchaseCostPerUnit:0.06, salePricePerUnit:0.12, baseStandingOrderUnits:6, tags:[]},
    {key:'blanket',   label:'Horse Blanket', baseUnit:'unit', containerUnit:'stack', unitsPerContainer:6,  perishability:'yearly',  purchaseCostPerUnit:0.20, salePricePerUnit:0.45, baseStandingOrderUnits:4, tags:[]},
    {key:'pitchfork', label:'Pitchfork',     baseUnit:'unit', containerUnit:'stack', unitsPerContainer:6,  perishability:'yearly',  purchaseCostPerUnit:0.12, salePricePerUnit:0.28, baseStandingOrderUnits:4, tags:[]}
  ],
  temple: [
    {key:'incense',   label:'Incense',        baseUnit:'bundle',containerUnit:'chest',unitsPerContainer:20, perishability:'monthly', purchaseCostPerUnit:0.05, salePricePerUnit:0.10, baseStandingOrderUnits:20, tags:[]},
    {key:'candles',   label:'Candles',        baseUnit:'dozen', containerUnit:'box',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10, tags:[]},
    {key:'holywater', label:'Holy Water',     baseUnit:'phial', containerUnit:'case', unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.30, salePricePerUnit:0.60, baseStandingOrderUnits:6,  tags:[]},
    {key:'offering',  label:'Offering Bowls', baseUnit:'unit',  containerUnit:'box',  unitsPerContainer:6,  perishability:'yearly',  purchaseCostPerUnit:0.10, salePricePerUnit:0.20, baseStandingOrderUnits:4,  tags:[]},
    {key:'robes',     label:'Robes (cloth)',  baseUnit:'set',   containerUnit:'box',  unitsPerContainer:6,  perishability:'yearly',  purchaseCostPerUnit:0.30, salePricePerUnit:0.60, baseStandingOrderUnits:4,  tags:[]},
    {key:'bells',     label:'Sanctuary Bells',baseUnit:'unit',  containerUnit:'box',  unitsPerContainer:4,  perishability:'yearly',  purchaseCostPerUnit:0.40, salePricePerUnit:0.85, baseStandingOrderUnits:2,  tags:[]},
    {key:'wine',      label:'Sacramental Wine',baseUnit:'glass',containerUnit:'crate',unitsPerContainer:60, perishability:'monthly', purchaseCostPerUnit:0.06, salePricePerUnit:0,   baseStandingOrderUnits:30, tags:['wine']},
    {key:'soap',      label:'Purifying Soap', baseUnit:'bar',   containerUnit:'crate',unitsPerContainer:20, perishability:'yearly',  purchaseCostPerUnit:0.01, salePricePerUnit:0.03, baseStandingOrderUnits:12, tags:[]},
    {key:'dye',       label:'Vestment Dyes',  baseUnit:'jar',   containerUnit:'crate',unitsPerContainer:12, perishability:'yearly',  purchaseCostPerUnit:0.03, salePricePerUnit:0.07, baseStandingOrderUnits:6,  tags:[]},
    {key:'scroll',    label:'Prayer Scrolls', baseUnit:'sheet', containerUnit:'bale', unitsPerContainer:20, perishability:'yearly',  purchaseCostPerUnit:0.06, salePricePerUnit:0.14, baseStandingOrderUnits:10, tags:[]}
  ],
  theatre: [
    {key:'costumes',  label:'Costumes',     baseUnit:'set',   containerUnit:'trunk', unitsPerContainer:5,  perishability:'yearly', purchaseCostPerUnit:0.80, salePricePerUnit:1.60, baseStandingOrderUnits:2, tags:[]},
    {key:'masks',     label:'Masks',        baseUnit:'unit',  containerUnit:'box',   unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.10, salePricePerUnit:0.22, baseStandingOrderUnits:6, tags:[]},
    {key:'makeup',    label:'Stage Makeup', baseUnit:'kit',   containerUnit:'box',   unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.08, salePricePerUnit:0.18, baseStandingOrderUnits:6, tags:[]},
    {key:'wigs',      label:'Wigs',         baseUnit:'unit',  containerUnit:'box',   unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.12, salePricePerUnit:0.26, baseStandingOrderUnits:6, tags:[]},
    {key:'scripts',   label:'Scripts',      baseUnit:'bundle',containerUnit:'box',   unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.06, salePricePerUnit:0.14, baseStandingOrderUnits:6, tags:[]},
    {key:'paint',     label:'Paint (pot)',  baseUnit:'pot',   containerUnit:'crate', unitsPerContainer:12, perishability:'yearly', purchaseCostPerUnit:0.05, salePricePerUnit:0.12, baseStandingOrderUnits:6, tags:[]},
    {key:'canvas',    label:'Canvas',       baseUnit:'yard',  containerUnit:'bolt',  unitsPerContainer:20, perishability:'yearly', purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10,tags:[]},
    {key:'rope',      label:'Staging Rope', baseUnit:'coil',  containerUnit:'bundle',unitsPerContainer:5,  perishability:'yearly', purchaseCostPerUnit:0.25, salePricePerUnit:0.50, baseStandingOrderUnits:3, tags:[]},
    {key:'nails',     label:'Stage Nails',  baseUnit:'hundred',containerUnit:'box', unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.05, salePricePerUnit:0.12, baseStandingOrderUnits:6, tags:[]},
    {key:'lanterns',  label:'Lanterns',     baseUnit:'unit',  containerUnit:'box',   unitsPerContainer:6,  perishability:'yearly', purchaseCostPerUnit:0.20, salePricePerUnit:0.45, baseStandingOrderUnits:3, tags:[]}
  ],
  haberdashery: [
    {key:'thread', label:'Thread', baseUnit:'spool',containerUnit:'box', unitsPerContainer:20, perishability:'yearly', purchaseCostPerUnit:0.03, salePricePerUnit:0.09, baseStandingOrderUnits:20, tags:[]},
    {key:'buttons',label:'Buttons',baseUnit:'dozen',containerUnit:'box', unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.05, salePricePerUnit:0.15, baseStandingOrderUnits:10, tags:[]},
    {key:'needles',label:'Needles',baseUnit:'dozen',containerUnit:'box', unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.02, salePricePerUnit:0.05, baseStandingOrderUnits:10, tags:[]},
    {key:'thimble',label:'Thimbles',baseUnit:'unit',containerUnit:'box',unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.02, salePricePerUnit:0.05, baseStandingOrderUnits:10, tags:[]},
    {key:'ribbon', label:'Ribbon', baseUnit:'yard',containerUnit:'bolt',unitsPerContainer:20, perishability:'yearly', purchaseCostPerUnit:0.03, salePricePerUnit:0.08, baseStandingOrderUnits:20, tags:[]},
    {key:'lace',   label:'Lace',   baseUnit:'yard',containerUnit:'bolt',unitsPerContainer:20, perishability:'yearly', purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:20, tags:[]},
    {key:'buckles',label:'Buckles',baseUnit:'set', containerUnit:'box', unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10, tags:[]},
    {key:'clasps', label:'Clasps', baseUnit:'set', containerUnit:'box', unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10, tags:[]},
    {key:'hatblk', label:'Hat Blanks', baseUnit:'unit', containerUnit:'box', unitsPerContainer:6, perishability:'yearly', purchaseCostPerUnit:0.20, salePricePerUnit:0.45, baseStandingOrderUnits:4, tags:[]},
    {key:'dyes',   label:'Dyes', baseUnit:'jar', containerUnit:'crate', unitsPerContainer:12, perishability:'yearly', purchaseCostPerUnit:0.03, salePricePerUnit:0.07, baseStandingOrderUnits:6, tags:[]}
  ],
  weaponsmithing: [
    {key:'steel',   label:'Steel Billets',  baseUnit:'billet', containerUnit:'crate', unitsPerContainer:10, perishability:'monthly', purchaseCostPerUnit:0.60, salePricePerUnit:1.20, baseStandingOrderUnits:10, tags:[]},
    {key:'leather', label:'Leather Wraps',  baseUnit:'hide',   containerUnit:'bale',  unitsPerContainer:6,  perishability:'monthly', purchaseCostPerUnit:0.40, salePricePerUnit:0.90, baseStandingOrderUnits:6,  tags:[]},
    {key:'wood',    label:'Spear Wood',     baseUnit:'shaft',  containerUnit:'bundle',unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.05, salePricePerUnit:0.12, baseStandingOrderUnits:10, tags:[]},
    {key:'bowstave',label:'Bowstaves',      baseUnit:'stave',  containerUnit:'bundle',unitsPerContainer:6,  perishability:'yearly',  purchaseCostPerUnit:0.20, salePricePerUnit:0.45, baseStandingOrderUnits:4,  tags:[]},
    {key:'glue',    label:'Hide Glue',      baseUnit:'jar',    containerUnit:'crate', unitsPerContainer:12, perishability:'yearly',  purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:6,  tags:[]},
    {key:'resin',   label:'Resin',          baseUnit:'jar',    containerUnit:'crate', unitsPerContainer:12, perishability:'yearly',  purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:6,  tags:[]},
    {key:'rivets',  label:'Rivets',         baseUnit:'hundred',containerUnit:'box',   unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.05, salePricePerUnit:0.12, baseStandingOrderUnits:10, tags:[]},
    {key:'whetstone',label:'Whetstones',    baseUnit:'stone',  containerUnit:'box',   unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.08, salePricePerUnit:0.16, baseStandingOrderUnits:10, tags:[]},
    {key:'oil',     label:'Quench Oil',     baseUnit:'jar',    containerUnit:'crate', unitsPerContainer:12, perishability:'yearly',  purchaseCostPerUnit:0.06, salePricePerUnit:0.12, baseStandingOrderUnits:12, tags:[]},
    {key:'guards',  label:'Crossguards',    baseUnit:'unit',   containerUnit:'box',   unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.12, salePricePerUnit:0.26, baseStandingOrderUnits:6,  tags:[]}
  ],
  armorer: [
    {key:'steel_plate',label:'Steel Plates', baseUnit:'plate', containerUnit:'crate', unitsPerContainer:8,  perishability:'yearly',  purchaseCostPerUnit:0.60, salePricePerUnit:1.20, baseStandingOrderUnits:8, tags:[]},
    {key:'mail',       label:'Mail Links',   baseUnit:'lb',    containerUnit:'crate', unitsPerContainer:20, perishability:'yearly',  purchaseCostPerUnit:0.50, salePricePerUnit:1.00, baseStandingOrderUnits:10,tags:[]},
    {key:'leather',    label:'Cured Leather',baseUnit:'hide',  containerUnit:'bale',  unitsPerContainer:6,  perishability:'monthly', purchaseCostPerUnit:0.40, salePricePerUnit:0.90, baseStandingOrderUnits:6, tags:[]},
    {key:'padding',    label:'Gambeson Padding',baseUnit:'yard',containerUnit:'bolt', unitsPerContainer:20, perishability:'yearly',  purchaseCostPerUnit:0.05, salePricePerUnit:0.12, baseStandingOrderUnits:10,tags:[]},
    {key:'buckles',    label:'Buckles',      baseUnit:'set',   containerUnit:'box',   unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10,tags:[]},
    {key:'rivets',     label:'Rivets',       baseUnit:'hundred',containerUnit:'box',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.05, salePricePerUnit:0.12, baseStandingOrderUnits:10,tags:[]},
    {key:'dye',        label:'Dye',          baseUnit:'jar',   containerUnit:'crate', unitsPerContainer:12, perishability:'yearly',  purchaseCostPerUnit:0.03, salePricePerUnit:0.07, baseStandingOrderUnits:6, tags:[]},
    {key:'wax',        label:'Wax',          baseUnit:'block', containerUnit:'box',   unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.03, salePricePerUnit:0.07, baseStandingOrderUnits:10,tags:[]},
    {key:'tools',      label:'Armorer Tools',baseUnit:'set',   containerUnit:'box',   unitsPerContainer:4,  perishability:'yearly',  purchaseCostPerUnit:0.60, salePricePerUnit:1.30, baseStandingOrderUnits:2, tags:[]},
    {key:'polish',     label:'Metal Polish', baseUnit:'jar',   containerUnit:'crate', unitsPerContainer:12, perishability:'yearly',  purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:6, tags:[]}
  ],
  cobbler: [
    {key:'leather',label:'Leather (hide)',   baseUnit:'hide', containerUnit:'bale', unitsPerContainer:6,  perishability:'monthly', purchaseCostPerUnit:0.40, salePricePerUnit:0.90, baseStandingOrderUnits:6, tags:[]},
    {key:'thread', label:'Waxed Thread',     baseUnit:'spool',containerUnit:'box',  unitsPerContainer:20, perishability:'yearly',  purchaseCostPerUnit:0.03, salePricePerUnit:0.09, baseStandingOrderUnits:20,tags:[]},
    {key:'tacks',  label:'Tacks',            baseUnit:'hundred',containerUnit:'box',unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10,tags:[]},
    {key:'soles',  label:'Soles',            baseUnit:'pair', containerUnit:'box',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.10, salePricePerUnit:0.22, baseStandingOrderUnits:10,tags:[]},
    {key:'dye',    label:'Leather Dye',      baseUnit:'jar',  containerUnit:'crate',unitsPerContainer:12, perishability:'yearly',  purchaseCostPerUnit:0.03, salePricePerUnit:0.07, baseStandingOrderUnits:6, tags:[]},
    {key:'wax',    label:'Wax',              baseUnit:'block',containerUnit:'box',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.03, salePricePerUnit:0.07, baseStandingOrderUnits:10,tags:[]},
    {key:'laces',  label:'Laces',            baseUnit:'pair', containerUnit:'box',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.02, salePricePerUnit:0.05, baseStandingOrderUnits:10,tags:[]},
    {key:'lasts',  label:'Shoe Lasts',       baseUnit:'unit', containerUnit:'box',  unitsPerContainer:6,  perishability:'yearly',  purchaseCostPerUnit:0.20, salePricePerUnit:0.45, baseStandingOrderUnits:4, tags:[]},
    {key:'awls',   label:'Awls',             baseUnit:'unit', containerUnit:'box',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:6, tags:[]},
    {key:'buckles',label:'Buckles',          baseUnit:'set',  containerUnit:'box',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10,tags:[]}
  ],
  cooper: [
    {key:'staves', label:'Barrel Staves', baseUnit:'set',  containerUnit:'bundle', unitsPerContainer:8, perishability:'yearly', purchaseCostPerUnit:0.50, salePricePerUnit:1.05, baseStandingOrderUnits:8, tags:[]},
    {key:'hoops',  label:'Iron Hoops',   baseUnit:'set',  containerUnit:'bundle', unitsPerContainer:10,perishability:'yearly', purchaseCostPerUnit:0.30, salePricePerUnit:0.70, baseStandingOrderUnits:10,tags:[]},
    {key:'rivets', label:'Rivets',       baseUnit:'hundred',containerUnit:'box', unitsPerContainer:10,perishability:'yearly', purchaseCostPerUnit:0.05, salePricePerUnit:0.12, baseStandingOrderUnits:10,tags:[]},
    {key:'pitch',  label:'Pitch',        baseUnit:'block',containerUnit:'box',   unitsPerContainer:10,perishability:'yearly', purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10,tags:[]},
    {key:'wax',    label:'Wax',          baseUnit:'block',containerUnit:'box',   unitsPerContainer:10,perishability:'yearly', purchaseCostPerUnit:0.03, salePricePerUnit:0.07, baseStandingOrderUnits:10,tags:[]},
    {key:'plugs',  label:'Bungs/Plugs',  baseUnit:'dozen',containerUnit:'box',   unitsPerContainer:10,perishability:'yearly', purchaseCostPerUnit:0.03, salePricePerUnit:0.07, baseStandingOrderUnits:10,tags:[]},
    {key:'lids',   label:'Lids',         baseUnit:'unit', containerUnit:'box',   unitsPerContainer:10,perishability:'yearly', purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10,tags:[]},
    {key:'rope',   label:'Hoisting Rope',baseUnit:'coil', containerUnit:'bundle',unitsPerContainer:5, perishability:'yearly',  purchaseCostPerUnit:0.25, salePricePerUnit:0.50, baseStandingOrderUnits:3, tags:[]},
    {key:'oil',    label:'Tool Oil',     baseUnit:'jar',  containerUnit:'crate', unitsPerContainer:12,perishability:'yearly', purchaseCostPerUnit:0.02, salePricePerUnit:0.05, baseStandingOrderUnits:6, tags:[]},
    {key:'tools',  label:'Cooper Tools', baseUnit:'set',  containerUnit:'box',   unitsPerContainer:4, perishability:'yearly',  purchaseCostPerUnit:0.60, salePricePerUnit:1.30, baseStandingOrderUnits:2, tags:[]}
  ],
  adventurers: [
    {key:'rope',    label:'Rope (50ft)',  baseUnit:'coil', containerUnit:'bundle',unitsPerContainer:5, perishability:'yearly', purchaseCostPerUnit:0.25, salePricePerUnit:0.50, baseStandingOrderUnits:5, tags:[]},
    {key:'rations', label:'Trail Rations', baseUnit:'day', containerUnit:'box',   unitsPerContainer:20,perishability:'monthly',purchaseCostPerUnit:0.10, salePricePerUnit:0.20, baseStandingOrderUnits:20,tags:[]},
    {key:'torches', label:'Torches',       baseUnit:'unit',containerUnit:'bundle',unitsPerContainer:10,perishability:'yearly', purchaseCostPerUnit:0.02, salePricePerUnit:0.05, baseStandingOrderUnits:20,tags:[]},
    {key:'pitons',  label:'Pitons',        baseUnit:'dozen',containerUnit:'box',  unitsPerContainer:10,perishability:'yearly', purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10,tags:[]},
    {key:'grapnel', label:'Grapnel Hook',  baseUnit:'unit',containerUnit:'box',   unitsPerContainer:6, perishability:'yearly', purchaseCostPerUnit:0.20, salePricePerUnit:0.45, baseStandingOrderUnits:4, tags:[]},
    {key:'chalk',   label:'Chalk',         baseUnit:'stick',containerUnit:'box',  unitsPerContainer:20,perishability:'yearly', purchaseCostPerUnit:0.01, salePricePerUnit:0.03, baseStandingOrderUnits:20,tags:[]},
    {key:'map',     label:'Maps',          baseUnit:'sheet',containerUnit:'bale', unitsPerContainer:20,perishability:'yearly', purchaseCostPerUnit:0.06, salePricePerUnit:0.14, baseStandingOrderUnits:10,tags:[]},
    {key:'contracts',label:'Contracts',    baseUnit:'sheet',containerUnit:'bale', unitsPerContainer:20,perishability:'yearly', purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10,tags:[]},
    {key:'wax',     label:'Sealing Wax',   baseUnit:'stick',containerUnit:'box',  unitsPerContainer:20,perishability:'yearly', purchaseCostPerUnit:0.02, salePricePerUnit:0.05, baseStandingOrderUnits:20,tags:[]},
    {key:'ink',     label:'Ink',           baseUnit:'bottle',containerUnit:'case',unitsPerContainer:12,perishability:'yearly', purchaseCostPerUnit:0.10, salePricePerUnit:0.20, baseStandingOrderUnits:12,tags:[]}
  ],
  jeweller: [
    {key:'findings', label:'Findings & Wire', baseUnit:'pack',containerUnit:'box', unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.50, salePricePerUnit:1.00, baseStandingOrderUnits:10,tags:[]},
    {key:'gems_raw', label:'Raw Gems',        baseUnit:'piece',containerUnit:'box',unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:1.00, salePricePerUnit:2.20, baseStandingOrderUnits:6, tags:[]},
    {key:'polish',   label:'Polishing Rouge', baseUnit:'jar',  containerUnit:'crate',unitsPerContainer:12,perishability:'yearly', purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:6, tags:[]},
    {key:'loupe',    label:'Loupe',           baseUnit:'unit', containerUnit:'box', unitsPerContainer:6,  perishability:'yearly', purchaseCostPerUnit:0.25, salePricePerUnit:0.55, baseStandingOrderUnits:2, tags:[]},
    {key:'tweezers', label:'Tweezers',        baseUnit:'unit', containerUnit:'box', unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:6, tags:[]},
    {key:'cases',    label:'Display Cases',   baseUnit:'unit', containerUnit:'box', unitsPerContainer:4,  perishability:'yearly', purchaseCostPerUnit:0.40, salePricePerUnit:0.85, baseStandingOrderUnits:2, tags:[]},
    {key:'chains',   label:'Chains',          baseUnit:'unit', containerUnit:'box', unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.20, salePricePerUnit:0.45, baseStandingOrderUnits:6, tags:[]},
    {key:'clasps',   label:'Clasps',          baseUnit:'set',  containerUnit:'box', unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10,tags:[]},
    {key:'solder',   label:'Jeweler‚Äôs Solder',baseUnit:'stick',containerUnit:'box', unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.06, salePricePerUnit:0.14, baseStandingOrderUnits:6, tags:[]},
    {key:'polcloth', label:'Polish Cloths',   baseUnit:'dozen',containerUnit:'box', unitsPerContainer:10, perishability:'yearly', purchaseCostPerUnit:0.02, salePricePerUnit:0.05, baseStandingOrderUnits:10,tags:[]}
  ],
  magicshop: [
    {key:'essences', label:'Arcane Essences', baseUnit:'phial', containerUnit:'case', unitsPerContainer:10, perishability:'monthly', purchaseCostPerUnit:1.00, salePricePerUnit:2.00, baseStandingOrderUnits:10, tags:[]},
    {key:'powders',  label:'Mystic Powders',  baseUnit:'phial', containerUnit:'case', unitsPerContainer:10, perishability:'monthly', purchaseCostPerUnit:0.60, salePricePerUnit:1.30, baseStandingOrderUnits:10, tags:[]},
    {key:'inks',     label:'Enchanted Ink',   baseUnit:'bottle',containerUnit:'case', unitsPerContainer:12, perishability:'monthly', purchaseCostPerUnit:0.40, salePricePerUnit:0.90, baseStandingOrderUnits:12, tags:[]},
    {key:'paper',    label:'Runic Paper',     baseUnit:'quire', containerUnit:'bale', unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.20, salePricePerUnit:0.45, baseStandingOrderUnits:10, tags:[]},
    {key:'crystals', label:'Focus Crystals',  baseUnit:'unit',  containerUnit:'box',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.80, salePricePerUnit:1.70, baseStandingOrderUnits:4,  tags:[]},
    {key:'candles',  label:'Ritual Candles',  baseUnit:'dozen', containerUnit:'box',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.04, salePricePerUnit:0.10, baseStandingOrderUnits:10, tags:[]},
    {key:'chalk',    label:'Arcane Chalk',    baseUnit:'stick', containerUnit:'box',  unitsPerContainer:20, perishability:'yearly',  purchaseCostPerUnit:0.02, salePricePerUnit:0.05, baseStandingOrderUnits:20, tags:[]},
    {key:'salts',    label:'Purified Salts',  baseUnit:'jar',   containerUnit:'crate',unitsPerContainer:12, perishability:'yearly',  purchaseCostPerUnit:0.03, salePricePerUnit:0.07, baseStandingOrderUnits:6,  tags:[]},
    {key:'herbs',    label:'Occult Herbs',    baseUnit:'bundle',containerUnit:'chest',unitsPerContainer:20, perishability:'monthly', purchaseCostPerUnit:0.05, salePricePerUnit:0.12, baseStandingOrderUnits:16, tags:[]},
    {key:'baubles',  label:'Spell Baubles',   baseUnit:'unit',  containerUnit:'box',  unitsPerContainer:10, perishability:'yearly',  purchaseCostPerUnit:0.20, salePricePerUnit:0.45, baseStandingOrderUnits:6,  tags:[]}
  ]
};

// Compose stock for a business from library categories and ensure minimum count
function composeStock(cats, minNeeded){
  var i, j, out=[], seen={}, cat, arr, it;
  for (i=0;i<cats.length;i++){
    cat = STOCK_LIB[cats[i]]||[];
    for (j=0;j<cat.length;j++){
      it = cat[j];
      if (!seen[it.key]){
        seen[it.key]=1;
        out.push(_clone(it));
      }
    }
  }
  // pad with general supplies if still short
  while (out.length < (minNeeded||10) && STOCK_LIB.general && STOCK_LIB.general.length){
    for (j=0;j<STOCK_LIB.general.length && out.length<(minNeeded||10); j++){
      it = STOCK_LIB.general[j];
      if (!seen[it.key]){ seen[it.key]=1; out.push(_clone(it)); }
    }
    break;
  }
  return out;
}

// 3A) Add NEW business types (20+)
var EXTRA_TYPES = {
  "Adventurers Guild": { gp:3.0, var:0.35, stock: composeStock(['adventurers','scriptorium','general'], 10) },
  "Haberdashery":      { gp:2.4, var:0.30, stock: composeStock(['haberdashery'], 10) },
  "Weaponsmith":       { gp:4.8, var:0.25, stock: composeStock(['weaponsmithing','blacksmithing'], 10) },
  "Armorer":           { gp:4.5, var:0.25, stock: composeStock(['armorer','blacksmithing'], 10) },
  "Cobbler":           { gp:2.1, var:0.25, stock: composeStock(['cobbler'], 10) },
  "Cooper":            { gp:2.4, var:0.25, stock: composeStock(['cooper','general'], 10) },
  "Brewery":           { gp:3.2, var:0.30, stock: composeStock(['drinks','bakery','general'], 10) },
  "Bakery":            { gp:2.8, var:0.30, stock: composeStock(['bakery'], 10) },
  "Butcher":           { gp:2.6, var:0.30, stock: composeStock(['meats'], 10) },
  "Fishmonger":        { gp:2.6, var:0.35, stock: composeStock(['fish','general'], 10) },
  "Carpenter":         { gp:3.0, var:0.25, stock: composeStock(['general','blacksmithing'], 10) },
  "Tailor":            { gp:2.5, var:0.30, stock: composeStock(['haberdashery','general'], 10) },
  "Chandlery":         { gp:2.2, var:0.25, stock: composeStock(['temple','general'], 10) }, // candles/soap/oils focus
  "Glassblower":       { gp:3.0, var:0.30, stock: composeStock(['general'], 10) },
  "Potter":            { gp:2.4, var:0.30, stock: composeStock(['general'], 10) },
  "Bookseller":        { gp:2.3, var:0.25, stock: composeStock(['scriptorium','general'], 10) },
  "Perfumer":          { gp:3.0, var:0.35, stock: composeStock(['apothecary','temple'], 10) }
};

// Merge into TYPE_INCOME
_.each(EXTRA_TYPES, function(v, k){ TYPE_INCOME[k] = v; });

// 3B) Expand EXISTING types to reach ‚â•10 stock items and split meats
function extendStock(type, cats){
  if (!TYPE_INCOME[type]) return;
  var have = (TYPE_INCOME[type].stock||[]), need = Math.max(0, 10 - have.length);
  if (need>0){
    var more = composeStock(cats, need);
    // dedupe by key against current stock
    var seen={}, i;
    for (i=0;i<have.length;i++){ seen[have[i].key]=1; }
    for (i=0;i<more.length;i++){ if (!seen[more[i].key]) have.push(more[i]); }
    TYPE_INCOME[type].stock = have;
  }
}
// Food & drink businesses: make sure meats are granular
extendStock('Tavern',      ['meats','drinks','bakery','vegsalad']);
extendStock('Inn',         ['meats','drinks','bakery','vegsalad']);
extendStock('Restaurant',  ['meats','drinks','bakery','vegsalad']); // already 10+, this just adds variety if short
extendStock('Caf√©',        ['cafe','bakery']);
extendStock('Blacksmith',  ['blacksmithing']);
extendStock('Apothecary',  ['apothecary']);
extendStock("Alchemist's Lab", ['magicshop','apothecary']);
extendStock('Courier Service', ['general','scriptorium']);
extendStock('Jeweller',    ['jeweller']);
extendStock('Magic Shop',  ['magicshop','scriptorium']);
extendStock('Scriptorium', ['scriptorium']);
extendStock('Stables',     ['stables']);
extendStock('Temple',      ['temple']);
extendStock('Theatre',     ['theatre']);
extendStock('General Store',['general','bakery','vegsalad']); // becomes a true generalist

/* ===== end of library & extensions ===== */


function perishDays(p){
  if (p==='weekly') return 10;
  if (p==='monthly') return 30;
  if (p==='yearly') return 365;
  return null; // indefinite
}
function standingScale(biz){
  var sizeCfg = SIZE[biz.size] || SIZE.small;
  var rep = clamp((biz.reputation||0), -50, 100);
  var repMult = 1 + (rep/100)*0.5;
  var s = (sizeCfg.baseMult||1) * repMult;
  if (s<0.5) s=0.5; if (s>3.0) s=3.0;
  return s;
}

function coinsToGp(c){
  if (!c) return 0;
  // pp=10gp, gp=1gp, ep=0.5gp, sp=0.1gp, cp=0.01gp
  return (c.pp||0)*10 + (c.gp||0) + (c.ep||0)*0.5 + (c.sp||0)*0.1 + (c.cp||0)*0.01;
}
function spendFromPurse(biz, amountGp){
  // returns {paidGp, debtAdded}
  if (!biz.cash) biz.cash = {pp:0,gp:0,ep:0,sp:0,cp:0};
  var have = coinsToGp(biz.cash);
  var debt = 0, pay = 0;
  if (have >= amountGp){ pay = amountGp; debt = 0; }
  else { pay = have; debt = amountGp - have; }

  // zero out purse if not enough; otherwise subtract greedily from largest coins down
  function take(n){ // take n gp out of purse greedily
    var remain = n;
    function takeFrom(coin, value){
      var need = Math.floor(remain / value + 1e-9); // greedy number of coins
      var use = Math.min( (biz.cash[coin]||0), need );
      biz.cash[coin] = (biz.cash[coin]||0) - use;
      remain -= use*value;
    }
    takeFrom('pp',10);
    takeFrom('gp',1);
    takeFrom('ep',0.5);
    takeFrom('sp',0.1);
    takeFrom('cp',0.01);
    // if rounding dust remains, clear it
    if (remain>1e-6){
      // not enough in correct denominations; just zero purse
      biz.cash = {pp:0,gp:0,ep:0,sp:0,cp:0};
    }
  }

  if (pay>0) take(pay);
  if (debt>0){ biz.debt = (biz.debt||0) + debt; }
  return {paidGp:pay, debtAdded:debt};
}


/* ===== Purchasing helpers (market-aware) ===== */
function getMarketUnitCost(stockItem){
  // If item is linked to market, prefer market price by tag; else use purchaseCostPerUnit
  var base = stockItem.purchaseCostPerUnit || 0;
  if (stockItem.linkedToMarket && stockItem.marketTag && state.BIZ && state.BIZ.market){
    var mk = state.BIZ.market[stockItem.marketTag];
    if (mk && typeof mk.unitPrice === 'number') base = mk.unitPrice;
  }
  return base;
}
function getContainerCost(stockItem){
  return getMarketUnitCost(stockItem) * (stockItem.unitsPerContainer || 1);
}
function convertContainersToUnits(stockItem, containers){
  containers = Math.max(0, parseInt(containers,10)||0);
  return containers * (stockItem.unitsPerContainer||1);
}


/* =========================
   MARKET (brands, age, quality)
   ========================= */
   
   function ensureMarketShape(m){
  // Make sure the market object always has the fields we expect.
  m = m && typeof m==='object' ? m : {};
  if (!isFinite(m.seq)) m.seq = 1;
  if (!m.asof) m.asof = { year:(state.BIZ && state.BIZ.date? state.BIZ.date.year : 1358),
                          month:(state.BIZ && state.BIZ.date? state.BIZ.date.month: 'Hammer') };
  if (!m.skus || typeof m.skus!=='object') m.skus = {};
  if (!m.current || typeof m.current!=='object') m.current = {};
  return m;
}

   
function buildInitialMarket(){
  var m = ensureMarketShape({ seq:1, asof:{year:1358,month:'Hammer'}, skus:{}, current:{} });
  function add(sku){
    m = ensureMarketShape(m);
    var seq = isFinite(m.seq) ? m.seq : 1;
    var id  = 'SKU' + seq;
    m.seq   = seq + 1;

    sku = sku || {};
    sku.id = id;
    if (!isFinite(sku.basePriceGP)) sku.basePriceGP = 0.01;
    if (!sku.baseUnit) sku.baseUnit = 'unit';

    m.skus[id]    = sku;
    m.current[id] = {
      priceGP: fluctuate(sku.basePriceGP, sku.volatility||0.10),
      available: true,
      offerPct: 0
    };
    return id;
  }
  function fluctuate(base, vol){
    var r = (Math.random()*2-1)*vol;
    var out = base*(1+r);
    return +out.toFixed(4);
  }
  // pantry basics
  var BASICS = [
    {name:'Oats (sack)',   type:'oats', baseUnit:'kg',    basePriceGP:0.02, volatility:0.08, tags:['oats']},
    {name:'Wheat Flour',   type:'flour',baseUnit:'kg',    basePriceGP:0.03, volatility:0.08, tags:['flour']},
    {name:'Milk (jug)',    type:'milk', baseUnit:'litre', basePriceGP:0.03, volatility:0.10,tags:['milk','hotdrink']},
    {name:'Butter (pat)',  type:'butter', baseUnit:'pat', basePriceGP:0.02, volatility:0.12,tags:['butter']},
    {name:'Cheese (wedge)',type:'cheese',baseUnit:'wedge',basePriceGP:0.10, volatility:0.12,tags:['cheese']},
    {name:'Egg',           type:'eggs', baseUnit:'egg',   basePriceGP:0.01, volatility:0.12,tags:['eggs']},
    {name:'Beef (lb)',     type:'beef', baseUnit:'lb',    basePriceGP:0.08, volatility:0.15,tags:[]},
    {name:'Pork (lb)',     type:'pork', baseUnit:'lb',    basePriceGP:0.06, volatility:0.15,tags:[]},
    {name:'Fish (lb)',     type:'fish', baseUnit:'lb',    basePriceGP:0.08, volatility:0.18,tags:[]},
    {name:'Bread Loaf',    type:'bread',baseUnit:'loaf',  basePriceGP:0.03, volatility:0.10,tags:['bread']},
    {name:'Vegetables',    type:'veg',  baseUnit:'portion',basePriceGP:0.03,volatility:0.10,tags:['veg']},
    {name:'Lettuce Head',  type:'lettuce', baseUnit:'head', basePriceGP:0.02, volatility:0.12,tags:['salad']},
    {name:'Cucumber',      type:'cucumber',baseUnit:'unit', basePriceGP:0.01, volatility:0.12,tags:['salad']},
    {name:'Tomatoes (lb)', type:'tomato',baseUnit:'lb',   basePriceGP:0.02, volatility:0.15,tags:['salad']},
    {name:'Onions (lb)',   type:'onion', baseUnit:'lb',   basePriceGP:0.01, volatility:0.10,tags:[]},
    {name:'Carrots (lb)',  type:'carrot',baseUnit:'lb',   basePriceGP:0.01, volatility:0.10,tags:[]},
    {name:'Coffee Beans',  type:'coffee',baseUnit:'cup',  basePriceGP:0.06, volatility:0.20,tags:['hotdrink']},
    {name:'Tea Leaves',    type:'tea',   baseUnit:'cup',  basePriceGP:0.04, volatility:0.15,tags:['hotdrink']},
    {name:'Sugar',         type:'sugar', baseUnit:'spoon',basePriceGP:0.01, volatility:0.12,tags:[]},
    {name:'Wrapping Paper',type:'paper', baseUnit:'parcel', basePriceGP:0.005, volatility:0.05,tags:['courier']},
    {name:'String/Twine',  type:'string',baseUnit:'parcel', basePriceGP:0.003, volatility:0.05,tags:['courier']},
    {name:'Wax Seals',     type:'seal',  baseUnit:'seal',   basePriceGP:0.01, volatility:0.05,tags:['courier']}
  ];
  for (var i=0;i<BASICS.length;i++) add({quality:1,age:0,brand:'Common',name:BASICS[i].name,type:BASICS[i].type,baseUnit:BASICS[i].baseUnit,basePriceGP:BASICS[i].basePriceGP,volatility:BASICS[i].volatility,tags:BASICS[i].tags});

  // Extra pantry bits used by extended stock (keeps rush-buys interesting)
  var MORE = [
    {name:'Hay (bale)',      type:'hay',     baseUnit:'bale',  basePriceGP:0.03, volatility:0.08, tags:['stables']},
    {name:'Yeast (pack)',    type:'yeast',   baseUnit:'pack',  basePriceGP:0.02, volatility:0.10, tags:['bakery']},
    {name:'Cocoa (cup)',     type:'cocoa',   baseUnit:'cup',   basePriceGP:0.05, volatility:0.12, tags:['hotdrink']},
    {name:'Horseshoes (set)',type:'shoes',   baseUnit:'set',   basePriceGP:0.20, volatility:0.10, tags:['stables']},
    {name:'Whetstone',       type:'whetstone',baseUnit:'stone', basePriceGP:0.08, volatility:0.10, tags:['smith']},
    {name:'Rope (50ft)',     type:'rope',    baseUnit:'coil',  basePriceGP:0.25, volatility:0.05, tags:['general']}
  ];
  for (var m=0;m<MORE.length;m++) add({quality:1,age:0,brand:'Common',name:MORE[m].name,type:MORE[m].type,baseUnit:MORE[m].baseUnit,basePriceGP:MORE[m].basePriceGP,volatility:MORE[m].volatility,tags:MORE[m].tags});


  // booze generator
  var adj = ['Black-Eyed','Golden','Silver','Fireforged','Misty','Emerald','Ruby','Storm','Old','Laughing','Grim','Velvet','Wolf','Griffin','Wyvern'];
  var noun= ['Orc','Griffin','Dragon','Giant','Raven','Kraken','Sphinx','Minotaur','Lion','Fox','Stag','Harpy','Anchor','Anvil','Oak'];
  function brand(){ return adj[Math.floor(Math.random()*adj.length)]+' '+noun[Math.floor(Math.random()*noun.length)]; }
  function addBeverage(family, base, qualScale, unit){
    for (var k=0;k<8;k++){
      var age = (family==='Mead')?0:(3+Math.floor(Math.random()*18));
      var quality = 1+Math.floor(Math.random()*3); // 1..3
      var price = base * (1 + (quality-1)*qualScale) * (family==='Whiskey'? (1+age/30):1);
      add({ name: family+': '+brand()+(age?(', '+age+'yr'):''), brand:brand(), type:family.toLowerCase(), baseUnit:unit, basePriceGP:price, volatility:0.18, quality:quality, age:age, tags:[family.toLowerCase(),'drink'] });
    }
  }
  addBeverage('Mead', 0.02, 0.30, 'pint');
  addBeverage('Rum',  0.05, 0.35, 'shot');
  addBeverage('Whiskey',0.08,0.40, 'shot');
  addBeverage('Wine', 0.06, 0.30, 'glass');

  return m;
}
function monthlyMarketUpdate(){
  var M = ensureMarketShape(state.BIZ && state.BIZ.market);
  M.asof = {year:state.BIZ.date.year, month:state.BIZ.date.month};
  for (id in M.skus){
    sku = M.skus[id];
    avail = Math.random()< ( /whiskey|rum|wine/.test(sku.type) ? 0.88 : 0.94 );
    offer = (avail && Math.random()<0.20) ? (Math.random()<0.5? -10 : -20) : 0;
    p = fluctuate(sku.basePriceGP, sku.volatility||0.1);
    M.current[id] = { priceGP:+(p*(1+offer/100)).toFixed(4), available:avail, offerPct:offer };
	state.BIZ.market = M;
  }
  // occasional new brands
  if (Math.random()<0.6){
    var t = ['Mead','Rum','Whiskey','Wine'][Math.floor(Math.random()*4)];
    var base = (t==='Mead'?0.02:t==='Rum'?0.05:t==='Whiskey'?0.08:0.06);
    var qual = (t==='Whiskey'?0.40:0.30);
    var age = (t==='Mead')?0:(3+Math.floor(Math.random()*18));
    var quality = 1+Math.floor(Math.random()*3);
    var price = base * (1 + (quality-1)*qual) * (t==='Whiskey'?(1+age/30):1);
    var id = 'SKU'+(M.seq++);
    var sku = { id:id, name:t+': '+['Kingfisher','Moonlit','Sable','Ironbound','Amber'][Math.floor(Math.random()*5)]+' '+['Oak','Cliff','Vale','Deep','Crown'][Math.floor(Math.random()*5)]+(age?(', '+age+'yr'):''), type:t.toLowerCase(), baseUnit:(t==='Mead'?'pint':(t==='Wine'?'glass':'shot')), basePriceGP:price, volatility:0.18, quality:quality, age:age, tags:[t.toLowerCase(),'drink'] };
    M.skus[id]=sku; M.current[id]={ priceGP: fluctuate(price,0.18), available:true, offerPct:0 };
  }
  function fluctuate(base, vol){ var r=(Math.random()*2-1)*vol; var x=base*(1+r); return +x.toFixed(4); }
}
function marketBestPrice(tag){
  var M=state.BIZ.market, best=null, id, sku, cur;
  for (id in M.skus){
    sku=M.skus[id]; cur=M.current[id];
    if (!cur || !cur.available) continue;
    if (sku.type===tag || (sku.tags||[]).indexOf(tag)!==-1){
      if (!best || cur.priceGP<best.priceGP) best={ id:id, priceGP:cur.priceGP, name:sku.name };
    }
  }
  return best;
}
function marketPriceBySKU(id){
  var cur = state.BIZ.market.current[id];
  return cur ? cur.priceGP : null;
}

/* ===== Simple market helpers (no SKU juggling) ===== */
function marketOffersByTag(tag){
  var M = state.BIZ.market, out = [], id, sku, cur;
  for (id in M.skus){
    sku = M.skus[id]; cur = M.current[id];
    if (!cur || !cur.available) continue;
    if (sku.type===tag || (sku.tags||[]).indexOf(tag)!==-1){
      out.push({ id:id, name:sku.name, unit:sku.baseUnit, priceGP:cur.priceGP, offerPct:cur.offerPct||0 });
    }
  }
  // cheapest first
  out.sort(function(a,b){ return a.priceGP - b.priceGP; });
  return out;
}
function marketBestOffer(tag){
  var arr = marketOffersByTag(tag);
  return arr.length ? arr[0] : null;
}

/* =========================
   SUPPLIERS + FRANCHISE DISCOUNT
   ========================= */
function franchiseDiscountFor(bizName){
  var name, fr, i;
  for (name in state.BIZ.franchises){
    fr = state.BIZ.franchises[name]||[];
    for (i=0;i<fr.length;i++){
      if (fr[i]===bizName){
        var members = fr.length;
        var tiers = Math.floor(members/3); // 3 members per 5% tier
        return clamp(tiers*0.05, 0, 0.15); // cap 15%
      }
    }
  }
  return 0;
}
function ensureSuppliers(biz){
  biz.suppliers = biz.suppliers || { 'Common Consortium': { reliability:0.92, baseLeadDays:2, discount:0, trust:50, variance:0.15, history:[] } };
}
function supplierEffectiveLead(sup){
  var base = sup.baseLeadDays||sup.leadDays||2;
  var jitter = (1 - (sup.trust||50)/100) * (sup.variance||0.15) * base;
  var delta = (Math.random()*2-1) * jitter;
  return Math.max(0, Math.round(base + delta));
}
function priceWithSupplier(sup, rawUnitPriceGP){
  var penalty = Math.max(0, 60 - (sup.trust||50)) / 1000;
  return rawUnitPriceGP * (1 - (sup.discount||0)) * (1 + penalty);
}
function updateSupplierTrust(sup, outcome){
  var d = outcome==='on_time'? +2 : outcome==='late'? -1 : outcome==='partial'? -3 : -5;
  sup.trust = clamp((sup.trust||50) + d, 0, 100);
  sup.reliability = clamp( (sup.reliability||0.9)*0.9 + (outcome==='failed'?0:1)*0.1, 0, 0.999);
  sup.history = sup.history || [];
  sup.history.push({ t:_now(), outcome:outcome });
  if (sup.history.length>100) sup.history.shift();
  log('info','SUPPLIER','trust_update',{name:sup.name||'?', outcome:outcome, trust:sup.trust, reliability:sup.reliability});
}

/* =========================
   MENUS (recipes consume stock)
   ========================= */
function seedMenuForBiz(biz){
  biz.menu = biz.menu || {};
  biz.menuSections = biz.menuSections || { drinks:{}, food:{}, services:{} };

  function addFood(key, label, priceGp, share, tags, recipe){
    biz.menu[key] = { label:label, priceGp:priceGp, share:share||0.2, tags:tags||[], recipe: recipe||[], pricingMode:'fixed', targetMargin:0.5, analytics:[] };
    biz.menuSections.food[key] = biz.menu[key];
  }
  function addDrink(key, label, priceGp, share, tags, recipe){
    biz.menu[key] = { label:label, priceGp:priceGp, share:share||0.2, tags:tags||[], recipe: recipe||[], pricingMode:'fixed', targetMargin:0.5, analytics:[] };
    biz.menuSections.drinks[key] = biz.menu[key];
  }
  function addService(key, label, priceGp, share, tags){
    biz.menu[key] = { label:label, priceGp:priceGp, share:share||0.2, tags:tags||[], recipe:[], pricingMode:'fixed', targetMargin:0.5, analytics:[] };
    biz.menuSections.services[key] = biz.menu[key];
  }

  // Food venues
  if (biz.type==='Tavern' || biz.type==='Restaurant' || biz.type==='Caf√©' || biz.type==='Inn'){
    addDrink('mead_pint','Pint of Mead', 0.06, 0.20, ['coldale'], [{key:'mead',units:1}]);
    addDrink('wine_glass','Glass of Wine', 0.14, 0.10, ['wine'], [{key:'wine',units:1}]);
    addDrink('whiskey_shot','Shot of Whiskey', 0.16, 0.08, ['spirits'], [{key:'whiskey',units:1}]);
    addFood('bread_cheese','Bread & Cheese', 0.22, 0.16, [], [{key:'bread',units:0.5},{key:'cheese',units:0.4}]);
    addFood('beef_stew','Beef Stew', 0.34, 0.16, ['stew'], [{key:'beef',units:0.5},{key:'veg',units:0.5},{key:'bread',units:0.3}]);
    if (biz.type!=='Tavern') addFood('salad','Salad Bowl', 0.25, 0.14, ['salad','veg'], [{key:'lettuce',units:0.3},{key:'cucumber',units:0.2},{key:'tomato',units:0.2},{key:'onion',units:0.1},{key:'carrot',units:0.2}]);
    if (biz.type==='Caf√©'){
      addDrink('coffee','Cup of Coffee', 0.12, 0.38, ['hotdrink'], [{key:'coffee',units:1},{key:'sugar',units:0.2}]);
      addDrink('tea','Cup of Tea', 0.10, 0.30, ['hotdrink'], [{key:'tea',units:1},{key:'sugar',units:0.2}]);
    }
  }

  // Services for craft/trade shops (examples)
  if (biz.type==='Weaponsmith' || biz.type==='Armorer' || biz.type==='Blacksmith'){
    // Materials: iron/steel/mithral/adamantine/orichalcum
    addService('axe_iron','Forge: Iron Axe', 5.00, 0.20, ['smith']);
    addService('sword_steel','Forge: Steel Longsword', 15.00, 0.15, ['smith']);
    addService('sword_mithral','Forge: Mithral Shortsword', 150.00, 0.10, ['mithral']);
    addService('breast_adamant','Forge: Adamantine Breastplate', 800.00, 0.05, ['adamantine']);
    addService('blade_orich','Forge: Orichalcum Bastard Sword', 1200.00, 0.05, ['orichalcum']);
  }
  if (biz.type==='Courier Service'){
    addService('small_parcel','Small Parcel (wrapping)', 0.16, 0.6, [], []);
    addService('sealed_parcel','Sealed Parcel', 0.18, 0.4, [], []);
  }
}

/* ============ STOCK INIT + LOTS ============ */
// Auto-initial restock: 1x standing order (or 1 container if no standing order)
// Costs are deducted; cash may go negative (debt). Logged to ledger.
function autoInitialRestock(bizName){
  var biz = state.BIZ.businesses[bizName];
  if (!biz || !biz.stock) return;
  var today = state.BIZ.date;
  Object.keys(biz.stock).forEach(function(k){
    var it = biz.stock[k];
    var units = it.baseStandingOrderUnits || it.standingOrderUnits || (it.unitsPerContainer||0) || 0;
    if (units<=0) return;
    var unitCost = it.purchaseCostPerUnit || 0.05, best;
    if (it.linkedToMarket && it.marketTag){
      best = marketBestOffer(it.marketTag);
      if (best) unitCost = best.priceGP;
    }
    var costCP = Math.round(units * unitCost * 100);
    biz.cash = cpToCurrency( currencyToCP(biz.cash) - costCP ); // allow debt
    addLot(it, units, today, best?best.id:null);
    appendLedger(bizName, '<p>‚Ä¢ Initial stock: '+units+' '+_.escape(it.baseUnit)+' of '+_.escape(it.label)+' ‚Äî ‚àí'+gpStr(costCP)+'</p>');
  });
}

function initStandingOrdersForBiz(biz){
  var tcfg = TYPE_INCOME[biz.type] || TYPE_INCOME['default'];
  var items = (tcfg.stock||[]);
  if (!biz.stock) biz.stock = {};
  for (var j=0;j<items.length;j++){
    var s = items[j];
    var cycle = perishDays(s.perishability);
    biz.stock[s.key] = {
      label:s.label, baseUnit:s.baseUnit, containerUnit:s.containerUnit, unitsPerContainer:s.unitsPerContainer,
      perishability:s.perishability, purchaseCostPerUnit:s.purchaseCostPerUnit, salePricePerUnit:s.salePricePerUnit||0,
      baseStandingOrderUnits: s.baseStandingOrderUnits||0, standingOrderUnits: s.baseStandingOrderUnits||0,
      marketTag: s.marketTag||null, linkedToMarket: !!s.linkedToMarket,
      qtyUnits: 0, lots: [], nextRestock: cycle ? addDaysHarptos(state.BIZ.date, cycle) : null,
      pricingMode:'fixed', targetMargin:0.5, tags:(s.tags||[]),
      ageBonusPct: (/whiskey|wine/.test(s.marketTag||'') ? 0.01 : 0) // +1%/month when aging
    };
  }
}
function addLot(it, qty, today, skuId){
  if (!it.lots) it.lots=[];
  it.lots.push({ qty:qty, acquired: cloneDate(today), skuId: skuId||null, ageMonths:0 });
  it.qtyUnits = (it.qtyUnits||0) + qty;
}
function takeFromLots(it, qtyNeeded){
  // FEFO: oldest lots first
  var taken = 0, i, lot, use;
  if (!it.lots || !it.lots.length) return 0;
  for (i=0;i<it.lots.length && taken<qtyNeeded;i++){
    lot = it.lots[i];
    use = Math.min(lot.qty, qtyNeeded-taken);
    lot.qty -= use; taken += use; it.qtyUnits -= use;
  }
  // prune empty
  it.lots = it.lots.filter(function(l){ return l.qty>0; });
  return taken;
}
function spoilLots(it, frac){
  if (!it.lots || !it.lots.length) return 0;
  var lost=0, i, lot, n;
  for (i=0;i<it.lots.length;i++){
    lot = it.lots[i];
    n = Math.floor(lot.qty * frac);
    lot.qty -= n; lost += n;
  }
  it.qtyUnits = Math.max(0,(it.qtyUnits||0) - lost);
  it.lots = it.lots.filter(function(l){ return l.qty>0; });
  return lost;
}

/* =========================
   EVENTS (short list; festivals + seasons add variety)
   ========================= */
var amazingEvents  = [
  { text:'Festival crowds flood in; record takings.', rep:+2 },
  { text:'A local noble sponsors the business for a week.', rep:+2 },
  { text:'A famed bard‚Äôs endorsement sparks a buying frenzy.', rep:+2 },
  { text:'A caravan arrives short on time and long on coin.', rep:+1 },
  { text:'Guild fair draws unprecedented footfall.', rep:+1 }
];
var horrificEvents = [
  { text:'Break-in overnight; stock ruined.', rep:-3, stockHit:0.5 },
  { text:'Guards cordon the street after an incident.', rep:-2 },
  { text:'Contamination scare forces closure.', rep:-2, stockHit:0.3 },
  { text:'A brawl trashes the premises.', rep:-2, stockHit:0.3 },
  { text:'Sudden levy collected by a corrupt official.', rep:-1 }
];
var greatBoosts    = [
  { text:'Word-of-mouth surge after a well-received service.', rep:+1 },
  { text:'Visiting troupe draws patrons.', rep:+1 },
  { text:'Weather perfect; steady trade all day.', rep:+1 },
  { text:'A rival shuts for repairs.', rep:+1 },
  { text:'Market day boosts footfall.', rep:+1 }
];
var greatLosses    = [
  { text:'Supply delay; popular stock missing.', rep:-1 },
  { text:'Staff illness; reduced capacity.', rep:-1 },
  { text:'Heavy rain keeps customers away.', rep:0 },
  { text:'Minor accident forces mid-day closure.', rep:-1 },
  { text:'Price spike on key materials.', rep:0 }
];
var fairBoosts     = [
  { text:'Regulars bring friends.', rep:+0.5 },
  { text:'Small tour group stops by.', rep:+0.5 },
  { text:'Street buskers liven the block.', rep:+0.5 },
  { text:'Craftsman demos wares.', rep:+0.5 },
  { text:'Noticeboard mention bumps traffic.', rep:+0.5 }
];
var fairLosses     = [
  { text:'Quiet streets.', rep:0 },
  { text:'Neighbouring spectacle siphons customers.', rep:0 },
  { text:'Short-staffed morning slows turnover.', rep:-0.5 },
  { text:'Roadworks snarl access.', rep:0 },
  { text:'Supplier late; shelves a touch bare.', rep:0 }
];
var averageEvents  = [
  { text:'An unremarkable trading day.', rep:0 },
  { text:'Steady custom with no surprises.', rep:0 },
  { text:'Regulars keep you ticking over.', rep:+0.2 },
  { text:'Quiet morning, average afternoon.', rep:0 },
  { text:'Nothing of note beyond routine.', rep:0 }
];
function pickDailyEvent(today){
  var r = randomInteger(100), tier, mult, pool;
  if (r<=5){ tier='amazing'; mult=2.0; pool=amazingEvents; }
  else if (r<=10){ tier='horrific'; mult=0.1; pool=horrificEvents; }
  else if (r<=20){ tier='greatLoss'; mult=0.5; pool=greatLosses; }
  else if (r<=30){ tier='greatBoost'; mult=1.5; pool=greatBoosts; }
  else if (r<=45){ tier='fairLoss'; mult=0.8; pool=fairLosses; }
  else if (r<=60){ tier='fairBoost'; mult=1.2; pool=fairBoosts; }
  else { tier='average'; mult=1.0; pool=averageEvents; }
  var chosen = pool[Math.floor(Math.random()*pool.length)] || {text:'',rep:0};
  var festMult = 1.0, festRep = 0;
  if (today.festival){
    for (var i=0;i<festivals.length;i++){
      if (festivals[i].name===today.festival){ festMult = festivals[i].incomeMult||1.0; festRep = festivals[i].repDelta||0; break; }
    }
  }
  return { tier:tier, desc: chosen.text, mult: mult*festMult, repDelta: (chosen.rep||0)+festRep, stockHit: chosen.stockHit||0 };
}

/* =========================
   HANDOUT LEDGER
   ========================= */
function ensureLedgerHandout(bizName) {
  var wanted = 'Ledger ‚Äî ' + bizName;
  var ho = findObjs({ _type:'handout', name: wanted })[0];
  if (!ho) {
    ho = createObj('handout', { name: wanted, inplayerjournals: 'all', archived: false });
    var head = '<h1>'+_.escape(wanted)+'</h1><p><em>Automatic ledger. All values in gp unless noted.</em></p><hr>';
    ho.set('notes', head);
  }
  return ho;
}
function appendLedger(bizName, html) {
  var ho = ensureLedgerHandout(bizName);
  ho.get('notes', function(n){ ho.set('notes', (n||'') + html); });
}
function logOpenBusiness(name, type, sizeLabel, date, rooms){
  ensureLedgerHandout(name);
  appendLedger(name, '<h2>'+_.escape(dateStr(date))+'</h2><p><strong>Business:</strong> '+_.escape(name)+' ('+_.escape(type)+' ‚Äî '+_.escape(sizeLabel)+')'+(rooms?' ‚Äî Rooms: '+rooms:'')+'</p><hr>');
}
function quickAddBusiness(name, type, rooms){
  log('info','QUICK','quickAddBusiness',{name:name,type:type,rooms:rooms});
  state.BIZ.businesses[name] = {
    type:type, size:'tiny', reputation:0, trust:(type==='Courier Service'?50:undefined),
    policy:{ insurance:false },
    cash:{pp:0,gp:0,ep:0,sp:0,cp:0},
    expenses:[], staff:[], stock:{},
    rooms: (TYPE_INCOME[type] && TYPE_INCOME[type].rooms) ? [] : undefined,
    ledger:[]
  };
  initStandingOrdersForBiz(state.BIZ.businesses[name]);
  ensureSuppliers(state.BIZ.businesses[name]);
  ensureMenusForBusiness(state.BIZ.businesses[name]);
  if (rooms>0 && state.BIZ.businesses[name].rooms){
    for (var r=1;r<=rooms;r++) state.BIZ.businesses[name].rooms.push({ name:'Room #'+r, rateGp:0.50, upkeepGp:0.10, occupiedUntil:null });
  }
  autoInitialRestock(name);
  logOpenBusiness(name, type, (SIZE['tiny'].label), state.BIZ.date, rooms||0);
}
function handleMarketBuyTagQuote(who, bn, key, tag, cont, units){
  log('info','BUY','handleMarketBuyTagQuote',{bn:bn,key:key,tag:tag,cont:cont,units:units});
  // TODO: implement full market quote and confirmation flow
  return whisper(who, panel('Buy Drinks',['Not implemented.']));
}
function logDailyOutcome(name, today, paidList, baseCP, evt, incomeCP, netCP, closingCashStr, capacityNote, stockSpoilLines, consumptionNote){
  var lines = [];
  lines.push('<h3>'+_.escape(dateStr(today))+'</h3>');
  if (today.festival) lines.push('<p><strong>Festival:</strong> '+_.escape(today.festival)+'</p>');
  if (paidList.length){
    lines.push('<p><strong>Expenses & Purchases Today</strong></p><ul>');
    for (var i=0;i<paidList.length;i++){
      var p = paidList[i];
      lines.push('<li>'+_.escape(p.what)+' ('+_.escape(p.freq)+') ‚Äî ‚àí'+gpStr(p.cp)+'</li>');
    }
    lines.push('</ul>');
  } else {
    lines.push('<p><em>No expenses paid today.</em></p>');
  }
  if (stockSpoilLines && stockSpoilLines.length){
    lines.push('<p><strong>Spoilage/Breakage</strong></p><ul>');
    for (var s=0;s<stockSpoilLines.length;s++) lines.push('<li>'+_.escape(stockSpoilLines[s])+'</li>');
    lines.push('</ul>');
  }
  lines.push(
    '<p><strong>Base Income:</strong> +'+gpStr(baseCP)+'<br>'+
    '<strong>Event:</strong> '+_.escape(evt.tier)+' (√ó'+evt.mult.toFixed(2)+') ‚Äî '+_.escape(evt.desc)+'<br>'+
    '<strong>Income Applied:</strong> +'+gpStr(incomeCP)+(capacityNote?'<br><em>'+_.escape(capacityNote)+'</em>':'')+(consumptionNote?'<br><em>'+_.escape(consumptionNote)+'</em>':'')+'</p>'
  );
  var sign = netCP>=0?'+':'‚àí';
  lines.push('<p><strong>Daily P/L:</strong> '+sign+gpStr(Math.abs(netCP))+'</p>');
  lines.push('<p><strong>Closing Cash:</strong> '+_.escape(closingCashStr)+'</p><hr>');
  appendLedger(name, lines.join(''));
}

/* ==============
   MENUS: VIEW
   ============== */
function menuLines(biz){
  var out=['<b>Drinks</b>'];
  var D = (biz.menuSections && biz.menuSections.drinks) || {};
  var K = Object.keys(D);
  if (!K.length) out.push('<em>none</em>');
  else for (var i=0;i<K.length;i++){ var it=D[K[i]]; out.push('‚Ä¢ <b>'+_.escape(it.label)+'</b> ‚Äî '+it.priceGp.toFixed(2)+'gp'); }
  out.push('<hr><b>Food</b>');
  var F = (biz.menuSections && biz.menuSections.food) || {};
  K = Object.keys(F);
  if (!K.length) out.push('<em>none</em>');
  else for (i=0;i<K.length;i++){ it=F[K[i]]; out.push('‚Ä¢ <b>'+_.escape(it.label)+'</b> ‚Äî '+it.priceGp.toFixed(2)+'gp'); }
  out.push('<hr><b>Services</b>');
  var S = (biz.menuSections && biz.menuSections.services) || {};
  K = Object.keys(S);
  if (!K.length) out.push('<em>none</em>');
  else for (i=0;i<K.length;i++){ it=S[K[i]]; out.push('‚Ä¢ <b>'+_.escape(it.label)+'</b> ‚Äî '+it.priceGp.toFixed(2)+'gp'); }
  return out;
}


/* ==============
   MENUS: consume
   ============== */
function consumeIngredients(biz, recipe, units, paidToday){
  var i, r, needed, it, used, short, rushCP=0, buyCost, uval;
  recipe = recipe||[];
  for (i=0;i<recipe.length;i++){
    r = recipe[i];
    needed = r.units * units;
    it = biz.stock[r.key];
    if (!it){ return { ok:false, rushCP:0, note:'Missing stock key '+r.key }; }
    // have enough?
    used = takeFromLots(it, needed);
    if (used<needed){
      short = needed - used;
      // try rush buy via market if linked, else at purchaseCostPerUnit
      uval = it.purchaseCostPerUnit || 0.05;
      if (it.linkedToMarket && it.marketTag){
        var best = marketBestPrice(it.marketTag);
        if (best && best.priceGP>0){
          buyCost = Math.round(short * best.priceGP * 100 * 1.10); // 10% rush premium
          rushCP += buyCost;
          addLot(it, short, state.BIZ.date, best.id);
          // immediately consume
          takeFromLots(it, short);
        } else return { ok:false, rushCP:rushCP, note:'Market out: '+it.label };
      } else {
        buyCost = Math.round(short * uval * 100 * 1.10);
        rushCP += buyCost;
        addLot(it, short, state.BIZ.date, null);
        takeFromLots(it, short);
      }
      if (rushCP>0) paidToday.push({ what:'Emergency '+it.label, freq:'One-off', cp:rushCP });
    }
  }
  return { ok:true, rushCP:rushCP, note:'' };
}

/* ==============
   UI ‚Äî MENUS & MARKET
   ============== */
function showMainMenu(who) {
  var d = state.BIZ.date;
  var biz = _.keys(state.BIZ.businesses);
  var fr  = _.keys(state.BIZ.franchises);
  var evts= state.BIZ.calendarEvents || [];
// Build the list of types dynamically from TYPE_INCOME (skip 'default')
  var typeList = _.keys(TYPE_INCOME).filter(function(k){ return k!=='default'; }).join('|');


  var lines = [];
  lines.push('üìÖ <b>'+_.escape(dateStr(d))+'</b> ‚Äî Tenday '+d.weekday+'/10');

  lines.push(
    btn('Set Date', "!biz --setdate '?{Month|"+months.join('|')+"}' '?{Day (1-30 or 0 for festival)|1}' '?{Year|1358}' '?{Festival (leave blank or pick)|"+festivals.map(function(f){return f.name;}).join('|')+"}'", 'info')
  );

  lines.push(
    btn('Add Business', "!biz --addbusiness '?{Name}' '?{Type|"+typeList+"}' '?{Rooms (Inn only)|0}'", 'pri')
  );
  lines.push(
    btn('Add Business (Quick)', "!biz --quickadd '?{Name}' '?{Type|"+typeList+"}' '?{Rooms (Inn only)|0}'", 'pri')
  );

  if (biz.length){
    lines.push(btn('Remove Business', "!biz --removebusiness '?{Name|"+biz.join('|')+"}'", 'danger'));
    lines.push('<hr><b>Businesses</b>');
    for (var i=0;i<biz.length;i++){
      lines.push(btn(biz[i], "!biz --bizmenu "+encodeArg(biz[i]), 'sec'));
    }
  } else {
    lines.push('<em>no businesses</em>');
  }

  lines.push('<hr>');
  lines.push(btn('Add Franchise', "!biz --addfranchise '?{Name}'", 'pri'));
  if (fr.length){
    lines.push(btn('Remove Franchise', "!biz --removefranchise '?{Name|"+fr.join('|')+"}'", 'danger'));
    lines.push('<hr><b>Franchises</b>');
    for (var j=0;j<fr.length;j++){
      lines.push(btn(fr[j], "!biz --franchmenu "+encodeArg(fr[j]), 'sec'));
    }
  } else {
    lines.push('<em>no franchises</em>');
  }

  lines.push('<hr>');
  lines.push(
    btn('Add Calendar Event', "!biz --addevent '?{Name}' '?{Month|"+months.join('|')+"}' '?{Day}' '?{Percent}'", 'pri'),
    (evts.length? btn('Remove Calendar Event', "!biz --rmevent '?{Name|"+evts.map(function(e){return e.name;}).join('|')+"}'", 'danger') : '<em>no events</em>'),
    btn('List Calendar Events', "!biz --listevents", 'sec')
  );

  lines.push('<hr>');
  lines.push(
    btn('Advance Day', "!biz --advday", 'pri')+' '+
    btn('Rewind Day', "!biz --rewindday", 'warn')+' '+
    btn('Show Date', "!biz --date", 'sec')+' '+
    btn('Reset All', "!biz --reset", 'danger')
  );

  lines.push('<hr><b>Market</b> '+btn('View Market', "!biz --market", 'info')+' '+btn('Specials', "!biz --marketspecials", 'sec')+' '+btn('Export', "!biz --export", 'muted')+' '+btn('Migrate 1.5‚Üí1.6', "!biz --migrate15to16", 'warn'));

  sayPanel(who, 'BizTracker ‚Äî Main Menu', lines);
}

function showBusinessMenu(who, raw) {
  var name = stripQuotes(raw);
  var biz = state.BIZ.businesses[name];
  if (!biz) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(name)]));

  var enc = encodeArg(name);
  recomputeSize(biz);
  ensureSuppliers(biz);
  var header = 'üíº <b>'+_.escape(name)+'</b> ‚Äî '+_.escape(biz.type)+' ‚Äî '+(SIZE[biz.size]||SIZE.small).label;
  var status = 'Cash: '+currStr(biz.cash)+' ‚Äî Rep: '+(biz.reputation||0).toFixed(1)+(biz.type==='Courier Service'?' ‚Äî Trust: '+((biz.trust||50)|0):'');

  var lines = [header, status, '<hr><b>Operations</b>'];
  lines.push(
    btn('Add Income', "!biz --addincome "+enc+" '?{Source}' '?{Amount GP}'", 'pri')+' '+
    btn('Add Expense', "!biz --addexpense "+enc+" '?{What}' '?{Frequency|Daily|Weekly|Monthly|Yearly}' '?{Amount GP}'", 'sec')+' '+
    btn('View Ledger', "!biz --viewledger "+enc, 'info')+' '+
    btn('Weekly Report', "!biz --report "+enc, 'info')
  );

  lines.push('<hr><b>Staff</b>');
  lines.push(
    btn('Add Staff', "!biz --addstaff "+enc+" '?{Name}' '?{Role}' '?{Weekly Wage (gp)|1}'", 'pri')+' '+
    btn('Train Staff', "!biz --trainstaff "+enc+" '?{Name}' '?{Skill Œî (e.g. 0.1)|0.1}'", 'sec')+' '+
    btn('Remove Staff', "!biz --removestaff "+enc+" '?{Name}'", 'danger')+' '+
    btn('View Staff', "!biz --viewstaff "+enc, 'sec')
  );

  lines.push('<hr><b>Stock</b>');
  var prodKeys = Object.keys(biz.stock||{});
  lines.push(
    btn('View Stock', "!biz --viewstock "+enc, 'sec')+' '+
    (prodKeys.length ? btn('Buy Stock', "!biz --buystock "+enc+" '?{Product|"+prodKeys.join('|')+"}' '?{Units (base units)|0}' '?{Containers|0}'", 'pri') : '<em>no products yet</em>')+' '+
    btn('Buy Drinks', "!biz --buydrinks "+enc+" '?{Tag|mead|ale|wine|whiskey|rum|cider}' '?{Containers|1}' '?{Extra units|0}'", 'pri')+' '+
    btn('Add Product', "!biz --addproduct "+enc+" '?{Key (no spaces)}' '?{Label}' '?{Base Unit|unit}' '?{Container Unit|crate}' '?{Units per Container|10}' '?{Perishability|weekly|monthly|yearly|indefinite}' '?{Purchase Cost per Base Unit (gp)|0.1}' '?{Sale Price per Base Unit (gp)|0.2}' '?{Standing Order Units per Cycle|50}' '?{Initial Units|50}'", 'pri')
  );

  if (biz.type==='Tavern' || biz.type==='Inn' || biz.type==='Restaurant' || biz.type==='Caf√©' || biz.type==='Courier Service'){
    lines.push('<hr><b>Menu</b>');
    lines.push(
      btn('View Menu', "!biz --viewmenu "+enc, 'sec')+' '+
      btn('Add Menu Item', "!biz --addmenu "+enc+" '?{Key}' '?{Label}' '?{Price gp}' '?{Share (0..1)|0.2}' '?{Recipe CSV stockKey:units|oats:0.2,milk:0.15}'", 'pri')+' '+
      btn('Add Food Item (guided)', "!biz --addfood "+enc+" '?{Name}' '?{Price gp|0.5}' '?{Ingredient 1 (stockKey:units)|flour:0.2}' '?{Ingredient 2|}' '?{Ingredient 3|}' '?{Ingredient 4|}' '?{Ingredient 5|}' '?{Ingredient 6|}'", 'pri')+' '+
      btn('Set Pricing', "!biz --setpricing "+enc+" '?{menu or stock|menu|stock}' '?{Key}' '?{Mode|fixed|target|smart}' '?{Target Margin (0..1, if target)|0.5}'", 'info')
    );
  }

  var t = TYPE_INCOME[biz.type];
  if (t && t.rooms){
    var roomNames = (biz.rooms||[]).map(function(r){return r.name;}).join('|') || 'Room #1';
    lines.push('<hr><b>Rooms</b>');
    lines.push(
      btn('Set Rooms', "!biz --setrooms "+enc+" '?{Rooms|10}' '?{Rate gp/day|0.5}' '?{Upkeep gp/day|0.1}'", 'pri')+' '+
      btn('Book Room', "!biz --bookroom "+enc+" '?{Room|"+roomNames+"}' '?{Nights|1}'", 'sec')+' '+
      btn('View Rooms', "!biz --viewrooms "+enc, 'info')
    );
  }

  lines.push('<hr><b>Suppliers & Market</b>');
  lines.push(
    btn('View Market', "!biz --market", 'sec')+' '+
    btn('Buy SKU ‚Üí Stock', "!biz --buysku "+enc+" '?{Stock Key|"+(prodKeys.join('|')||'stockKey')+"}' '?{SKU Id}' '?{Units|1}'", 'pri')+' '+
    btn('Set Supplier', "!biz --setsupplier "+enc+" '?{Stock Key|"+(prodKeys.join('|')||'stockKey')+"}' '?{Name|Common Consortium}' '?{Reliability (0..1)|0.92}' '?{Lead Days|2}' '?{Discount (0..1)|0}'", 'info')
  );

  if (biz.type==='Courier Service'){
    lines.push('<hr><b>Courier Policy</b>');
    lines.push(
      btn('Toggle Insurance', "!biz --setpolicy "+enc+" 'insurance' '?{on|on|off}'", 'warn')
    );
  }

  lines.push('<hr>'+btn('Back to Main', "!biz start", 'muted'));
  sayPanel(who, 'BizTracker ‚Äî Business', lines);
}

function showFranchiseMenu(who, raw) {
  var fn = stripQuotes(raw);
  var mem = state.BIZ.franchises[fn];
  if (!mem) return whisper(who, panel('Error', ['‚ùå No such franchise: '+_.escape(fn)]));

  var lines = [
    'üëë <b>'+_.escape(fn)+'</b>',
    btn('Link Business', "!biz --linkfranchise "+encodeArg(fn)+" '?{Business|"+_.keys(state.BIZ.businesses).join('|')+"}'", 'pri'),
    mem && mem.length ? btn('Unlink Business', "!biz --unlinkfranchise "+encodeArg(fn)+" '?{Business|"+mem.join('|')+"}'", 'danger') : '<em>no linked businesses</em>',
    '<hr><b>Members</b>'
  ];
  if (mem && mem.length){ for (var i=0;i<mem.length;i++) lines.push('‚Ä¢ '+mem[i]); }
  else lines.push('<em>none</em>');
  lines.push('<hr>'+btn('Back to Main', "!biz start", 'muted'));

  sayPanel(who, 'BizTracker ‚Äî Franchise', lines);
}

function showEventsMenu(who) {
  var evts = state.BIZ.calendarEvents || [];
  var lines = ['üìÜ <b>Calendar Events</b>'];
  if (!evts.length) lines.push('<em>none</em>');
  else for (var i=0;i<evts.length;i++){
    lines.push('‚Ä¢ '+_.escape(evts[i].name)+': '+_.escape(evts[i].month)+' '+evts[i].day+' ('+evts[i].percent+'%)');
  }
  lines.push('<hr>'+btn('Back to Main', "!biz start", 'muted'));
  sayPanel(who, 'BizTracker ‚Äî Events', lines);
}

function showMarket(who){
  var M = state.BIZ.market, id, sku, cur, byTag = {};
  for (id in M.skus){
    sku=M.skus[id]; cur=M.current[id];
    if (!cur || !cur.available) continue;
    var tags = (sku.tags||[sku.type]);
    for (var t=0;t<tags.length;t++){
      var tag = tags[t];
      byTag[tag] = byTag[tag] || [];
      byTag[tag].push({id:id, name:sku.name, unit:sku.baseUnit, priceGP:cur.priceGP, offerPct:cur.offerPct||0});
    }
  }
  var lines=['üõí <b>Market ‚Äî '+_.escape(M.asof.month)+' '+M.asof.year+'</b>',
             '<em>Select a business & stock key to buy; you will get a cost preview and confirm.</em>'];
  var bizNames = _.keys(state.BIZ.businesses);
  var pickBiz = bizNames.length ? bizNames.join('|') : 'No Businesses';
  var tags = _.keys(byTag).sort();
  if (!tags.length) lines.push('<em>No items available this month.</em>');
  for (var i=0;i<tags.length;i++){
    var tag = tags[i];
    var best = byTag[tag].slice().sort(function(a,b){return a.priceGP-b.priceGP;})[0];
    lines.push('‚Ä¢ <b>'+_.escape(tag)+'</b> ‚Äî best '+best.priceGP.toFixed(3)+'gp/'+_.escape(best.unit)+' '+(best.offerPct?('(offer '+best.offerPct+'%)'):'')+
      ' '+btn('Buy', "!biz --marketbuytag " +
        '"?{Business|'+pickBiz+'}" '+
        '"?{Stock Key in that business (must match a linked marketTag)|'+tag+'}" '+
        '"'+tag+'" '+
        '"?{How many containers (0 for none)|0}" '+
        '"?{Extra base units (adds to containers)|0}"'
        ,'pri'));
  }
  sayPanel(who,'Market', lines);
}

function showMarketSpecials(who){
  var M=state.BIZ.market, id, cur, sku, lines=['üè∑Ô∏è <b>Market Specials</b>'];
  for (id in M.current){
    cur=M.current[id]; sku=M.skus[id];
    if (cur && cur.offerPct) lines.push('‚Ä¢ '+id+': '+sku.name+' ‚Äî '+cur.offerPct+'% this month');
  }
  if (lines.length===1) lines.push('<em>No current specials.</em>');
  sayPanel(who,'Market Specials',lines);
}

/* =================
   CHAT COMMANDS
   ================= */

// Automatically wrap key functions with entry/exit logging for deeper insight
var BIZ_FUNCTIONS_TO_LOG = ['startBuyFlow','startBuyFlowFromTag','confirmBuyFlow','execBuyFlow','monthlyMarketUpdate','showMainMenu'];
(function(){
  var root = (function(){ return this; }).call(null);
  BIZ_FUNCTIONS_TO_LOG.forEach(function(name){
    var fn = root[name];
    if (typeof fn === 'function'){
      root[name] = function(){
        bizLog('Enter '+name, { args: Array.prototype.slice.call(arguments) });
        var result;
        try {
          result = fn.apply(this, arguments);
          return result;
        } finally {
          bizLog('Exit '+name, { result: result });
        }
      };
    }
  });
})();

on('chat:message', function(msg){
  bizLog('Chat message received', { who: msg.who, content: msg.content, type: msg.type });
  if (msg.type !== 'api' || msg.content.indexOf('!biz')!==0) return;
  var who = msg.who.replace(/ \(GM\)$/, '');
  var parts = msg.content.match(/(?:[^\s"]+|"[^"]*")+/g) || [];
  var cmd   = parts[1];
  bizLog('Processing command', { who: who, cmd: cmd, parts: parts });

  switch(cmd){

    case 'start':
    case '--start':
      return showMainMenu(who);
	  
	  case '--buyflow':
  return startBuyFlow(who, parts[2]);
case '--buyflowtag':
  return startBuyFlowFromTag(who, parts[2]);
case '--buyconfirm':
  return confirmBuyFlow(who, parts[2], parts[3], parts[4], parts[5]);
case '--buyexec':
  return execBuyFlow(who, parts[2], parts[3], parts[4], parts[5]);


    case '--date': {
      var d = state.BIZ.date;
      return sayPanel(who, 'BizTracker ‚Äî Date', ['üìÖ '+_.escape(dateStr(d))+' ‚Äî Tenday '+d.weekday+'/10']);
    }

    case '--setdate': {
      var mon = stripQuotes(parts[2]);
      var day = parseInt(stripQuotes(parts[3])||'1',10);
      var yr  = parseInt(stripQuotes(parts[4])||'1358',10);
      var fest= stripQuotes(parts[5]||'').trim();
      if (months.indexOf(mon)===-1) return whisper(who, panel('Error', ['‚ùå Month must be one of: '+months.join(', ')]));
      if (fest && !festivals.some(function(f){return f.name===fest;})) fest = '';
      state.BIZ.date = { year:yr, month:mon, day:Math.max(1,Math.min(30,day||1)), festival: fest||null, weekday:1 };
      monthlyMarketUpdate();
      return showMainMenu(who);
    }

    case '--reset':
      initializeState();
      whisper(who, panel('Reset', ['üîÑ State reset to factory settings.']));
      return showMainMenu(who);

    case '--migrate15to16': {
      // no-op if already seeded; seed menus & suppliers for food types
      _.each(state.BIZ.businesses, function(biz){
        if (!biz.stock){ initStandingOrdersForBiz(biz); }
        if (!biz.menu && (biz.type==='Tavern' || biz.type==='Inn' || biz.type==='Restaurant' || biz.type==='Caf√©' || biz.type==='Courier Service')) seedMenuForBiz(biz);
        ensureSuppliers(biz);
        // add skill if missing
        (biz.staff||[]).forEach(function(s){ if (typeof s.skill!=='number') s.skill=1.0; });
      });
      whisper(who, panel('Migration', ['‚úÖ v1.5 ‚Üí v1.6 basics applied (menus, suppliers, skill).']));
      return showMainMenu(who);
    }

    /* BUSINESSES */
    case '--addbusiness': {
      var name = stripQuotes(parts[2]);
      var type = stripQuotes(parts[3]||'');
      var rooms = parseInt(stripQuotes(parts[4]||'0'),10) || 0;
      if (!name || !type){
        return whisper(who,
          panel('Add Business', [
            btn('Click to Add', "!biz --addbusiness '?{Name}' '?{Type|Tavern|Inn|Restaurant|Caf√©|Blacksmith|Apothecary|General Store|Alchemist\\'s Lab|Courier Service|Jeweller|Magic Shop|Scriptorium|Stables|Temple|Theatre}' '?{Rooms (Inn only)|0}'", 'pri')
          ])
        );
      }
      state.BIZ.businesses[name] = {
        type:type, size:'tiny', reputation: 0, trust: (type==='Courier Service'?50:undefined),
        policy:{ insurance:false },
        cash:{pp:0,gp:0,ep:0,sp:0,cp:0}, // normalized coin purse
        expenses:[], staff:[], stock:{},
        rooms: (TYPE_INCOME[type] && TYPE_INCOME[type].rooms) ? [] : undefined,
        ledger:[]
      };
      initStandingOrdersForBiz(state.BIZ.businesses[name]);
      // seedMenuForBiz(...) is redundant now; ensureMenusForBusiness builds defaults
      ensureMenusForBusiness(state.BIZ.businesses[name]);
      ensureSuppliers(state.BIZ.businesses[name]);
      autoInitialRestock(name);   // (impl below)

      var earr = TYPE_AUTO_EXPENSES[type] || TYPE_AUTO_EXPENSES['default'];
      for (var j=0;j<earr.length;j++){
        var e = earr[j];
        state.BIZ.businesses[name].expenses.push({
          what:e.what, frequency:e.frequency, amount:{ gp: +(e.baseGp*0.9).toFixed(2) }, nextDue: cloneDate(state.BIZ.date)
        });
      }
      if (TYPE_INCOME[type] && TYPE_INCOME[type].rooms) {
        if (rooms>0){
          for (var r=1;r<=rooms;r++){
            state.BIZ.businesses[name].rooms.push({ name:'Room #'+r, rateGp:0.50, upkeepGp:0.10, occupiedUntil:null });
          }
        } else {
          whisper(who, panel('Inn Rooms',
            ['‚ÑπÔ∏è Inn "'+_.escape(name)+'" created without rooms.',
             btn('Create Rooms Now', "!biz --setrooms "+encodeArg(name)+" '?{Rooms|10}' '?{Rate gp/day|0.5}' '?{Upkeep gp/day|0.1}'", 'pri')
            ]));
        }
      }
      logOpenBusiness(name, type, (SIZE['tiny'].label), state.BIZ.date, rooms>0?rooms:null);
      whisper(who, panel('Business Added', ['‚úÖ "'+_.escape(name)+'" ('+_.escape(type)+') created.']));
      return showMainMenu(who);
    }

    case '--quickadd': {
      var nm = stripQuotes(parts[2]);
      var tp = stripQuotes(parts[3]||'');
      var rm = parseInt(stripQuotes(parts[4]||'0'),10)||0;
      if (!nm || !tp) return whisper(who, panel('Quick Add',["Usage: "+btn('Add Business (Quick)', "!biz --quickadd '?{Name}' '?{Type|Tavern|Inn|Restaurant|Caf√©|Blacksmith|Apothecary|General Store|Alchemist\\'s Lab|Courier Service|Jeweller|Magic Shop|Scriptorium|Stables|Temple|Theatre}' '?{Rooms (Inn only)|0}'", 'pri')]));
      if (state.BIZ.businesses[nm]) return whisper(who, panel('Error',['‚ùå Business exists.']));
      quickAddBusiness(nm,tp,rm);
      log('info','CMD','--quickadd done',{nm:nm,tp:tp,rm:rm});
      return showBusinessMenu(who, nm);
    }

    case '--removebusiness': {
      var name2 = stripQuotes(parts[2]);
      if (!state.BIZ.businesses[name2]) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(name2)]));
      delete state.BIZ.businesses[name2];
      whisper(who, panel('Removed', ['‚ùå Removed business "'+_.escape(name2)+'".']));
      return showMainMenu(who);
    }

    case '--bizmenu':
      return showBusinessMenu(who, decodeArg(parts[2]));

    /* EXPENSE / INCOME */
    case '--addexpense': {
      var bn   = decodeArg(parts[2]);
      var what = stripQuotes(parts[3]);
      var freq = stripQuotes(parts[4]);
      var amt  = parseFloat(stripQuotes(parts[5])||'0')||0;
      var biz  = state.BIZ.businesses[bn];
      if (!biz) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bn)]));
      biz.expenses.push({ what:what, frequency:freq, amount:{gp:amt}, nextDue: cloneDate(state.BIZ.date) });
      appendLedger(bn, '<p>‚Ä¢ Added expense: <strong>'+_.escape(what)+'</strong> ‚Äî '+amt.toFixed(2)+'gp ('+_.escape(freq)+')</p>');
      return showBusinessMenu(who, bn);
    }

    case '--addincome': {
      var bn2 = decodeArg(parts[2]);
      var src = stripQuotes(parts[3]);
      var amt = parseFloat(stripQuotes(parts[4])||'0')||0;
      var biz2= state.BIZ.businesses[bn2];
      if (!biz2) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bn2)]));
      var cp  = Math.round(amt*100);
      var total = currencyToCP(biz2.cash) + cp;
      biz2.cash = cpToCurrency(total);
      biz2.ledger.push({ date: cloneDate(state.BIZ.date), source: src, delta: cp });
      appendLedger(bn2, '<p>‚Ä¢ '+_.escape(dateStr(state.BIZ.date))+': Income ‚Äî <strong>'+_.escape(src)+'</strong> +'+gpStr(cp)+'</p>');
      return showBusinessMenu(who, bn2);
    }

    case '--viewledger': {
      var bn3  = decodeArg(parts[2]);
      var biz3 = state.BIZ.businesses[bn3];
      if (!biz3) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bn3)]));
      var rows = ['üìî Ledger for <b>'+_.escape(bn3)+'</b> ‚Äî see journal: <em>Ledger ‚Äî '+_.escape(bn3)+'</em>'];
      for (var i=0;i<(biz3.ledger||[]).length;i++){
        var entry = biz3.ledger[i];
        var ds  = dateStr(entry.date);
        var delta = (entry.delta/100).toFixed(2)+'gp';
        var label = entry.tier || entry.source || 'entry';
        var note  = entry.desc ? ' ‚Äî '+entry.desc : '';
        rows.push(_.escape(ds)+' ‚Äî '+_.escape(label)+': '+(entry.delta>0?'+':'')+_.escape(delta)+_.escape(note));
      }
      rows.push('<hr>'+btn('Back', "!biz --bizmenu "+encodeArg(bn3), 'muted'));
      sayPanel(who, 'BizTracker ‚Äî Ledger', rows);
      return;
    }

    /* STAFF */
    case '--addstaff': {
      var bns = decodeArg(parts[2]);
      var nm  = stripQuotes(parts[3]);
      var role= stripQuotes(parts[4]);
      var wage= parseFloat(stripQuotes(parts[5])||'1')||1;
      var bz  = state.BIZ.businesses[bns];
      if (!bz) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bns)]));
      bz.staff.push({ name:nm, role:role, wageGp:wage, skill:1.0 });
      bz.expenses.push({ what:'Wages: '+nm+' ('+role+')', frequency:'Weekly', amount:{gp:wage}, nextDue: cloneDate(state.BIZ.date) });
      recomputeSize(bz);
      appendLedger(bns, '<p>‚Ä¢ Staff hired: <strong>'+_.escape(nm)+'</strong> ‚Äî '+_.escape(role)+' ('+wage.toFixed(2)+'gp/week)</p>');
      return showBusinessMenu(who, bns);
    }

    case '--trainstaff': {
      var bnT=decodeArg(parts[2]);
      var whoN=stripQuotes(parts[3]);
      var delta=parseFloat(stripQuotes(parts[4])||'0.1')||0.1;
      var bizT=state.BIZ.businesses[bnT];
      if (!bizT) return whisper(who, panel('Error', ['‚ùå No such business.']));
      var i, s, ok=false;
      for (i=0;i<(bizT.staff||[]).length;i++){
        s=bizT.staff[i]; if (s.name===whoN){ s.skill=clamp((s.skill||1)+delta, 0.5, 2.0); ok=true; break; }
      }
      whisper(who, panel('Training', [ok?'‚úÖ '+_.escape(whoN)+' skill now '+(s.skill||1).toFixed(2):'‚ùå Staff not found.']));
      return showBusinessMenu(who, bnT);
    }

    case '--removestaff': {
      var bnr = decodeArg(parts[2]);
      var nm2 = stripQuotes(parts[3]);
      var bz2 = state.BIZ.businesses[bnr];
      if (!bz2) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bnr)]));
      bz2.staff = (bz2.staff||[]).filter(function(s){ return s.name!==nm2; });
      bz2.expenses = (bz2.expenses||[]).filter(function(e){ return !( (e.what||'').indexOf('Wages: '+nm2+' ')===0 ); });
      recomputeSize(bz2);
      appendLedger(bnr, '<p>‚Ä¢ Staff departed: <strong>'+_.escape(nm2)+'</strong></p>');
      return showBusinessMenu(who, bnr);
    }

    case '--viewstaff': {
      var bnv = decodeArg(parts[2]);
      var bz3 = state.BIZ.businesses[bnv];
      if (!bz3) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bnv)]));
      var lines2 = ['üë• <b>Staff for '+_.escape(bnv)+'</b>'];
      if (!bz3.staff || !bz3.staff.length) lines2.push('<em>No staff.</em>');
      else for (var i=0;i<bz3.staff.length;i++){
        var s = bz3.staff[i];
        lines2.push('‚Ä¢ '+_.escape(s.name)+' ‚Äî '+_.escape(s.role)+' ‚Äî '+s.wageGp.toFixed(2)+'gp/week ‚Äî skill '+(s.skill||1).toFixed(2));
      }
      lines2.push('<hr>'+btn('Back', "!biz --bizmenu "+encodeArg(bnv), 'muted'));
      sayPanel(who, 'BizTracker ‚Äî Staff', lines2);
      return;
    }

    /* STOCK VIEW/BUY/ADD */
    case '--viewstock': {
      var bnx = decodeArg(parts[2]);
      var biz = state.BIZ.businesses[bnx];
      if (!biz) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bnx)]));
      var lines = ['üì¶ <b>Stock for '+_.escape(bnx)+'</b>'];
      var keys = Object.keys(biz.stock||{});
      if (!keys.length){
        lines.push('<em>No tracked stock for this business.</em>');
      } else {
        var shown = 0;
        for (var i=0;i<keys.length;i++){
          var s = biz.stock[keys[i]];
          var qty = s.qtyUnits||0;
          var unit = _.escape(s.baseUnit||'unit');
          var cu = s.unitsPerContainer||0;
          var cont = cu>0 ? Math.floor(qty/cu) : 0;
          var rem  = cu>0 ? (qty%cu) : qty;
          lines.push('‚Ä¢ <b>'+_.escape(s.label)+'</b>: '+qty+' '+unit+' ('+cont+' '+_.escape(s.containerUnit||'container')+' + '+rem+') ‚Äî sell@'+(s.salePricePerUnit||0).toFixed(2)+'gp');
          shown++;
        }
        if (!shown) lines.push('<em>No stock on hand.</em>');
      }
      lines.push('<hr>'+btn('Back', "!biz --bizmenu "+encodeArg(bnx), 'muted'));
      sayPanel(who, 'BizTracker ‚Äî Stock', lines);
      log('info','UI','viewstock',{bnx:bnx, count: keys.length});
      return;
    }

    case '--buydrinks': {
      var bn = decodeArg(parts[2]);
      var tag = stripQuotes(parts[3]);
      var cont = Math.max(0, parseInt(stripQuotes(parts[4])||'1',10));
      var units= Math.max(0, parseInt(stripQuotes(parts[5])||'0',10));
      var biz = state.BIZ.businesses[bn]; if (!biz) return whisper(who, panel('Error',['‚ùå No such business.']));
      var key = null, it=null;
      Object.keys(biz.stock||{}).some(function(k){
        var s=biz.stock[k];
        if (s.linkedToMarket && (s.marketTag===tag)){ key=k; it=s; return true; }
        return false;
      });
      if (!key) return whisper(who, panel('Error',['‚ùå No stock item linked to '+_.escape(tag)+' in this business.']));
      var total = cont*(it.unitsPerContainer||0)+units;
      if (total<=0) return whisper(who, panel('Error',['‚ùå Quantity must be > 0.']));
      log('info','BUY','--buydrinks quote',{bn:bn, tag:tag, key:key, total:total});
      return handleMarketBuyTagQuote(who, bn, key, tag, cont, units);
    }
    case '--buystock': {
      var bnB = decodeArg(parts[2]);
      var prod = stripQuotes(parts[3]);
      var units = parseInt(stripQuotes(parts[4])||'0',10) || 0;
      var conts = parseInt(stripQuotes(parts[5])||'0',10) || 0;
      var bizB = state.BIZ.businesses[bnB];
      if (!bizB) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bnB)]));
      var s = bizB.stock && bizB.stock[prod];
      if (!s) return whisper(who, panel('Error', ['‚ùå No such product key: '+_.escape(prod)]));
      var totalUnits = units + conts * (s.unitsPerContainer||0);
      if (totalUnits<=0) return whisper(who, panel('Error', ['‚ùå Quantity must be > 0.']));
      // market link?
      var unitCost = s.purchaseCostPerUnit||0.1;
      if (s.linkedToMarket && s.marketTag){
        var best = marketBestPrice(s.marketTag);
        if (best) unitCost = best.priceGP;
      }
      // franchise discount
      var disc = franchiseDiscountFor(bnB);
      unitCost *= (1 - disc);
      var costGp = totalUnits * unitCost;
      var costCP = Math.round(costGp*100);
      var newTotal = currencyToCP(bizB.cash) - costCP;
      bizB.cash = cpToCurrency(newTotal);
      addLot(s, totalUnits, state.BIZ.date, (s.linkedToMarket? (best?best.id:null):null));
      appendLedger(bnB, '<p>‚Ä¢ Purchased '+totalUnits+' '+_.escape(s.baseUnit)+' of '+_.escape(s.label)+' ‚Äî ‚àí'+gpStr(costCP)+ (disc?(' (franchise ‚àí'+Math.round(disc*100)+'%)'):'') +'</p>');
      return showBusinessMenu(who, bnB);
    }

    case '--addproduct': {
      var bnP = decodeArg(parts[2]);
      var key = stripQuotes(parts[3]);
      var label= stripQuotes(parts[4]);
      var baseU= stripQuotes(parts[5]);
      var contU= stripQuotes(parts[6]);
      var upc  = parseInt(stripQuotes(parts[7])||'1',10) || 1;
      var per  = stripQuotes(parts[8]).toLowerCase();
      var buy  = parseFloat(stripQuotes(parts[9])||'0.1')||0.1;
      var sell = parseFloat(stripQuotes(parts[10])||'0.2')||0.2;
      var stand= parseInt(stripQuotes(parts[11])||'50',10)||50;
      var init = parseInt(stripQuotes(parts[12])||'50',10)||50;
      var bizP = state.BIZ.businesses[bnP];
      if (!bizP) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bnP)]));
      if (!bizP.stock) bizP.stock = {};
      bizP.stock[key] = {
        label:label, baseUnit:baseU, containerUnit:contU, unitsPerContainer:upc,
        perishability: per, purchaseCostPerUnit:buy, salePricePerUnit:sell,
        baseStandingOrderUnits: stand, standingOrderUnits: stand,
        marketTag:null, linkedToMarket:false,
        qtyUnits: 0, lots: [], nextRestock: perishDays(per) ? addDaysHarptos(state.BIZ.date, perishDays(per)) : null,
        pricingMode:'fixed', targetMargin:0.5, tags:[]
      };
      addLot(bizP.stock[key], init, state.BIZ.date, null);
      appendLedger(bnP, '<p>‚Ä¢ Product added: <strong>'+_.escape(label)+'</strong> ('+init+' '+_.escape(baseU)+') ‚Äî standing '+stand+'/'+per+'</p>');
      return showBusinessMenu(who, bnP);
    }

    case '--buysku': {
      var bnS = decodeArg(parts[2]);
      var stockKey = stripQuotes(parts[3]);
      var skuId = stripQuotes(parts[4]);
      var units = Math.max(1, parseInt(stripQuotes(parts[5])||'1',10));
      var bizS = state.BIZ.businesses[bnS];
      if (!bizS) return whisper(who, panel('Error', ['‚ùå No such business.']));
      var it = bizS.stock[stockKey];
      if (!it) return whisper(who, panel('Error', ['‚ùå No such stock key: '+_.escape(stockKey)]));
      var price = marketPriceBySKU(skuId);
      if (!price) return whisper(who, panel('Error', ['‚ùå Unknown or unavailable SKU.']));
      var disc = franchiseDiscountFor(bnS);
      var costCP = Math.round(units * price * (1-disc) * 100);
      bizS.cash = cpToCurrency(currencyToCP(bizS.cash) - costCP);
      addLot(it, units, state.BIZ.date, skuId);
      appendLedger(bnS, '<p>‚Ä¢ Market purchase: '+units+' '+_.escape(it.baseUnit)+' of '+_.escape(it.label)+' ‚Äî ‚àí'+gpStr(costCP)+ (disc?(' (franchise ‚àí'+Math.round(disc*100)+'%)'):'') +'</p>');
      return showBusinessMenu(who, bnS);
    }
	    /* BUY BY TAG ‚Äî no SKU needed: quote -> confirm */
    case '--marketbuytag': {
      var bnT   = decodeArg(parts[2]);            // business name
      var sKey  = stripQuotes(parts[3]);          // stock key in that business
      var tag   = stripQuotes(parts[4]);          // market tag
      var nCont = Math.max(0, parseInt(stripQuotes(parts[5])||'0',10));
      var nUnit = Math.max(0, parseInt(stripQuotes(parts[6])||'0',10));
      var biz   = state.BIZ.businesses[bnT];
      if (!biz) return whisper(who, panel('Error',['‚ùå No such business.']));
      var it    = biz.stock[sKey];
      if (!it)  return whisper(who, panel('Error',['‚ùå No such stock key: '+_.escape(sKey)]));
      if (!it.linkedToMarket || !it.marketTag){
        return whisper(who, panel('Error',['‚ùå This stock item is not linked to the market. Set a marketTag on it.']));
      }
      // compute total base units from containers + extra units
      var totalUnits = (nCont*(it.unitsPerContainer||0)) + nUnit;
      if (totalUnits<=0) return whisper(who, panel('Error',['‚ùå Quantity must be > 0.']));

      var offer = marketBestOffer(tag);
      if (!offer) return whisper(who, panel('Market',['‚ùå No available offers for '+_.escape(tag)+' right now.']));
      // discounts
      var unitCost = offer.priceGP;
      var sup = (it.preferredSupplier && biz.suppliers && biz.suppliers[it.preferredSupplier]) ? biz.suppliers[it.preferredSupplier] : null;
      var supDisc = sup ? (sup.discount||0) : 0;
      var frDisc  = franchiseDiscountFor(bnT);
      unitCost *= (1 - supDisc) * (1 - frDisc);

      var costCP = Math.round(totalUnits * unitCost * 100);
      var willDebt = currencyToCP(biz.cash) < costCP;

      var confirmCmd = "!biz --marketconfirm "+encodeArg(bnT)+" "+encodeArg(sKey)+" "+encodeArg(tag)+" "+totalUnits+" "+offer.id+" "+offer.priceGP;
      var cancelCmd  = "!biz --bizmenu "+encodeArg(bnT);

      var lines = [
        'üßæ <b>Purchase Quote</b>',
        'Item: '+_.escape(it.label)+' ('+_.escape(tag)+')',
        'Qty: '+totalUnits+' '+_.escape(it.baseUnit)+' ('+nCont+' '+_.escape(it.containerUnit||'container')+' + '+nUnit+')',
        'Unit price (after discounts): '+(unitCost).toFixed(3)+'gp',
        'Total: <b>'+gpStr(costCP)+'</b>'+(willDebt?' ‚Äî ‚ö†Ô∏è will result in debt':''),
        btn('Confirm (Yes)', confirmCmd, 'pri')+' '+btn('Cancel (No)', cancelCmd, 'muted')
      ];
      sayPanel(who,'Confirm Purchase', lines);
      return;
    }

    case '--marketconfirm': {
      var bnC   = decodeArg(parts[2]);
      var sKeyC = decodeArg(parts[3]);
      var tagC  = decodeArg(parts[4]);
      var totalUnits = Math.max(1, parseInt(decodeArg(parts[5])||'1',10));
      var skuId = decodeArg(parts[6]); // best offer id (for trace)
      var rawUnit = parseFloat(decodeArg(parts[7])||'0')||0; // pre-discount; we‚Äôll re-eval for ledger clarity

      var bizC = state.BIZ.businesses[bnC];
      if (!bizC) return;
      var itC  = bizC.stock[sKeyC]; if (!itC) return;

      var offer2 = marketBestOffer(tagC);
      if (!offer2) return whisper(who, panel('Error',['‚ùå Offer no longer available. Try again.']));
      var unitCost = offer2.priceGP;
      var sup = (itC.preferredSupplier && bizC.suppliers && bizC.suppliers[itC.preferredSupplier]) ? bizC.suppliers[itC.preferredSupplier] : null;
      var supDisc = sup ? (sup.discount||0) : 0;
      var frDisc  = franchiseDiscountFor(bnC);
      unitCost *= (1 - supDisc) * (1 - frDisc);

      var costCP = Math.round(totalUnits * unitCost * 100);
      bizC.cash = cpToCurrency( currencyToCP(bizC.cash) - costCP );
      addLot(itC, totalUnits, state.BIZ.date, offer2.id);
      appendLedger(bnC, '<p>‚Ä¢ Market purchase: '+totalUnits+' '+_.escape(itC.baseUnit)+' of '+_.escape(itC.label)+' @ '+unitCost.toFixed(3)+'gp ‚Äî ‚àí'+gpStr(costCP)+'</p>');
      return showBusinessMenu(who, bnC);
    }

    /* MENU EDIT */
    case '--viewmenu': {
      var bnm = decodeArg(parts[2]);
      var bizm= state.BIZ.businesses[bnm];
      if (!bizm) return whisper(who, panel('Error', ['‚ùå No such business.']));
      sayPanel(who, 'Menu ‚Äî '+bnm, menuLines(bizm).concat(['<hr>'+btn('Back', "!biz --bizmenu "+encodeArg(bnm), 'muted')]));
      return;
    }
    case '--addfood': {
      var bn = decodeArg(parts[2]);
      var biz = state.BIZ.businesses[bn]; if (!biz) return whisper(who, panel('Error',['‚ùå No such business.']));
      var name = stripQuotes(parts[3]);
      var price= parseFloat(stripQuotes(parts[4])||'0.5')||0.5;
      var ing = [];
      for (var i=5;i<11;i++){
        var seg = stripQuotes(parts[i]||'').trim();
        if (!seg) continue;
        var p = seg.split(':');
        ing.push({ key:p[0].trim(), units: parseFloat((p[1]||'1'))||1 });
        if (ing.length>=6) break;
      }
      ing.forEach(function(r){
        if (!biz.stock[r.key]){
          biz.stock[r.key] = {
            label:r.key, baseUnit:'unit', containerUnit:'crate', unitsPerContainer:10,
            perishability:'monthly', purchaseCostPerUnit:0.05, salePricePerUnit:0,
            baseStandingOrderUnits:10, standingOrderUnits:10, marketTag:null, linkedToMarket:false,
            qtyUnits:0, lots:[], nextRestock: addDaysHarptos(state.BIZ.date, 30),
            pricingMode:'fixed', targetMargin:0.5, tags:[]
          };
          log('info','MENU','auto-created stock for ingredient',{bn:bn, key:r.key});
        }
      });
      biz.menu = biz.menu||{}; biz.menuSections=biz.menuSections||{drinks:{},food:{},services:{}};
      var key = name.toLowerCase().replace(/\s+/g,'_').replace(/[^a-z0-9_]/g,'');
      biz.menu[key] = { label:name, priceGp:price, share:0.2, tags:['food'], recipe:ing, pricingMode:'smart', targetMargin:0.6, analytics:[] };
      biz.menuSections.food[key] = biz.menu[key];
      appendLedger(bn, '<p>‚Ä¢ Menu item added: <strong>'+_.escape(name)+'</strong> @ '+price.toFixed(2)+'gp</p>');
      log('info','MENU','addfood',{bn:bn, key:key, price:price, ing:ing});
      return showBusinessMenu(who, bn);
    }
    case '--addmenu': {
      var bnA = decodeArg(parts[2]);
      var key = stripQuotes(parts[3]);
      var label= stripQuotes(parts[4]);
      var price= parseFloat(stripQuotes(parts[5])||'0.2')||0.2;
      var share= parseFloat(stripQuotes(parts[6])||'0.2')||0.2;
      var csv  = stripQuotes(parts[7]||'');
      var bizA = state.BIZ.businesses[bnA];
      if (!bizA) return whisper(who, panel('Error', ['‚ùå No such business.']));
      bizA.menu = bizA.menu || {};
      var rec = csv.split(',').map(function(seg){ seg=seg.trim(); if (!seg) return null; var p=seg.split(':'); return { key:p[0].trim(), units: parseFloat((p[1]||'1'))||1 }; }).filter(function(x){return !!x;});
      bizA.menu[key] = { label:label, priceGp:price, share:share, recipe:rec, tags:[], pricingMode:'fixed', targetMargin:0.5, analytics:[] };
      appendLedger(bnA, '<p>‚Ä¢ Menu item added: <strong>'+_.escape(label)+'</strong> @ '+price.toFixed(2)+'gp</p>');
      return showBusinessMenu(who, bnA);
    }
    case '--setpricing': {
      var bnP2 = decodeArg(parts[2]);
      var scope= stripQuotes(parts[3]); // 'menu' or 'stock'
      var key  = stripQuotes(parts[4]);
      var mode = stripQuotes(parts[5]); // fixed|target|smart
      var targ = parseFloat(stripQuotes(parts[6])||'0.5')||0.5;
      var bizSP= state.BIZ.businesses[bnP2];
      if (!bizSP) return whisper(who, panel('Error',['‚ùå No such business.']));
      if (scope==='menu' && bizSP.menu && bizSP.menu[key]){
        bizSP.menu[key].pricingMode=mode; bizSP.menu[key].targetMargin=targ;
      } else if (scope==='stock' && bizSP.stock && bizSP.stock[key]){
        bizSP.stock[key].pricingMode=mode; bizSP.stock[key].targetMargin=targ;
      } else return whisper(who, panel('Error',['‚ùå Key not found in '+scope]));
      whisper(who, panel('Pricing', ['‚úÖ '+scope+' "'+_.escape(key)+'" set to '+_.escape(mode)+(mode!=='fixed'?(' (target '+Math.round(targ*100)+'%)'):'') ]));
      return showBusinessMenu(who, bnP2);
    }

    /* SUPPLIERS / POLICY */
    case '--setsupplier': {
      var bzs = decodeArg(parts[2]);
      var skey= stripQuotes(parts[3]);
      var nm  = stripQuotes(parts[4]);
      var rel = Math.max(0, Math.min(1, parseFloat(stripQuotes(parts[5])||'0.92')||0.92));
      var lead= Math.max(0, parseInt(stripQuotes(parts[6])||'2',10)||2);
      var disc= Math.max(0, Math.min(1, parseFloat(stripQuotes(parts[7])||'0')||0));
      var bizS= state.BIZ.businesses[bzs];
      if (!bizS) return whisper(who, panel('Error',['‚ùå No such business.']));
      ensureSuppliers(bizS);
      bizS.suppliers[nm] = { reliability:rel, leadDays:lead, discount:disc };
      bizS.stock[skey] = bizS.stock[skey] || {};
      bizS.stock[skey].preferredSupplier = nm;
      whisper(who, panel('Supplier', ['‚úÖ Supplier set for '+_.escape(skey)+': '+_.escape(nm)+' (rel '+rel+', lead '+lead+'d, disc '+Math.round(disc*100)+'%)']));
      return showBusinessMenu(who, bzs);
    }
    case '--setpolicy': {
      var bnp=decodeArg(parts[2]); var pol=stripQuotes(parts[3]); var val=stripQuotes(parts[4]);
      var biz=state.BIZ.businesses[bnp]; if (!biz) return;
      biz.policy=biz.policy||{};
      if (pol==='insurance'){ biz.policy.insurance = (val==='on'); whisper(who, panel('Policy',['‚úÖ Insurance '+(biz.policy.insurance?'enabled':'disabled')+'.'])); }
      return showBusinessMenu(who,bnp);
    }

    /* ROOMS */
    case '--setrooms': {
      var bn = decodeArg(parts[2]);
      var n  = Math.max(0, parseInt(stripQuotes(parts[3])||'0',10));
      var rate  = parseFloat(stripQuotes(parts[4])||'0.5') || 0.5;
      var upkeep= parseFloat(stripQuotes(parts[5])||'0.1') || 0.1;
      var biz = state.BIZ.businesses[bn];
      if (!biz) return whisper(who, panel('Error', ['‚ùå No such business: '+_.escape(bn)]));
      var tcfg = TYPE_INCOME[biz.type];
      if (!(tcfg && tcfg.rooms)) return whisper(who, panel('Error', ['‚ùå '+_.escape(bn)+' is not an Inn.']));
      biz.rooms = [];
      for (var i=1;i<=n;i++){
        biz.rooms.push({ name:'Room #'+i, rateGp:rate, upkeepGp:upkeep, occupiedUntil:null });
      }
      appendLedger(bn, '<p>‚Ä¢ Rooms set: '+n+' room(s) @ '+rate.toFixed(2)+'gp/day, upkeep '+upkeep.toFixed(2)+'gp/day</p>');
      whisper(who, panel('Rooms Updated', ['‚úÖ Set '+n+' room(s) for "'+_.escape(bn)+'".']));
      return showBusinessMenu(who, bn);
    }
    case '--bookroom': {
      var bnb = decodeArg(parts[2]);
      var rname2 = stripQuotes(parts[3]);
      var nights = Math.max(1, parseInt(stripQuotes(parts[4])||'1',10));
      var bz6 = state.BIZ.businesses[bnb];
      var tcfg3 = TYPE_INCOME[bz6 ? bz6.type : ''];
      if (!bz6 || !(tcfg3 && tcfg3.rooms)) return whisper(who, panel('Error', ['‚ùå Not an inn or not found.']));
      var room = (bz6.rooms||[]).find ? (bz6.rooms||[]).find(function(r){return r.name===rname2;})
                                      : (function(){var arr=bz6.rooms||[]; for (var i=0;i<arr.length;i++){if (arr[i].name===rname2) return arr[i];} return null;})();
      if (!room) return whisper(who, panel('Error', ['‚ùå No such room: '+_.escape(rname2)]));
      var today = state.BIZ.date;
      room.occupiedUntil = addDaysHarptos(today, nights);
      appendLedger(bnb, '<p>‚Ä¢ Room booked: <strong>'+_.escape(rname2)+'</strong> for '+nights+' night(s), until '+_.escape(dateStr(room.occupiedUntil))+'</p>');
      return showBusinessMenu(who, bnb);
    }
    case '--viewrooms': {
      var bnr2 = decodeArg(parts[2]);
      var bz7 = state.BIZ.businesses[bnr2];
      var tcfg4 = TYPE_INCOME[bz7 ? bz7.type : ''];
      if (!bz7 || !(tcfg4 && tcfg4.rooms)) return whisper(who, panel('Error', ['‚ùå Not an inn or not found.']));
      var lines4 = ['üõèÔ∏è <b>Rooms for '+_.escape(bnr2)+'</b>'];
      var arr = bz7.rooms||[];
      if (!arr.length) lines4.push('<em>No rooms configured. Use Set Rooms.</em>');
      for (var i=0;i<arr.length;i++){
        var r = arr[i];
        lines4.push('‚Ä¢ '+_.escape(r.name)+' ‚Äî rate '+r.rateGp.toFixed(2)+'gp/day, upkeep '+r.upkeepGp.toFixed(2)+'gp/day ‚Äî '+(r.occupiedUntil?('occupied until '+_.escape(dateStr(r.occupiedUntil))):'vacant'));
      }
      lines4.push('<hr>'+btn('Back', "!biz --bizmenu "+encodeArg(bnr2), 'muted'));
      sayPanel(who, 'BizTracker ‚Äî Rooms', lines4);
      return;
    }

    /* FRANCHISES */
    case '--addfranchise': {
      var fn = stripQuotes(parts[2]);
      if (!fn) return whisper(who, panel('Error', ['‚ùå Usage: !biz --addfranchise Name']));
      state.BIZ.franchises[fn] = [];
      whisper(who, panel('Franchise', ['‚úÖ Franchise "'+_.escape(fn)+'" created.']));
      return showMainMenu(who);
    }
    case '--removefranchise': {
      var fn2 = stripQuotes(parts[2]);
      if (!state.BIZ.franchises[fn2]) return whisper(who, panel('Error', ['‚ùå No such franchise: '+_.escape(fn2)]));
      delete state.BIZ.franchises[fn2];
      whisper(who, panel('Franchise', ['‚ùå Removed franchise "'+_.escape(fn2)+'".']));
      return showMainMenu(who);
    }
    case '--franchmenu':
      return showFranchiseMenu(who, decodeArg(parts[2]));
    case '--linkfranchise': {
      var fnl = decodeArg(parts[2]), bn = stripQuotes(parts[3]);
      var mem = state.BIZ.franchises[fnl];
      if (!mem || !state.BIZ.businesses[bn]) return whisper(who, panel('Error', ['‚ùå Invalid franchise or business']));
      if (mem.indexOf(bn)===-1) mem.push(bn);
      whisper(who, panel('Franchise', ['‚úÖ Linked "'+_.escape(bn)+'" ‚Üí "'+_.escape(fnl)+'".']));
      return;
    }
    case '--unlinkfranchise': {
      var fnu = decodeArg(parts[2]), bn2 = stripQuotes(parts[3]);
      var mem2 = state.BIZ.franchises[fnu];
      if (!mem2 || mem2.indexOf(bn2)===-1) return whisper(who, panel('Error', ['‚ùå Not linked']));
      state.BIZ.franchises[fnu] = mem2.filter(function(x){return x!==bn2;});
      whisper(who, panel('Franchise', ['‚ùå Unlinked "'+_.escape(bn2)+'" from "'+_.escape(fnu)+'".']));
      return;
    }

    /* CALENDAR EVENTS */
    case '--addevent': {
      var en  = stripQuotes(parts[2]);
      var mon = stripQuotes(parts[3]);
      var day = parseInt(stripQuotes(parts[4])||'1',10);
      var pct = parseFloat(stripQuotes(parts[5])||'0')||0;
      if (!en || !mon) return whisper(who, panel('Error', ['‚ùå Usage: !biz --addevent Name Month Day Percent']));
      state.BIZ.calendarEvents.push({ name:en, month:mon, day:day, percent:pct });
      whisper(who, panel('Event', ['‚úÖ Added event "'+_.escape(en)+'" on '+_.escape(mon)+' '+day+' ('+pct+'%).']));
      return showMainMenu(who);
    }
    case '--rmevent': {
      var en2 = stripQuotes(parts[2]);
      var before = state.BIZ.calendarEvents.length;
      state.BIZ.calendarEvents = state.BIZ.calendarEvents.filter(function(e){return e.name!==en2;});
      whisper(who, panel('Event', [ state.BIZ.calendarEvents.length<before ? '‚ùå Removed event "'+_.escape(en2)+'".' : '‚ùå No such event: '+_.escape(en2)+'.' ]));
      return showMainMenu(who);
    }
    case '--listevents':
      return showEventsMenu(who);

    /* MARKET */
    case '--market': return showMarket(who);
    case '--marketspecials': return showMarketSpecials(who);

    /* REPORT/EXPORT */
    case '--report': {
      var bnR=decodeArg(parts[2]); var bizR=state.BIZ.businesses[bnR];
      if (!bizR) return whisper(who, panel('Error',['‚ùå No such business.']));
      var last = (bizR.ledger||[]).slice(-10);
      var inc=0, pos=0, neg=0, i, e;
      for (i=0;i<last.length;i++){ e=last[i].delta||0; if (e>0) pos+=e; else neg+=(-e); inc+=e; }
      var rows=['üìä <b>Weekly-ish Report ‚Äî '+_.escape(bnR)+'</b>',
        'Entries: '+last.length+' ‚Äî Profit '+gpStr(inc)+' (Income '+gpStr(pos)+' / Expenses '+gpStr(neg)+')',
        '<hr>'+btn('Back', "!biz --bizmenu "+encodeArg(bnR), 'muted')
      ];
      sayPanel(who,'Report',rows);
      return;
    }
    case '--export': {
      var dump = JSON.stringify(state.BIZ, null, 2);
      var ho = findObjs({_type:'handout', name:'BizTracker Export'})[0];
      if (!ho) ho = createObj('handout',{name:'BizTracker Export', inplayerjournals:'all'});
      ho.set('notes','<pre>'+_.escape(dump)+'</pre>');
      whisper(who, panel('Export',['üì§ Wrote current state to handout: <b>BizTracker Export</b>']));
      return;
    }

    /* ADVANCE / REWIND */
    case '--advday': {
      var prevDate = cloneDate(state.BIZ.date);
      advanceHarptos();
      var today = state.BIZ.date;
      var evt = pickDailyEvent(today);
      var impacts = {};

      _.each(state.BIZ.businesses, function(biz, name){
        recomputeSize(biz);
        ensureSuppliers(biz);
        var sizeCfg = SIZE[biz.size] || SIZE.small;
        var typeCfg = TYPE_INCOME[biz.type] || TYPE_INCOME['default'];

        // 1) Expenses due today
        var paidToday = [];
        var expenseCP = 0;
        (biz.expenses||[]).forEach(function(e){
          var due = e.nextDue;
          var match = (due && due.year===today.year && due.month===today.month && due.day===today.day && ((due.festival||null)===(today.festival||null)));
          if (match){
            var cp = Math.round((e.amount.gp||0)*100);
            expenseCP += cp;
            paidToday.push({ what:e.what, freq:e.frequency, cp:cp });
            var step = e.frequency==='Daily' ? 1 : e.frequency==='Weekly' ? 10 : e.frequency==='Monthly' ? 30 : 365;
            e.nextDue = addDaysHarptos(due, step);
          }
        });

        // 2) Base income (variance + size + reputation + staff skill + courier trust)
        var varPct  = (typeCfg && typeof typeCfg.var==='number') ? typeCfg.var : 0.30;
        var variance= 1 + (Math.random()*2 - 1) * varPct;
        var rep     = clamp((biz.reputation||0), -50, 100);
        var repMult = 1 + (rep/100)*0.5;
        var baseGP  = Math.max(0, (typeCfg?typeCfg.gp:1.0) * variance * (sizeCfg.baseMult||1) * repMult * (avgSkill(biz)||1));
        if (biz.type==='Courier Service'){
          var trust = (typeof biz.trust==='number') ? biz.trust : 50;
          baseGP *= Math.max(0.15, 0.2 + trust/100);
        }
        var baseCP  = Math.round(baseGP * 100);

        // 3) Capacity gate (skill already blended in base); hard cap still applies
        var staffCount = (biz.staff||[]).length;
        var demand = Math.ceil(baseGP * 4);
        var capacity = (staffCount*2) + (sizeCfg.demandCap||16);
        var capacityNote = '';
        var incomeCPBeforeEvent = baseCP;
        if (demand > capacity){
          var capRatio = capacity / Math.max(1, demand);
          incomeCPBeforeEvent = Math.floor(incomeCPBeforeEvent * capRatio);
          capacityNote = 'Capacity limit: demand '+demand+', capacity '+capacity+' (scaled).';
          biz.reputation = (biz.reputation||0) - 0.2;
        }

        // 4) Event spoilage (lots)
        var spoilLines = [];
        if (evt.stockHit && biz.stock){
          Object.keys(biz.stock).forEach(function(k){
            var it = biz.stock[k];
            if (!it || !it.perishability || it.perishability==='indefinite') return;
            var lost = spoilLots(it, evt.stockHit);
            if (lost>0) spoilLines.push(it.label+': ‚àí'+lost+' '+it.baseUnit);
          });
        }

        // 5) SELL: allocate income between priced stock & menu items
        var priced = []; // objects {kind:'stock'|'menu', key, priceGp, share, tags, recipe?}
        if (biz.stock){
          Object.keys(biz.stock).forEach(function(k){
            var it = biz.stock[k];
            if (it && it.salePricePerUnit>0){ priced.push({ kind:'stock', key:k, priceGp:it.salePricePerUnit, share:0.2, tags:it.tags||[] }); }
          });
        }
        if (biz.menu){
          Object.keys(biz.menu).forEach(function(k){
            var m = biz.menu[k];
            priced.push({ kind:'menu', key:k, priceGp:m.priceGp, share: m.share||0.2, tags:m.tags||[], recipe:m.recipe||[] });
          });
        }
        if (!priced.length && biz.stock && Object.keys(biz.stock).length){
          // fallback to heuristic
          var keys = Object.keys(biz.stock);
          var perKeyGP = (incomeCPBeforeEvent/100) / keys.length;
          keys.forEach(function(k){
            var it = biz.stock[k];
            var unitValue = Math.max((it.purchaseCostPerUnit||0)*1.5, 0.05);
            var unitsDemanded = Math.ceil(perKeyGP / unitValue);
            var used = takeFromLots(it, unitsDemanded);
            var shortfall = Math.max(0, unitsDemanded - used);
            if (shortfall>0){
              var buyCost = Math.round(shortfall * (it.purchaseCostPerUnit||unitValue*0.5) * 1.25 * 100);
              expenseCP += buyCost;
              paidToday.push({ what:'Emergency '+it.label, freq:'One-off', cp:buyCost });
              addLot(it, shortfall, today, null); takeFromLots(it, shortfall);
            }
          });
        } else {
          // normalize shares & apply seasons
          var totalShare=0, i;
          for (i=0;i<priced.length;i++){
            priced[i]._season = seasonalMult(today, priced[i].tags||[]);
            totalShare += (priced[i].share||0.2) * (priced[i]._season||1);
          }
          var per = (incomeCPBeforeEvent/100);
          for (i=0;i<priced.length;i++){
            var weight = (priced[i].share||0.2) * (priced[i]._season||1) / Math.max(0.0001,totalShare);
            var gpAlloc = per * weight;
            var unitsDemanded = Math.max(0, Math.ceil(gpAlloc / Math.max(0.01, priced[i].priceGp)));
            if (unitsDemanded<=0) continue;

            if (priced[i].kind==='stock'){
              var itS = biz.stock[priced[i].key];
              var usedS = takeFromLots(itS, unitsDemanded);
              var shortS = Math.max(0, unitsDemanded - usedS);
              if (shortS>0){
                var unitVal = itS.purchaseCostPerUnit||0.05, best;
                if (itS.linkedToMarket && itS.marketTag){
                  best = marketBestPrice(itS.marketTag);
                  if (best) unitVal = best.priceGP;
                }
                var rush = Math.round(shortS * unitVal * 1.25 * 100);
                expenseCP += rush; paidToday.push({ what:'Emergency '+itS.label, freq:'One-off', cp:rush });
                addLot(itS, shortS, today, (best?best.id:null)); takeFromLots(itS, shortS);
              }
              // dynamic pricing record
              itS.analytics = itS.analytics||[];
              itS.analytics.push({ d:cloneDate(today), demanded:unitsDemanded, sold:unitsDemanded, price:itS.salePricePerUnit });
              if (itS.analytics.length>20) itS.analytics.shift();

            } else if (priced[i].kind==='menu'){
              var mI = biz.menu[priced[i].key];
              var res = consumeIngredients(biz, mI.recipe||[], unitsDemanded, paidToday);
              if (!res.ok){ biz.reputation = (biz.reputation||0)-0.5; }
              mI.analytics = mI.analytics||[];
              mI.analytics.push({ d:cloneDate(today), demanded:unitsDemanded, sold:unitsDemanded, price:mI.priceGp });
              if (mI.analytics.length>20) mI.analytics.shift();
            }
          }
        }

        // 6) Event multiplier
        var incomeCP = Math.floor(incomeCPBeforeEvent * evt.mult);

        // 7) Rooms (inn)
        var roomsRevenueCP = 0, roomsUpkeepCP = 0;
        var tcfgRooms = TYPE_INCOME[biz.type] && TYPE_INCOME[biz.type].rooms;
        if (tcfgRooms){
          (biz.rooms||[]).forEach(function(r){
            roomsUpkeepCP += Math.round((r.upkeepGp||0)*100);
            if (r.occupiedUntil && dateLE(today, r.occupiedUntil)){
              roomsRevenueCP += Math.round((r.rateGp||0)*100);
            }
          });
        }

        // 8) STANDING ORDERS (suppliers, market, franchise discount, reliability)
        if (biz.stock){
          Object.keys(biz.stock).forEach(function(k){
            var it = biz.stock[k];
            var cycle = perishDays(it.perishability);
            if (!cycle || !it.nextRestock) return;
            if (it.nextRestock.year===today.year && it.nextRestock.month===today.month && it.nextRestock.day===today.day && ((it.nextRestock.festival||null)===(today.festival||null))){
              var scale = standingScale(biz);
              var orderUnits = Math.max(0, Math.round((it.standingOrderUnits||0) * scale));
              if (orderUnits>0){
                var unitCost = it.purchaseCostPerUnit||0.05, supplier = it.preferredSupplier && biz.suppliers[it.preferredSupplier] ? biz.suppliers[it.preferredSupplier] : null;
                var reliable = supplier ? (Math.random()<supplier.reliability) : true;
                if (it.linkedToMarket && it.marketTag){
                  var best = marketBestPrice(it.marketTag);
                  if (best) unitCost = best.priceGP;
                }
                // discounts
                var supDisc = supplier ? supplier.discount||0 : 0;
                var frDisc  = franchiseDiscountFor(name);
                unitCost *= (1 - supDisc) * (1 - frDisc);
                if (reliable){
                  var orderCost = Math.round(orderUnits * unitCost * 100);
                  var tot = currencyToCP(biz.cash) - orderCost;
                  biz.cash = cpToCurrency(tot);
                  addLot(it, orderUnits, today, null);
                  paidToday.push({ what:'Standing Order: '+it.label, freq:it.perishability, cp:orderCost });
                } else {
                  paidToday.push({ what:'Standing Order Failed: '+it.label, freq:'Delay', cp:0 });
                }
              }
              // next
              var lead = supplier ? supplier.leadDays||0 : 0;
              it.nextRestock = addDaysHarptos(today, cycle + lead);
            }
          });
        }

        // 9) Courier incidents (liability)
        if (biz.type==='Courier Service'){
          var risk = 0.04 * (1-(avgSkill(biz)-1)*0.5); // skill reduces
          if (Math.random()<risk){
            var claimCP = Math.round( rnd(0.5,1.5) * 100 );
            expenseCP += claimCP;
            paidToday.push({ what:'Lost Parcel Claims', freq:'One-off', cp:claimCP });
            biz.trust = clamp((biz.trust||50)-5, 0, 100);
            biz.reputation = (biz.reputation||0) - 1;
          }
          // insurance upsell adds 8% revenue
          if (biz.policy && biz.policy.insurance) incomeCP = Math.floor(incomeCP * 1.08);
        }

        // 10) Aging (monthly tick): add a tiny bonus to implied price
        if (today.day===1 && biz.stock){
          Object.keys(biz.stock).forEach(function(k){
            var it = biz.stock[k]; if (!it || !it.lots || !it.lots.length) return;
            for (var L=0;L<it.lots.length;L++){ it.lots[L].ageMonths = (it.lots[L].ageMonths||0)+1; }
            if (it.ageBonusPct){ it.salePricePerUnit = +( (it.salePricePerUnit||0) * (1+it.ageBonusPct) ).toFixed(3); }
          });
        }

        // 11) Dynamic pricing (simple sell-through nudges)
        function tunePrice(mode, target, price, series){
          if (mode==='fixed' || !series || !series.length) return price;
          var last = series.slice(-5);
          var dem=0, sold=0, i;
          for (i=0;i<last.length;i++){ dem+=last[i].demanded||0; sold+=last[i].sold||0; }
          var rate = dem? (sold/dem) : 1.0;
          if (mode==='target'){
            // aim for target margin ‚Äî leave as TODO for full COGS model; keep price
            return price;
          }
          if (mode==='smart'){
            if (rate>1.05) price*=1.05;
            else if (rate<0.60) price*=0.95;
          }
          return +price.toFixed(3);
        }
        if (biz.stock){ Object.keys(biz.stock).forEach(function(k){ var it=biz.stock[k]; if (it.salePricePerUnit>0) it.salePricePerUnit = tunePrice(it.pricingMode||'fixed', it.targetMargin||0.5, it.salePricePerUnit, it.analytics); }); }
        if (biz.menu){ Object.keys(biz.menu).forEach(function(k){ var m=biz.menu[k]; m.priceGp = tunePrice(m.pricingMode||'fixed', m.targetMargin||0.5, m.priceGp, m.analytics); }); }

        // 12) Net
        var netCP = (incomeCP + (tcfgRooms?roomsRevenueCP:0)) - (expenseCP + (tcfgRooms?roomsUpkeepCP:0));

        // 13) Cash & ledger
        var before = currencyToCP(biz.cash);
        var after  = before + netCP;
        biz.cash   = cpToCurrency(after);
        biz.ledger = biz.ledger||[];
        biz.ledger.push({ date: cloneDate(today), tier: evt.tier, desc: evt.desc, delta: netCP });

        // 14) Reputation drift
        biz.reputation = clamp((biz.reputation||0) + (evt.repDelta||0) + 0.1, -50, 100);

        // 15) Handout log
        logDailyOutcome(name, today, paidToday, incomeCPBeforeEvent, evt, incomeCP, netCP, currStr(biz.cash), capacityNote, spoilLines, '');

        impacts[name] = netCP;
      });

      state.BIZ.history.push({ prevDate:prevDate, impacts:impacts });
      whisper(who, panel('Advance', ['‚û°Ô∏è Advanced to the next day.']));
      return showMainMenu(who);
    }

    case '--rewindday': {
      if (!state.BIZ.history.length){
        whisper(who, panel('Rewind', ['‚ùå Nothing to undo.']));
        return showMainMenu(who);
      }
      var last = state.BIZ.history.pop();
      state.BIZ.date = last.prevDate;
      _.each(last.impacts, function(netCP, name){
        var biz = state.BIZ.businesses[name];
        if (!biz) return;
        var total = currencyToCP(biz.cash) - netCP;
        biz.cash = cpToCurrency(total);
        if (biz.ledger && biz.ledger.length) biz.ledger.pop();
      });
      whisper(who, panel('Rewind', ['‚Ü©Ô∏è Rewound one day.']));
      return showMainMenu(who);
    }

    default:
      whisper(who, panel('Help', ["Unknown command. Try "+btn('!biz start', "!biz start", 'pri')] ));
  }
});
>>>>>>> theirs
